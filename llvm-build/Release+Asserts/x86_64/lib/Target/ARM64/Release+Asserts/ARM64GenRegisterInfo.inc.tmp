/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass ARM64MCRegisterClasses[];

namespace ARM64 {
enum {
  NoRegister,
  CPSR = 1,
  FP = 2,
  LR = 3,
  SP = 4,
  WSP = 5,
  WZR = 6,
  XZR = 7,
  B0 = 8,
  B1 = 9,
  B2 = 10,
  B3 = 11,
  B4 = 12,
  B5 = 13,
  B6 = 14,
  B7 = 15,
  B8 = 16,
  B9 = 17,
  B10 = 18,
  B11 = 19,
  B12 = 20,
  B13 = 21,
  B14 = 22,
  B15 = 23,
  B16 = 24,
  B17 = 25,
  B18 = 26,
  B19 = 27,
  B20 = 28,
  B21 = 29,
  B22 = 30,
  B23 = 31,
  B24 = 32,
  B25 = 33,
  B26 = 34,
  B27 = 35,
  B28 = 36,
  B29 = 37,
  B30 = 38,
  B31 = 39,
  D0 = 40,
  D1 = 41,
  D2 = 42,
  D3 = 43,
  D4 = 44,
  D5 = 45,
  D6 = 46,
  D7 = 47,
  D8 = 48,
  D9 = 49,
  D10 = 50,
  D11 = 51,
  D12 = 52,
  D13 = 53,
  D14 = 54,
  D15 = 55,
  D16 = 56,
  D17 = 57,
  D18 = 58,
  D19 = 59,
  D20 = 60,
  D21 = 61,
  D22 = 62,
  D23 = 63,
  D24 = 64,
  D25 = 65,
  D26 = 66,
  D27 = 67,
  D28 = 68,
  D29 = 69,
  D30 = 70,
  D31 = 71,
  H0 = 72,
  H1 = 73,
  H2 = 74,
  H3 = 75,
  H4 = 76,
  H5 = 77,
  H6 = 78,
  H7 = 79,
  H8 = 80,
  H9 = 81,
  H10 = 82,
  H11 = 83,
  H12 = 84,
  H13 = 85,
  H14 = 86,
  H15 = 87,
  H16 = 88,
  H17 = 89,
  H18 = 90,
  H19 = 91,
  H20 = 92,
  H21 = 93,
  H22 = 94,
  H23 = 95,
  H24 = 96,
  H25 = 97,
  H26 = 98,
  H27 = 99,
  H28 = 100,
  H29 = 101,
  H30 = 102,
  H31 = 103,
  Q0 = 104,
  Q1 = 105,
  Q2 = 106,
  Q3 = 107,
  Q4 = 108,
  Q5 = 109,
  Q6 = 110,
  Q7 = 111,
  Q8 = 112,
  Q9 = 113,
  Q10 = 114,
  Q11 = 115,
  Q12 = 116,
  Q13 = 117,
  Q14 = 118,
  Q15 = 119,
  Q16 = 120,
  Q17 = 121,
  Q18 = 122,
  Q19 = 123,
  Q20 = 124,
  Q21 = 125,
  Q22 = 126,
  Q23 = 127,
  Q24 = 128,
  Q25 = 129,
  Q26 = 130,
  Q27 = 131,
  Q28 = 132,
  Q29 = 133,
  Q30 = 134,
  Q31 = 135,
  S0 = 136,
  S1 = 137,
  S2 = 138,
  S3 = 139,
  S4 = 140,
  S5 = 141,
  S6 = 142,
  S7 = 143,
  S8 = 144,
  S9 = 145,
  S10 = 146,
  S11 = 147,
  S12 = 148,
  S13 = 149,
  S14 = 150,
  S15 = 151,
  S16 = 152,
  S17 = 153,
  S18 = 154,
  S19 = 155,
  S20 = 156,
  S21 = 157,
  S22 = 158,
  S23 = 159,
  S24 = 160,
  S25 = 161,
  S26 = 162,
  S27 = 163,
  S28 = 164,
  S29 = 165,
  S30 = 166,
  S31 = 167,
  W0 = 168,
  W1 = 169,
  W2 = 170,
  W3 = 171,
  W4 = 172,
  W5 = 173,
  W6 = 174,
  W7 = 175,
  W8 = 176,
  W9 = 177,
  W10 = 178,
  W11 = 179,
  W12 = 180,
  W13 = 181,
  W14 = 182,
  W15 = 183,
  W16 = 184,
  W17 = 185,
  W18 = 186,
  W19 = 187,
  W20 = 188,
  W21 = 189,
  W22 = 190,
  W23 = 191,
  W24 = 192,
  W25 = 193,
  W26 = 194,
  W27 = 195,
  W28 = 196,
  W29 = 197,
  W30 = 198,
  X0 = 199,
  X1 = 200,
  X2 = 201,
  X3 = 202,
  X4 = 203,
  X5 = 204,
  X6 = 205,
  X7 = 206,
  X8 = 207,
  X9 = 208,
  X10 = 209,
  X11 = 210,
  X12 = 211,
  X13 = 212,
  X14 = 213,
  X15 = 214,
  X16 = 215,
  X17 = 216,
  X18 = 217,
  X19 = 218,
  X20 = 219,
  X21 = 220,
  X22 = 221,
  X23 = 222,
  X24 = 223,
  X25 = 224,
  X26 = 225,
  X27 = 226,
  X28 = 227,
  D0_D1 = 228,
  D1_D2 = 229,
  D2_D3 = 230,
  D3_D4 = 231,
  D4_D5 = 232,
  D5_D6 = 233,
  D6_D7 = 234,
  D7_D8 = 235,
  D8_D9 = 236,
  D9_D10 = 237,
  D10_D11 = 238,
  D11_D12 = 239,
  D12_D13 = 240,
  D13_D14 = 241,
  D14_D15 = 242,
  D15_D16 = 243,
  D16_D17 = 244,
  D17_D18 = 245,
  D18_D19 = 246,
  D19_D20 = 247,
  D20_D21 = 248,
  D21_D22 = 249,
  D22_D23 = 250,
  D23_D24 = 251,
  D24_D25 = 252,
  D25_D26 = 253,
  D26_D27 = 254,
  D27_D28 = 255,
  D28_D29 = 256,
  D29_D30 = 257,
  D30_D31 = 258,
  D31_D0 = 259,
  D0_D1_D2_D3 = 260,
  D1_D2_D3_D4 = 261,
  D2_D3_D4_D5 = 262,
  D3_D4_D5_D6 = 263,
  D4_D5_D6_D7 = 264,
  D5_D6_D7_D8 = 265,
  D6_D7_D8_D9 = 266,
  D7_D8_D9_D10 = 267,
  D8_D9_D10_D11 = 268,
  D9_D10_D11_D12 = 269,
  D10_D11_D12_D13 = 270,
  D11_D12_D13_D14 = 271,
  D12_D13_D14_D15 = 272,
  D13_D14_D15_D16 = 273,
  D14_D15_D16_D17 = 274,
  D15_D16_D17_D18 = 275,
  D16_D17_D18_D19 = 276,
  D17_D18_D19_D20 = 277,
  D18_D19_D20_D21 = 278,
  D19_D20_D21_D22 = 279,
  D20_D21_D22_D23 = 280,
  D21_D22_D23_D24 = 281,
  D22_D23_D24_D25 = 282,
  D23_D24_D25_D26 = 283,
  D24_D25_D26_D27 = 284,
  D25_D26_D27_D28 = 285,
  D26_D27_D28_D29 = 286,
  D27_D28_D29_D30 = 287,
  D28_D29_D30_D31 = 288,
  D29_D30_D31_D0 = 289,
  D30_D31_D0_D1 = 290,
  D31_D0_D1_D2 = 291,
  D0_D1_D2 = 292,
  D1_D2_D3 = 293,
  D2_D3_D4 = 294,
  D3_D4_D5 = 295,
  D4_D5_D6 = 296,
  D5_D6_D7 = 297,
  D6_D7_D8 = 298,
  D7_D8_D9 = 299,
  D8_D9_D10 = 300,
  D9_D10_D11 = 301,
  D10_D11_D12 = 302,
  D11_D12_D13 = 303,
  D12_D13_D14 = 304,
  D13_D14_D15 = 305,
  D14_D15_D16 = 306,
  D15_D16_D17 = 307,
  D16_D17_D18 = 308,
  D17_D18_D19 = 309,
  D18_D19_D20 = 310,
  D19_D20_D21 = 311,
  D20_D21_D22 = 312,
  D21_D22_D23 = 313,
  D22_D23_D24 = 314,
  D23_D24_D25 = 315,
  D24_D25_D26 = 316,
  D25_D26_D27 = 317,
  D26_D27_D28 = 318,
  D27_D28_D29 = 319,
  D28_D29_D30 = 320,
  D29_D30_D31 = 321,
  D30_D31_D0 = 322,
  D31_D0_D1 = 323,
  Q0_Q1 = 324,
  Q1_Q2 = 325,
  Q2_Q3 = 326,
  Q3_Q4 = 327,
  Q4_Q5 = 328,
  Q5_Q6 = 329,
  Q6_Q7 = 330,
  Q7_Q8 = 331,
  Q8_Q9 = 332,
  Q9_Q10 = 333,
  Q10_Q11 = 334,
  Q11_Q12 = 335,
  Q12_Q13 = 336,
  Q13_Q14 = 337,
  Q14_Q15 = 338,
  Q15_Q16 = 339,
  Q16_Q17 = 340,
  Q17_Q18 = 341,
  Q18_Q19 = 342,
  Q19_Q20 = 343,
  Q20_Q21 = 344,
  Q21_Q22 = 345,
  Q22_Q23 = 346,
  Q23_Q24 = 347,
  Q24_Q25 = 348,
  Q25_Q26 = 349,
  Q26_Q27 = 350,
  Q27_Q28 = 351,
  Q28_Q29 = 352,
  Q29_Q30 = 353,
  Q30_Q31 = 354,
  Q31_Q0 = 355,
  Q0_Q1_Q2_Q3 = 356,
  Q1_Q2_Q3_Q4 = 357,
  Q2_Q3_Q4_Q5 = 358,
  Q3_Q4_Q5_Q6 = 359,
  Q4_Q5_Q6_Q7 = 360,
  Q5_Q6_Q7_Q8 = 361,
  Q6_Q7_Q8_Q9 = 362,
  Q7_Q8_Q9_Q10 = 363,
  Q8_Q9_Q10_Q11 = 364,
  Q9_Q10_Q11_Q12 = 365,
  Q10_Q11_Q12_Q13 = 366,
  Q11_Q12_Q13_Q14 = 367,
  Q12_Q13_Q14_Q15 = 368,
  Q13_Q14_Q15_Q16 = 369,
  Q14_Q15_Q16_Q17 = 370,
  Q15_Q16_Q17_Q18 = 371,
  Q16_Q17_Q18_Q19 = 372,
  Q17_Q18_Q19_Q20 = 373,
  Q18_Q19_Q20_Q21 = 374,
  Q19_Q20_Q21_Q22 = 375,
  Q20_Q21_Q22_Q23 = 376,
  Q21_Q22_Q23_Q24 = 377,
  Q22_Q23_Q24_Q25 = 378,
  Q23_Q24_Q25_Q26 = 379,
  Q24_Q25_Q26_Q27 = 380,
  Q25_Q26_Q27_Q28 = 381,
  Q26_Q27_Q28_Q29 = 382,
  Q27_Q28_Q29_Q30 = 383,
  Q28_Q29_Q30_Q31 = 384,
  Q29_Q30_Q31_Q0 = 385,
  Q30_Q31_Q0_Q1 = 386,
  Q31_Q0_Q1_Q2 = 387,
  Q0_Q1_Q2 = 388,
  Q1_Q2_Q3 = 389,
  Q2_Q3_Q4 = 390,
  Q3_Q4_Q5 = 391,
  Q4_Q5_Q6 = 392,
  Q5_Q6_Q7 = 393,
  Q6_Q7_Q8 = 394,
  Q7_Q8_Q9 = 395,
  Q8_Q9_Q10 = 396,
  Q9_Q10_Q11 = 397,
  Q10_Q11_Q12 = 398,
  Q11_Q12_Q13 = 399,
  Q12_Q13_Q14 = 400,
  Q13_Q14_Q15 = 401,
  Q14_Q15_Q16 = 402,
  Q15_Q16_Q17 = 403,
  Q16_Q17_Q18 = 404,
  Q17_Q18_Q19 = 405,
  Q18_Q19_Q20 = 406,
  Q19_Q20_Q21 = 407,
  Q20_Q21_Q22 = 408,
  Q21_Q22_Q23 = 409,
  Q22_Q23_Q24 = 410,
  Q23_Q24_Q25 = 411,
  Q24_Q25_Q26 = 412,
  Q25_Q26_Q27 = 413,
  Q26_Q27_Q28 = 414,
  Q27_Q28_Q29 = 415,
  Q28_Q29_Q30 = 416,
  Q29_Q30_Q31 = 417,
  Q30_Q31_Q0 = 418,
  Q31_Q0_Q1 = 419,
  NUM_TARGET_REGS 	// 420
};
}

// Register classes
namespace ARM64 {
enum {
  FPR8RegClassID = 0,
  FPR16RegClassID = 1,
  GPR32allRegClassID = 2,
  FPR32RegClassID = 3,
  GPR32RegClassID = 4,
  GPR32spRegClassID = 5,
  GPR32commonRegClassID = 6,
  CCRRegClassID = 7,
  GPR64allRegClassID = 8,
  FPR64RegClassID = 9,
  GPR64RegClassID = 10,
  GPR64spRegClassID = 11,
  GPR64commonRegClassID = 12,
  tcGPR64RegClassID = 13,
  DDRegClassID = 14,
  FPR128RegClassID = 15,
  FPR128_loRegClassID = 16,
  DDDRegClassID = 17,
  DDDDRegClassID = 18,
  QQRegClassID = 19,
  QQ_with_qsub0_in_FPR128_loRegClassID = 20,
  QQ_with_qsub1_in_FPR128_loRegClassID = 21,
  QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClassID = 22,
  QQQRegClassID = 23,
  QQQ_with_qsub0_in_FPR128_loRegClassID = 24,
  QQQ_with_qsub1_in_FPR128_loRegClassID = 25,
  QQQ_with_qsub2_in_FPR128_loRegClassID = 26,
  QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClassID = 27,
  QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID = 28,
  QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID = 29,
  QQQQRegClassID = 30,
  QQQQ_with_qsub0_in_FPR128_loRegClassID = 31,
  QQQQ_with_qsub1_in_FPR128_loRegClassID = 32,
  QQQQ_with_qsub2_in_FPR128_loRegClassID = 33,
  QQQQ_with_qsub3_in_FPR128_loRegClassID = 34,
  QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClassID = 35,
  QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID = 36,
  QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID = 37,
  QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID = 38,
  QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID = 39,
  QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID = 40
  };
}

// Register alternate name indices
namespace ARM64 {
enum {
  NoRegAltName,	// 0
  vlist1,	// 1
  vreg,	// 2
  NUM_TARGET_REG_ALT_NAMES = 3
};
}

// Subregister indices
namespace ARM64 {
enum {
  NoSubRegister,
  bsub,	// 1
  dsub,	// 2
  dsub0,	// 3
  dsub1,	// 4
  dsub2,	// 5
  dsub3,	// 6
  hsub,	// 7
  qhisub,	// 8
  qsub,	// 9
  qsub0,	// 10
  qsub1,	// 11
  qsub2,	// 12
  qsub3,	// 13
  ssub,	// 14
  sub_32,	// 15
  dsub1_then_bsub,	// 16
  dsub1_then_hsub,	// 17
  dsub1_then_ssub,	// 18
  dsub3_then_bsub,	// 19
  dsub3_then_hsub,	// 20
  dsub3_then_ssub,	// 21
  dsub2_then_bsub,	// 22
  dsub2_then_hsub,	// 23
  dsub2_then_ssub,	// 24
  qsub1_then_bsub,	// 25
  qsub1_then_dsub,	// 26
  qsub1_then_hsub,	// 27
  qsub1_then_ssub,	// 28
  qsub3_then_bsub,	// 29
  qsub3_then_dsub,	// 30
  qsub3_then_hsub,	// 31
  qsub3_then_ssub,	// 32
  qsub2_then_bsub,	// 33
  qsub2_then_dsub,	// 34
  qsub2_then_hsub,	// 35
  qsub2_then_ssub,	// 36
  dsub0_dsub1,	// 37
  dsub0_dsub1_dsub2,	// 38
  dsub1_dsub2,	// 39
  dsub1_dsub2_dsub3,	// 40
  dsub2_dsub3,	// 41
  dsub_qsub1_then_dsub,	// 42
  dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub,	// 43
  dsub_qsub1_then_dsub_qsub2_then_dsub,	// 44
  qsub0_qsub1,	// 45
  qsub0_qsub1_qsub2,	// 46
  qsub1_qsub2,	// 47
  qsub1_qsub2_qsub3,	// 48
  qsub2_qsub3,	// 49
  qsub1_then_dsub_qsub2_then_dsub,	// 50
  qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub,	// 51
  qsub2_then_dsub_qsub3_then_dsub,	// 52
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg ARM64RegDiffLists[] = {
  /* 0 */ 65185, 1, 1, 1, 0,
  /* 5 */ 65281, 1, 1, 1, 0,
  /* 10 */ 5, 29, 1, 1, 0,
  /* 15 */ 65153, 1, 1, 0,
  /* 19 */ 65249, 1, 1, 0,
  /* 23 */ 5, 1, 29, 1, 0,
  /* 28 */ 5, 30, 1, 0,
  /* 32 */ 65284, 96, 65472, 65472, 33, 96, 65472, 65472, 33, 96, 65472, 65472, 218, 1, 0,
  /* 47 */ 65284, 96, 65472, 65472, 33, 96, 65472, 65472, 1, 96, 65472, 65472, 250, 1, 0,
  /* 62 */ 65217, 1, 0,
  /* 65 */ 65313, 1, 0,
  /* 68 */ 64, 64, 65440, 64, 123, 1, 62, 65503, 34, 65503, 34, 65503, 1, 63, 1, 62, 65503, 34, 65503, 34, 65503, 1, 0,
  /* 91 */ 219, 1, 62, 65503, 34, 65503, 34, 65503, 1, 0,
  /* 101 */ 64, 64, 65440, 64, 124, 31, 33, 65504, 62, 65503, 34, 65503, 1, 33, 31, 33, 65504, 62, 65503, 34, 65503, 1, 0,
  /* 124 */ 220, 31, 33, 65504, 62, 65503, 34, 65503, 1, 0,
  /* 134 */ 63, 65503, 34, 65503, 1, 64, 63, 65503, 34, 65503, 1, 0,
  /* 146 */ 64, 64, 65440, 64, 123, 1, 63, 1, 65503, 1, 62, 65503, 1, 33, 1, 63, 1, 65503, 1, 62, 65503, 1, 0,
  /* 169 */ 219, 1, 63, 1, 65503, 1, 62, 65503, 1, 0,
  /* 179 */ 64, 65504, 63, 65503, 1, 33, 64, 65504, 63, 65503, 1, 0,
  /* 191 */ 65503, 1, 128, 65503, 1, 0,
  /* 197 */ 3, 0,
  /* 199 */ 4, 0,
  /* 201 */ 5, 1, 1, 29, 0,
  /* 206 */ 64, 64, 65440, 64, 123, 1, 62, 1, 65503, 34, 65503, 1, 29, 34, 1, 62, 1, 65503, 34, 65503, 1, 29, 0,
  /* 229 */ 219, 1, 62, 1, 65503, 34, 65503, 1, 29, 0,
  /* 239 */ 5, 1, 30, 0,
  /* 243 */ 63, 1, 65503, 1, 30, 34, 63, 1, 65503, 1, 30, 0,
  /* 255 */ 5, 31, 0,
  /* 258 */ 65504, 31, 97, 65504, 31, 0,
  /* 264 */ 96, 0,
  /* 266 */ 195, 0,
  /* 268 */ 65316, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 219, 0,
  /* 280 */ 65316, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 251, 0,
  /* 292 */ 65340, 0,
  /* 294 */ 65341, 0,
  /* 296 */ 65374, 0,
  /* 298 */ 65405, 0,
  /* 300 */ 65437, 0,
  /* 302 */ 65252, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 218, 64, 32, 1, 65440, 0,
  /* 323 */ 65252, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 250, 64, 32, 1, 65440, 0,
  /* 344 */ 65252, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 250, 64, 32, 65505, 65440, 0,
  /* 365 */ 65284, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 249, 32, 32, 32, 64, 65473, 64, 65441, 65471, 64, 65441, 0,
  /* 397 */ 65316, 96, 65472, 65472, 33, 96, 65472, 65472, 1, 96, 65472, 65472, 33, 96, 65472, 65472, 249, 64, 65473, 64, 65441, 0,
  /* 419 */ 65469, 0,
  /* 421 */ 65348, 96, 65472, 65472, 1, 96, 65472, 65472, 0,
  /* 430 */ 65348, 96, 65472, 65472, 33, 96, 65472, 65472, 0,
  /* 439 */ 65472, 96, 65472, 65472, 0,
  /* 444 */ 65284, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 249, 32, 32, 32, 64, 65441, 64, 65473, 65439, 64, 65473, 0,
  /* 476 */ 65284, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 217, 32, 32, 32, 64, 65473, 64, 65473, 65439, 64, 65473, 0,
  /* 508 */ 65284, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 97, 65472, 96, 65472, 65472, 65, 65472, 96, 65472, 65472, 249, 32, 32, 32, 64, 65473, 64, 65473, 65439, 64, 65473, 0,
  /* 540 */ 65316, 96, 65472, 65472, 1, 96, 65472, 65472, 33, 96, 65472, 65472, 33, 96, 65472, 65472, 249, 64, 65441, 64, 65473, 0,
  /* 562 */ 65316, 96, 65472, 65472, 33, 96, 65472, 65472, 33, 96, 65472, 65472, 33, 96, 65472, 65472, 217, 64, 65473, 64, 65473, 0,
  /* 584 */ 65316, 96, 65472, 65472, 33, 96, 65472, 65472, 33, 96, 65472, 65472, 1, 96, 65472, 65472, 249, 64, 65473, 64, 65473, 0,
  /* 606 */ 65501, 0,
  /* 608 */ 65284, 96, 65472, 65472, 1, 96, 65472, 65472, 33, 96, 65472, 65472, 250, 65505, 0,
  /* 623 */ 65533, 0,
  /* 625 */ 65535, 0,
};

extern const uint16_t ARM64SubRegIdxLists[] = {
  /* 0 */ 2, 14, 7, 1, 0,
  /* 5 */ 15, 0,
  /* 7 */ 3, 14, 7, 1, 4, 18, 17, 16, 0,
  /* 16 */ 3, 14, 7, 1, 4, 18, 17, 16, 5, 24, 23, 22, 37, 39, 0,
  /* 31 */ 3, 14, 7, 1, 4, 18, 17, 16, 5, 24, 23, 22, 6, 21, 20, 19, 37, 38, 39, 40, 41, 0,
  /* 53 */ 10, 2, 14, 7, 1, 11, 26, 28, 27, 25, 42, 0,
  /* 65 */ 10, 2, 14, 7, 1, 11, 26, 28, 27, 25, 12, 34, 36, 35, 33, 42, 44, 45, 47, 50, 0,
  /* 86 */ 10, 2, 14, 7, 1, 11, 26, 28, 27, 25, 12, 34, 36, 35, 33, 13, 30, 32, 31, 29, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits ARM64SubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 8 },	// bsub
  { 0, 32 },	// dsub
  { 0, 64 },	// dsub0
  { 0, 64 },	// dsub1
  { 0, 64 },	// dsub2
  { 0, 64 },	// dsub3
  { 0, 16 },	// hsub
  { 0, 64 },	// qhisub
  { 0, 64 },	// qsub
  { 0, 128 },	// qsub0
  { 0, 128 },	// qsub1
  { 0, 128 },	// qsub2
  { 0, 128 },	// qsub3
  { 0, 32 },	// ssub
  { 0, 32 },	// sub_32
  { 0, 8 },	// dsub1_then_bsub
  { 0, 16 },	// dsub1_then_hsub
  { 0, 32 },	// dsub1_then_ssub
  { 0, 8 },	// dsub3_then_bsub
  { 0, 16 },	// dsub3_then_hsub
  { 0, 32 },	// dsub3_then_ssub
  { 0, 8 },	// dsub2_then_bsub
  { 0, 16 },	// dsub2_then_hsub
  { 0, 32 },	// dsub2_then_ssub
  { 0, 8 },	// qsub1_then_bsub
  { 0, 32 },	// qsub1_then_dsub
  { 0, 16 },	// qsub1_then_hsub
  { 0, 32 },	// qsub1_then_ssub
  { 0, 8 },	// qsub3_then_bsub
  { 0, 32 },	// qsub3_then_dsub
  { 0, 16 },	// qsub3_then_hsub
  { 0, 32 },	// qsub3_then_ssub
  { 0, 8 },	// qsub2_then_bsub
  { 0, 32 },	// qsub2_then_dsub
  { 0, 16 },	// qsub2_then_hsub
  { 0, 32 },	// qsub2_then_ssub
  { 65535, 128 },	// dsub0_dsub1
  { 65535, 192 },	// dsub0_dsub1_dsub2
  { 65535, 128 },	// dsub1_dsub2
  { 65535, 192 },	// dsub1_dsub2_dsub3
  { 65535, 128 },	// dsub2_dsub3
  { 65535, 64 },	// dsub_qsub1_then_dsub
  { 65535, 128 },	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
  { 65535, 96 },	// dsub_qsub1_then_dsub_qsub2_then_dsub
  { 65535, 256 },	// qsub0_qsub1
  { 65535, 384 },	// qsub0_qsub1_qsub2
  { 65535, 256 },	// qsub1_qsub2
  { 65535, 384 },	// qsub1_qsub2_qsub3
  { 65535, 256 },	// qsub2_qsub3
  { 65535, 64 },	// qsub1_then_dsub_qsub2_then_dsub
  { 65535, 96 },	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
  { 65535, 64 },	// qsub2_then_dsub_qsub3_then_dsub
};

extern const char ARM64RegStrings[] = {
  /* 0 */ 'B', '1', '0', 0,
  /* 4 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 17 */ 'H', '1', '0', 0,
  /* 21 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 34 */ 'S', '1', '0', 0,
  /* 38 */ 'W', '1', '0', 0,
  /* 42 */ 'X', '1', '0', 0,
  /* 46 */ 'B', '2', '0', 0,
  /* 50 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 66 */ 'H', '2', '0', 0,
  /* 70 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 86 */ 'S', '2', '0', 0,
  /* 90 */ 'W', '2', '0', 0,
  /* 94 */ 'X', '2', '0', 0,
  /* 98 */ 'B', '3', '0', 0,
  /* 102 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 118 */ 'H', '3', '0', 0,
  /* 122 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 138 */ 'S', '3', '0', 0,
  /* 142 */ 'W', '3', '0', 0,
  /* 146 */ 'B', '0', 0,
  /* 149 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 164 */ 'H', '0', 0,
  /* 167 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 182 */ 'S', '0', 0,
  /* 185 */ 'W', '0', 0,
  /* 188 */ 'X', '0', 0,
  /* 191 */ 'B', '1', '1', 0,
  /* 195 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 209 */ 'H', '1', '1', 0,
  /* 213 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 227 */ 'S', '1', '1', 0,
  /* 231 */ 'W', '1', '1', 0,
  /* 235 */ 'X', '1', '1', 0,
  /* 239 */ 'B', '2', '1', 0,
  /* 243 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 259 */ 'H', '2', '1', 0,
  /* 263 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 279 */ 'S', '2', '1', 0,
  /* 283 */ 'W', '2', '1', 0,
  /* 287 */ 'X', '2', '1', 0,
  /* 291 */ 'B', '3', '1', 0,
  /* 295 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 311 */ 'H', '3', '1', 0,
  /* 315 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 331 */ 'S', '3', '1', 0,
  /* 335 */ 'B', '1', 0,
  /* 338 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 352 */ 'H', '1', 0,
  /* 355 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 369 */ 'S', '1', 0,
  /* 372 */ 'W', '1', 0,
  /* 375 */ 'X', '1', 0,
  /* 378 */ 'B', '1', '2', 0,
  /* 382 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 397 */ 'H', '1', '2', 0,
  /* 401 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 416 */ 'S', '1', '2', 0,
  /* 420 */ 'W', '1', '2', 0,
  /* 424 */ 'X', '1', '2', 0,
  /* 428 */ 'B', '2', '2', 0,
  /* 432 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 448 */ 'H', '2', '2', 0,
  /* 452 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 468 */ 'S', '2', '2', 0,
  /* 472 */ 'W', '2', '2', 0,
  /* 476 */ 'X', '2', '2', 0,
  /* 480 */ 'B', '2', 0,
  /* 483 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 496 */ 'H', '2', 0,
  /* 499 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 512 */ 'S', '2', 0,
  /* 515 */ 'W', '2', 0,
  /* 518 */ 'X', '2', 0,
  /* 521 */ 'B', '1', '3', 0,
  /* 525 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 541 */ 'H', '1', '3', 0,
  /* 545 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 561 */ 'S', '1', '3', 0,
  /* 565 */ 'W', '1', '3', 0,
  /* 569 */ 'X', '1', '3', 0,
  /* 573 */ 'B', '2', '3', 0,
  /* 577 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 593 */ 'H', '2', '3', 0,
  /* 597 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 613 */ 'S', '2', '3', 0,
  /* 617 */ 'W', '2', '3', 0,
  /* 621 */ 'X', '2', '3', 0,
  /* 625 */ 'B', '3', 0,
  /* 628 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 640 */ 'H', '3', 0,
  /* 643 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 655 */ 'S', '3', 0,
  /* 658 */ 'W', '3', 0,
  /* 661 */ 'X', '3', 0,
  /* 664 */ 'B', '1', '4', 0,
  /* 668 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 684 */ 'H', '1', '4', 0,
  /* 688 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 704 */ 'S', '1', '4', 0,
  /* 708 */ 'W', '1', '4', 0,
  /* 712 */ 'X', '1', '4', 0,
  /* 716 */ 'B', '2', '4', 0,
  /* 720 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 736 */ 'H', '2', '4', 0,
  /* 740 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 756 */ 'S', '2', '4', 0,
  /* 760 */ 'W', '2', '4', 0,
  /* 764 */ 'X', '2', '4', 0,
  /* 768 */ 'B', '4', 0,
  /* 771 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 783 */ 'H', '4', 0,
  /* 786 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 798 */ 'S', '4', 0,
  /* 801 */ 'W', '4', 0,
  /* 804 */ 'X', '4', 0,
  /* 807 */ 'B', '1', '5', 0,
  /* 811 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 827 */ 'H', '1', '5', 0,
  /* 831 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 847 */ 'S', '1', '5', 0,
  /* 851 */ 'W', '1', '5', 0,
  /* 855 */ 'X', '1', '5', 0,
  /* 859 */ 'B', '2', '5', 0,
  /* 863 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 879 */ 'H', '2', '5', 0,
  /* 883 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 899 */ 'S', '2', '5', 0,
  /* 903 */ 'W', '2', '5', 0,
  /* 907 */ 'X', '2', '5', 0,
  /* 911 */ 'B', '5', 0,
  /* 914 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 926 */ 'H', '5', 0,
  /* 929 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 941 */ 'S', '5', 0,
  /* 944 */ 'W', '5', 0,
  /* 947 */ 'X', '5', 0,
  /* 950 */ 'B', '1', '6', 0,
  /* 954 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 970 */ 'H', '1', '6', 0,
  /* 974 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 990 */ 'S', '1', '6', 0,
  /* 994 */ 'W', '1', '6', 0,
  /* 998 */ 'X', '1', '6', 0,
  /* 1002 */ 'B', '2', '6', 0,
  /* 1006 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1022 */ 'H', '2', '6', 0,
  /* 1026 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1042 */ 'S', '2', '6', 0,
  /* 1046 */ 'W', '2', '6', 0,
  /* 1050 */ 'X', '2', '6', 0,
  /* 1054 */ 'B', '6', 0,
  /* 1057 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1069 */ 'H', '6', 0,
  /* 1072 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1084 */ 'S', '6', 0,
  /* 1087 */ 'W', '6', 0,
  /* 1090 */ 'X', '6', 0,
  /* 1093 */ 'B', '1', '7', 0,
  /* 1097 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1113 */ 'H', '1', '7', 0,
  /* 1117 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1133 */ 'S', '1', '7', 0,
  /* 1137 */ 'W', '1', '7', 0,
  /* 1141 */ 'X', '1', '7', 0,
  /* 1145 */ 'B', '2', '7', 0,
  /* 1149 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1165 */ 'H', '2', '7', 0,
  /* 1169 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1185 */ 'S', '2', '7', 0,
  /* 1189 */ 'W', '2', '7', 0,
  /* 1193 */ 'X', '2', '7', 0,
  /* 1197 */ 'B', '7', 0,
  /* 1200 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1212 */ 'H', '7', 0,
  /* 1215 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1227 */ 'S', '7', 0,
  /* 1230 */ 'W', '7', 0,
  /* 1233 */ 'X', '7', 0,
  /* 1236 */ 'B', '1', '8', 0,
  /* 1240 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1256 */ 'H', '1', '8', 0,
  /* 1260 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1276 */ 'S', '1', '8', 0,
  /* 1280 */ 'W', '1', '8', 0,
  /* 1284 */ 'X', '1', '8', 0,
  /* 1288 */ 'B', '2', '8', 0,
  /* 1292 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1308 */ 'H', '2', '8', 0,
  /* 1312 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1328 */ 'S', '2', '8', 0,
  /* 1332 */ 'W', '2', '8', 0,
  /* 1336 */ 'X', '2', '8', 0,
  /* 1340 */ 'B', '8', 0,
  /* 1343 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1355 */ 'H', '8', 0,
  /* 1358 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1370 */ 'S', '8', 0,
  /* 1373 */ 'W', '8', 0,
  /* 1376 */ 'X', '8', 0,
  /* 1379 */ 'B', '1', '9', 0,
  /* 1383 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1399 */ 'H', '1', '9', 0,
  /* 1403 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 1419 */ 'S', '1', '9', 0,
  /* 1423 */ 'W', '1', '9', 0,
  /* 1427 */ 'X', '1', '9', 0,
  /* 1431 */ 'B', '2', '9', 0,
  /* 1435 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1451 */ 'H', '2', '9', 0,
  /* 1455 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 1471 */ 'S', '2', '9', 0,
  /* 1475 */ 'W', '2', '9', 0,
  /* 1479 */ 'B', '9', 0,
  /* 1482 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1494 */ 'H', '9', 0,
  /* 1497 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1509 */ 'S', '9', 0,
  /* 1512 */ 'W', '9', 0,
  /* 1515 */ 'X', '9', 0,
  /* 1518 */ 'F', 'P', 0,
  /* 1521 */ 'W', 'S', 'P', 0,
  /* 1525 */ 'L', 'R', 0,
  /* 1528 */ 'C', 'P', 'S', 'R', 0,
  /* 1533 */ 'W', 'Z', 'R', 0,
  /* 1537 */ 'X', 'Z', 'R', 0,
};

extern const MCRegisterDesc ARM64RegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0 },
  { 1528, 4, 4, 4, 10001 },
  { 1518, 266, 4, 5, 10001 },
  { 1525, 266, 4, 5, 10001 },
  { 1522, 3, 4, 5, 3152 },
  { 1521, 4, 625, 4, 3152 },
  { 1533, 4, 3, 4, 3184 },
  { 1537, 625, 4, 5, 3184 },
  { 146, 4, 101, 4, 9969 },
  { 335, 4, 146, 4, 9969 },
  { 480, 4, 206, 4, 9969 },
  { 625, 4, 68, 4, 9969 },
  { 768, 4, 68, 4, 9969 },
  { 911, 4, 68, 4, 9969 },
  { 1054, 4, 68, 4, 9969 },
  { 1197, 4, 68, 4, 9969 },
  { 1340, 4, 68, 4, 9969 },
  { 1479, 4, 68, 4, 9969 },
  { 0, 4, 68, 4, 9969 },
  { 191, 4, 68, 4, 9969 },
  { 378, 4, 68, 4, 9969 },
  { 521, 4, 68, 4, 9969 },
  { 664, 4, 68, 4, 9969 },
  { 807, 4, 68, 4, 9969 },
  { 950, 4, 68, 4, 9969 },
  { 1093, 4, 68, 4, 9969 },
  { 1236, 4, 68, 4, 9969 },
  { 1379, 4, 68, 4, 9969 },
  { 46, 4, 68, 4, 9969 },
  { 239, 4, 68, 4, 9969 },
  { 428, 4, 68, 4, 9969 },
  { 573, 4, 68, 4, 9969 },
  { 716, 4, 68, 4, 9969 },
  { 859, 4, 68, 4, 9969 },
  { 1002, 4, 68, 4, 9969 },
  { 1145, 4, 68, 4, 9969 },
  { 1288, 4, 68, 4, 9969 },
  { 1431, 4, 68, 4, 9969 },
  { 98, 4, 68, 4, 9969 },
  { 291, 4, 68, 4, 9969 },
  { 161, 426, 104, 1, 9697 },
  { 349, 426, 149, 1, 9697 },
  { 493, 426, 209, 1, 9697 },
  { 637, 426, 71, 1, 9697 },
  { 780, 426, 71, 1, 9697 },
  { 923, 426, 71, 1, 9697 },
  { 1066, 426, 71, 1, 9697 },
  { 1209, 426, 71, 1, 9697 },
  { 1352, 426, 71, 1, 9697 },
  { 1491, 426, 71, 1, 9697 },
  { 13, 426, 71, 1, 9697 },
  { 205, 426, 71, 1, 9697 },
  { 393, 426, 71, 1, 9697 },
  { 537, 426, 71, 1, 9697 },
  { 680, 426, 71, 1, 9697 },
  { 823, 426, 71, 1, 9697 },
  { 966, 426, 71, 1, 9697 },
  { 1109, 426, 71, 1, 9697 },
  { 1252, 426, 71, 1, 9697 },
  { 1395, 426, 71, 1, 9697 },
  { 62, 426, 71, 1, 9697 },
  { 255, 426, 71, 1, 9697 },
  { 444, 426, 71, 1, 9697 },
  { 589, 426, 71, 1, 9697 },
  { 732, 426, 71, 1, 9697 },
  { 875, 426, 71, 1, 9697 },
  { 1018, 426, 71, 1, 9697 },
  { 1161, 426, 71, 1, 9697 },
  { 1304, 426, 71, 1, 9697 },
  { 1447, 426, 71, 1, 9697 },
  { 114, 426, 71, 1, 9697 },
  { 307, 426, 71, 1, 9697 },
  { 164, 428, 102, 3, 6705 },
  { 352, 428, 147, 3, 6705 },
  { 496, 428, 207, 3, 6705 },
  { 640, 428, 69, 3, 6705 },
  { 783, 428, 69, 3, 6705 },
  { 926, 428, 69, 3, 6705 },
  { 1069, 428, 69, 3, 6705 },
  { 1212, 428, 69, 3, 6705 },
  { 1355, 428, 69, 3, 6705 },
  { 1494, 428, 69, 3, 6705 },
  { 17, 428, 69, 3, 6705 },
  { 209, 428, 69, 3, 6705 },
  { 397, 428, 69, 3, 6705 },
  { 541, 428, 69, 3, 6705 },
  { 684, 428, 69, 3, 6705 },
  { 827, 428, 69, 3, 6705 },
  { 970, 428, 69, 3, 6705 },
  { 1113, 428, 69, 3, 6705 },
  { 1256, 428, 69, 3, 6705 },
  { 1399, 428, 69, 3, 6705 },
  { 66, 428, 69, 3, 6705 },
  { 259, 428, 69, 3, 6705 },
  { 448, 428, 69, 3, 6705 },
  { 593, 428, 69, 3, 6705 },
  { 736, 428, 69, 3, 6705 },
  { 879, 428, 69, 3, 6705 },
  { 1022, 428, 69, 3, 6705 },
  { 1165, 428, 69, 3, 6705 },
  { 1308, 428, 69, 3, 6705 },
  { 1451, 428, 69, 3, 6705 },
  { 118, 428, 69, 3, 6705 },
  { 311, 428, 69, 3, 6705 },
  { 179, 439, 124, 0, 4801 },
  { 366, 439, 169, 0, 4801 },
  { 509, 439, 229, 0, 4801 },
  { 652, 439, 91, 0, 4801 },
  { 795, 439, 91, 0, 4801 },
  { 938, 439, 91, 0, 4801 },
  { 1081, 439, 91, 0, 4801 },
  { 1224, 439, 91, 0, 4801 },
  { 1367, 439, 91, 0, 4801 },
  { 1506, 439, 91, 0, 4801 },
  { 30, 439, 91, 0, 4801 },
  { 223, 439, 91, 0, 4801 },
  { 412, 439, 91, 0, 4801 },
  { 557, 439, 91, 0, 4801 },
  { 700, 439, 91, 0, 4801 },
  { 843, 439, 91, 0, 4801 },
  { 986, 439, 91, 0, 4801 },
  { 1129, 439, 91, 0, 4801 },
  { 1272, 439, 91, 0, 4801 },
  { 1415, 439, 91, 0, 4801 },
  { 82, 439, 91, 0, 4801 },
  { 275, 439, 91, 0, 4801 },
  { 464, 439, 91, 0, 4801 },
  { 609, 439, 91, 0, 4801 },
  { 752, 439, 91, 0, 4801 },
  { 895, 439, 91, 0, 4801 },
  { 1038, 439, 91, 0, 4801 },
  { 1181, 439, 91, 0, 4801 },
  { 1324, 439, 91, 0, 4801 },
  { 1467, 439, 91, 0, 4801 },
  { 134, 439, 91, 0, 4801 },
  { 327, 439, 91, 0, 4801 },
  { 182, 427, 103, 2, 4769 },
  { 369, 427, 148, 2, 4769 },
  { 512, 427, 208, 2, 4769 },
  { 655, 427, 70, 2, 4769 },
  { 798, 427, 70, 2, 4769 },
  { 941, 427, 70, 2, 4769 },
  { 1084, 427, 70, 2, 4769 },
  { 1227, 427, 70, 2, 4769 },
  { 1370, 427, 70, 2, 4769 },
  { 1509, 427, 70, 2, 4769 },
  { 34, 427, 70, 2, 4769 },
  { 227, 427, 70, 2, 4769 },
  { 416, 427, 70, 2, 4769 },
  { 561, 427, 70, 2, 4769 },
  { 704, 427, 70, 2, 4769 },
  { 847, 427, 70, 2, 4769 },
  { 990, 427, 70, 2, 4769 },
  { 1133, 427, 70, 2, 4769 },
  { 1276, 427, 70, 2, 4769 },
  { 1419, 427, 70, 2, 4769 },
  { 86, 427, 70, 2, 4769 },
  { 279, 427, 70, 2, 4769 },
  { 468, 427, 70, 2, 4769 },
  { 613, 427, 70, 2, 4769 },
  { 756, 427, 70, 2, 4769 },
  { 899, 427, 70, 2, 4769 },
  { 1042, 427, 70, 2, 4769 },
  { 1185, 427, 70, 2, 4769 },
  { 1328, 427, 70, 2, 4769 },
  { 1471, 427, 70, 2, 4769 },
  { 138, 427, 70, 2, 4769 },
  { 331, 427, 70, 2, 4769 },
  { 185, 4, 256, 4, 4769 },
  { 372, 4, 256, 4, 4769 },
  { 515, 4, 256, 4, 4769 },
  { 658, 4, 256, 4, 4769 },
  { 801, 4, 256, 4, 4769 },
  { 944, 4, 256, 4, 4769 },
  { 1087, 4, 256, 4, 4769 },
  { 1230, 4, 256, 4, 4769 },
  { 1373, 4, 256, 4, 4769 },
  { 1512, 4, 256, 4, 4769 },
  { 38, 4, 256, 4, 4769 },
  { 231, 4, 256, 4, 4769 },
  { 420, 4, 256, 4, 4769 },
  { 565, 4, 256, 4, 4769 },
  { 708, 4, 256, 4, 4769 },
  { 851, 4, 256, 4, 4769 },
  { 994, 4, 256, 4, 4769 },
  { 1137, 4, 256, 4, 4769 },
  { 1280, 4, 256, 4, 4769 },
  { 1423, 4, 256, 4, 4769 },
  { 90, 4, 256, 4, 4769 },
  { 283, 4, 256, 4, 4769 },
  { 472, 4, 256, 4, 4769 },
  { 617, 4, 256, 4, 4769 },
  { 760, 4, 256, 4, 4769 },
  { 903, 4, 256, 4, 4769 },
  { 1046, 4, 256, 4, 4769 },
  { 1189, 4, 256, 4, 4769 },
  { 1332, 4, 256, 4, 4769 },
  { 1475, 4, 294, 4, 4673 },
  { 142, 4, 294, 4, 4673 },
  { 188, 621, 4, 5, 4737 },
  { 375, 621, 4, 5, 4737 },
  { 518, 621, 4, 5, 4737 },
  { 661, 621, 4, 5, 4737 },
  { 804, 621, 4, 5, 4737 },
  { 947, 621, 4, 5, 4737 },
  { 1090, 621, 4, 5, 4737 },
  { 1233, 621, 4, 5, 4737 },
  { 1376, 621, 4, 5, 4737 },
  { 1515, 621, 4, 5, 4737 },
  { 42, 621, 4, 5, 4737 },
  { 235, 621, 4, 5, 4737 },
  { 424, 621, 4, 5, 4737 },
  { 569, 621, 4, 5, 4737 },
  { 712, 621, 4, 5, 4737 },
  { 855, 621, 4, 5, 4737 },
  { 998, 621, 4, 5, 4737 },
  { 1141, 621, 4, 5, 4737 },
  { 1284, 621, 4, 5, 4737 },
  { 1427, 621, 4, 5, 4737 },
  { 94, 621, 4, 5, 4737 },
  { 287, 621, 4, 5, 4737 },
  { 476, 621, 4, 5, 4737 },
  { 621, 621, 4, 5, 4737 },
  { 764, 621, 4, 5, 4737 },
  { 907, 621, 4, 5, 4737 },
  { 1050, 621, 4, 5, 4737 },
  { 1193, 621, 4, 5, 4737 },
  { 1336, 621, 4, 5, 4737 },
  { 346, 430, 179, 7, 1041 },
  { 490, 430, 243, 7, 1041 },
  { 634, 430, 134, 7, 1041 },
  { 777, 430, 134, 7, 1041 },
  { 920, 430, 134, 7, 1041 },
  { 1063, 430, 134, 7, 1041 },
  { 1206, 430, 134, 7, 1041 },
  { 1349, 430, 134, 7, 1041 },
  { 1488, 430, 134, 7, 1041 },
  { 10, 430, 134, 7, 1041 },
  { 201, 430, 134, 7, 1041 },
  { 389, 430, 134, 7, 1041 },
  { 533, 430, 134, 7, 1041 },
  { 676, 430, 134, 7, 1041 },
  { 819, 430, 134, 7, 1041 },
  { 962, 430, 134, 7, 1041 },
  { 1105, 430, 134, 7, 1041 },
  { 1248, 430, 134, 7, 1041 },
  { 1391, 430, 134, 7, 1041 },
  { 58, 430, 134, 7, 1041 },
  { 251, 430, 134, 7, 1041 },
  { 440, 430, 134, 7, 1041 },
  { 585, 430, 134, 7, 1041 },
  { 728, 430, 134, 7, 1041 },
  { 871, 430, 134, 7, 1041 },
  { 1014, 430, 134, 7, 1041 },
  { 1157, 430, 134, 7, 1041 },
  { 1300, 430, 134, 7, 1041 },
  { 1443, 430, 134, 7, 1041 },
  { 110, 430, 134, 7, 1041 },
  { 303, 430, 134, 7, 1041 },
  { 157, 421, 134, 7, 4080 },
  { 628, 562, 264, 31, 81 },
  { 771, 562, 264, 31, 81 },
  { 914, 562, 264, 31, 81 },
  { 1057, 562, 264, 31, 81 },
  { 1200, 562, 264, 31, 81 },
  { 1343, 562, 264, 31, 81 },
  { 1482, 562, 264, 31, 81 },
  { 4, 562, 264, 31, 81 },
  { 195, 562, 264, 31, 81 },
  { 382, 562, 264, 31, 81 },
  { 525, 562, 264, 31, 81 },
  { 668, 562, 264, 31, 81 },
  { 811, 562, 264, 31, 81 },
  { 954, 562, 264, 31, 81 },
  { 1097, 562, 264, 31, 81 },
  { 1240, 562, 264, 31, 81 },
  { 1383, 562, 264, 31, 81 },
  { 50, 562, 264, 31, 81 },
  { 243, 562, 264, 31, 81 },
  { 432, 562, 264, 31, 81 },
  { 577, 562, 264, 31, 81 },
  { 720, 562, 264, 31, 81 },
  { 863, 562, 264, 31, 81 },
  { 1006, 562, 264, 31, 81 },
  { 1149, 562, 264, 31, 81 },
  { 1292, 562, 264, 31, 81 },
  { 1435, 562, 264, 31, 81 },
  { 102, 562, 264, 31, 81 },
  { 295, 562, 264, 31, 81 },
  { 149, 584, 264, 31, 160 },
  { 338, 397, 264, 31, 368 },
  { 483, 540, 264, 31, 3216 },
  { 487, 32, 258, 16, 305 },
  { 631, 32, 191, 16, 305 },
  { 774, 32, 191, 16, 305 },
  { 917, 32, 191, 16, 305 },
  { 1060, 32, 191, 16, 305 },
  { 1203, 32, 191, 16, 305 },
  { 1346, 32, 191, 16, 305 },
  { 1485, 32, 191, 16, 305 },
  { 7, 32, 191, 16, 305 },
  { 198, 32, 191, 16, 305 },
  { 385, 32, 191, 16, 305 },
  { 529, 32, 191, 16, 305 },
  { 672, 32, 191, 16, 305 },
  { 815, 32, 191, 16, 305 },
  { 958, 32, 191, 16, 305 },
  { 1101, 32, 191, 16, 305 },
  { 1244, 32, 191, 16, 305 },
  { 1387, 32, 191, 16, 305 },
  { 54, 32, 191, 16, 305 },
  { 247, 32, 191, 16, 305 },
  { 436, 32, 191, 16, 305 },
  { 581, 32, 191, 16, 305 },
  { 724, 32, 191, 16, 305 },
  { 867, 32, 191, 16, 305 },
  { 1010, 32, 191, 16, 305 },
  { 1153, 32, 191, 16, 305 },
  { 1296, 32, 191, 16, 305 },
  { 1439, 32, 191, 16, 305 },
  { 106, 32, 191, 16, 305 },
  { 299, 32, 191, 16, 305 },
  { 153, 47, 191, 16, 448 },
  { 342, 608, 191, 16, 3824 },
  { 363, 268, 185, 53, 993 },
  { 506, 268, 249, 53, 993 },
  { 649, 268, 140, 53, 993 },
  { 792, 268, 140, 53, 993 },
  { 935, 268, 140, 53, 993 },
  { 1078, 268, 140, 53, 993 },
  { 1221, 268, 140, 53, 993 },
  { 1364, 268, 140, 53, 993 },
  { 1503, 268, 140, 53, 993 },
  { 27, 268, 140, 53, 993 },
  { 219, 268, 140, 53, 993 },
  { 408, 268, 140, 53, 993 },
  { 553, 268, 140, 53, 993 },
  { 696, 268, 140, 53, 993 },
  { 839, 268, 140, 53, 993 },
  { 982, 268, 140, 53, 993 },
  { 1125, 268, 140, 53, 993 },
  { 1268, 268, 140, 53, 993 },
  { 1411, 268, 140, 53, 993 },
  { 78, 268, 140, 53, 993 },
  { 271, 268, 140, 53, 993 },
  { 460, 268, 140, 53, 993 },
  { 605, 268, 140, 53, 993 },
  { 748, 268, 140, 53, 993 },
  { 891, 268, 140, 53, 993 },
  { 1034, 268, 140, 53, 993 },
  { 1177, 268, 140, 53, 993 },
  { 1320, 268, 140, 53, 993 },
  { 1463, 268, 140, 53, 993 },
  { 130, 268, 140, 53, 993 },
  { 323, 268, 140, 53, 993 },
  { 175, 280, 140, 53, 4080 },
  { 643, 476, 4, 86, 1 },
  { 786, 476, 4, 86, 1 },
  { 929, 476, 4, 86, 1 },
  { 1072, 476, 4, 86, 1 },
  { 1215, 476, 4, 86, 1 },
  { 1358, 476, 4, 86, 1 },
  { 1497, 476, 4, 86, 1 },
  { 21, 476, 4, 86, 1 },
  { 213, 476, 4, 86, 1 },
  { 401, 476, 4, 86, 1 },
  { 545, 476, 4, 86, 1 },
  { 688, 476, 4, 86, 1 },
  { 831, 476, 4, 86, 1 },
  { 974, 476, 4, 86, 1 },
  { 1117, 476, 4, 86, 1 },
  { 1260, 476, 4, 86, 1 },
  { 1403, 476, 4, 86, 1 },
  { 70, 476, 4, 86, 1 },
  { 263, 476, 4, 86, 1 },
  { 452, 476, 4, 86, 1 },
  { 597, 476, 4, 86, 1 },
  { 740, 476, 4, 86, 1 },
  { 883, 476, 4, 86, 1 },
  { 1026, 476, 4, 86, 1 },
  { 1169, 476, 4, 86, 1 },
  { 1312, 476, 4, 86, 1 },
  { 1455, 476, 4, 86, 1 },
  { 122, 476, 4, 86, 1 },
  { 315, 476, 4, 86, 1 },
  { 167, 508, 4, 86, 160 },
  { 355, 365, 4, 86, 368 },
  { 499, 444, 4, 86, 3216 },
  { 503, 302, 261, 65, 241 },
  { 646, 302, 88, 65, 241 },
  { 789, 302, 88, 65, 241 },
  { 932, 302, 88, 65, 241 },
  { 1075, 302, 88, 65, 241 },
  { 1218, 302, 88, 65, 241 },
  { 1361, 302, 88, 65, 241 },
  { 1500, 302, 88, 65, 241 },
  { 24, 302, 88, 65, 241 },
  { 216, 302, 88, 65, 241 },
  { 404, 302, 88, 65, 241 },
  { 549, 302, 88, 65, 241 },
  { 692, 302, 88, 65, 241 },
  { 835, 302, 88, 65, 241 },
  { 978, 302, 88, 65, 241 },
  { 1121, 302, 88, 65, 241 },
  { 1264, 302, 88, 65, 241 },
  { 1407, 302, 88, 65, 241 },
  { 74, 302, 88, 65, 241 },
  { 267, 302, 88, 65, 241 },
  { 456, 302, 88, 65, 241 },
  { 601, 302, 88, 65, 241 },
  { 744, 302, 88, 65, 241 },
  { 887, 302, 88, 65, 241 },
  { 1030, 302, 88, 65, 241 },
  { 1173, 302, 88, 65, 241 },
  { 1316, 302, 88, 65, 241 },
  { 1459, 302, 88, 65, 241 },
  { 126, 302, 88, 65, 241 },
  { 319, 302, 88, 65, 241 },
  { 171, 323, 88, 65, 448 },
  { 359, 344, 88, 65, 3824 },
};

extern const uint16_t ARM64RegUnitRoots[][2] = {
  { ARM64::CPSR },
  { ARM64::W29 },
  { ARM64::W30 },
  { ARM64::WSP },
  { ARM64::WZR },
  { ARM64::B0 },
  { ARM64::B1 },
  { ARM64::B2 },
  { ARM64::B3 },
  { ARM64::B4 },
  { ARM64::B5 },
  { ARM64::B6 },
  { ARM64::B7 },
  { ARM64::B8 },
  { ARM64::B9 },
  { ARM64::B10 },
  { ARM64::B11 },
  { ARM64::B12 },
  { ARM64::B13 },
  { ARM64::B14 },
  { ARM64::B15 },
  { ARM64::B16 },
  { ARM64::B17 },
  { ARM64::B18 },
  { ARM64::B19 },
  { ARM64::B20 },
  { ARM64::B21 },
  { ARM64::B22 },
  { ARM64::B23 },
  { ARM64::B24 },
  { ARM64::B25 },
  { ARM64::B26 },
  { ARM64::B27 },
  { ARM64::B28 },
  { ARM64::B29 },
  { ARM64::B30 },
  { ARM64::B31 },
  { ARM64::W0 },
  { ARM64::W1 },
  { ARM64::W2 },
  { ARM64::W3 },
  { ARM64::W4 },
  { ARM64::W5 },
  { ARM64::W6 },
  { ARM64::W7 },
  { ARM64::W8 },
  { ARM64::W9 },
  { ARM64::W10 },
  { ARM64::W11 },
  { ARM64::W12 },
  { ARM64::W13 },
  { ARM64::W14 },
  { ARM64::W15 },
  { ARM64::W16 },
  { ARM64::W17 },
  { ARM64::W18 },
  { ARM64::W19 },
  { ARM64::W20 },
  { ARM64::W21 },
  { ARM64::W22 },
  { ARM64::W23 },
  { ARM64::W24 },
  { ARM64::W25 },
  { ARM64::W26 },
  { ARM64::W27 },
  { ARM64::W28 },
};

namespace {     // Register classes...
  // FPR8 Register Class...
  const uint16_t FPR8[] = {
    ARM64::B0, ARM64::B1, ARM64::B2, ARM64::B3, ARM64::B4, ARM64::B5, ARM64::B6, ARM64::B7, ARM64::B8, ARM64::B9, ARM64::B10, ARM64::B11, ARM64::B12, ARM64::B13, ARM64::B14, ARM64::B15, ARM64::B16, ARM64::B17, ARM64::B18, ARM64::B19, ARM64::B20, ARM64::B21, ARM64::B22, ARM64::B23, ARM64::B24, ARM64::B25, ARM64::B26, ARM64::B27, ARM64::B28, ARM64::B29, ARM64::B30, ARM64::B31, 
  };

  // FPR8 Bit set.
  const uint8_t FPR8Bits[] = {
    0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // FPR16 Register Class...
  const uint16_t FPR16[] = {
    ARM64::H0, ARM64::H1, ARM64::H2, ARM64::H3, ARM64::H4, ARM64::H5, ARM64::H6, ARM64::H7, ARM64::H8, ARM64::H9, ARM64::H10, ARM64::H11, ARM64::H12, ARM64::H13, ARM64::H14, ARM64::H15, ARM64::H16, ARM64::H17, ARM64::H18, ARM64::H19, ARM64::H20, ARM64::H21, ARM64::H22, ARM64::H23, ARM64::H24, ARM64::H25, ARM64::H26, ARM64::H27, ARM64::H28, ARM64::H29, ARM64::H30, ARM64::H31, 
  };

  // FPR16 Bit set.
  const uint8_t FPR16Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // GPR32all Register Class...
  const uint16_t GPR32all[] = {
    ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7, ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::WZR, ARM64::WSP, 
  };

  // GPR32all Bit set.
  const uint8_t GPR32allBits[] = {
    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // FPR32 Register Class...
  const uint16_t FPR32[] = {
    ARM64::S0, ARM64::S1, ARM64::S2, ARM64::S3, ARM64::S4, ARM64::S5, ARM64::S6, ARM64::S7, ARM64::S8, ARM64::S9, ARM64::S10, ARM64::S11, ARM64::S12, ARM64::S13, ARM64::S14, ARM64::S15, ARM64::S16, ARM64::S17, ARM64::S18, ARM64::S19, ARM64::S20, ARM64::S21, ARM64::S22, ARM64::S23, ARM64::S24, ARM64::S25, ARM64::S26, ARM64::S27, ARM64::S28, ARM64::S29, ARM64::S30, ARM64::S31, 
  };

  // FPR32 Bit set.
  const uint8_t FPR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // GPR32 Register Class...
  const uint16_t GPR32[] = {
    ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7, ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::WZR, 
  };

  // GPR32 Bit set.
  const uint8_t GPR32Bits[] = {
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPR32sp Register Class...
  const uint16_t GPR32sp[] = {
    ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7, ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::WSP, 
  };

  // GPR32sp Bit set.
  const uint8_t GPR32spBits[] = {
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPR32common Register Class...
  const uint16_t GPR32common[] = {
    ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7, ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, 
  };

  // GPR32common Bit set.
  const uint8_t GPR32commonBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // CCR Register Class...
  const uint16_t CCR[] = {
    ARM64::CPSR, 
  };

  // CCR Bit set.
  const uint8_t CCRBits[] = {
    0x02, 
  };

  // GPR64all Register Class...
  const uint16_t GPR64all[] = {
    ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::XZR, ARM64::SP, 
  };

  // GPR64all Bit set.
  const uint8_t GPR64allBits[] = {
    0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x0f, 
  };

  // FPR64 Register Class...
  const uint16_t FPR64[] = {
    ARM64::D0, ARM64::D1, ARM64::D2, ARM64::D3, ARM64::D4, ARM64::D5, ARM64::D6, ARM64::D7, ARM64::D8, ARM64::D9, ARM64::D10, ARM64::D11, ARM64::D12, ARM64::D13, ARM64::D14, ARM64::D15, ARM64::D16, ARM64::D17, ARM64::D18, ARM64::D19, ARM64::D20, ARM64::D21, ARM64::D22, ARM64::D23, ARM64::D24, ARM64::D25, ARM64::D26, ARM64::D27, ARM64::D28, ARM64::D29, ARM64::D30, ARM64::D31, 
  };

  // FPR64 Bit set.
  const uint8_t FPR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // GPR64 Register Class...
  const uint16_t GPR64[] = {
    ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::XZR, 
  };

  // GPR64 Bit set.
  const uint8_t GPR64Bits[] = {
    0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR64sp Register Class...
  const uint16_t GPR64sp[] = {
    ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::SP, 
  };

  // GPR64sp Bit set.
  const uint8_t GPR64spBits[] = {
    0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR64common Register Class...
  const uint16_t GPR64common[] = {
    ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, 
  };

  // GPR64common Bit set.
  const uint8_t GPR64commonBits[] = {
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x0f, 
  };

  // tcGPR64 Register Class...
  const uint16_t tcGPR64[] = {
    ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::FP, ARM64::LR, 
  };

  // tcGPR64 Bit set.
  const uint8_t tcGPR64Bits[] = {
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x03, 
  };

  // DD Register Class...
  const uint16_t DD[] = {
    ARM64::D0_D1, ARM64::D1_D2, ARM64::D2_D3, ARM64::D3_D4, ARM64::D4_D5, ARM64::D5_D6, ARM64::D6_D7, ARM64::D7_D8, ARM64::D8_D9, ARM64::D9_D10, ARM64::D10_D11, ARM64::D11_D12, ARM64::D12_D13, ARM64::D13_D14, ARM64::D14_D15, ARM64::D15_D16, ARM64::D16_D17, ARM64::D17_D18, ARM64::D18_D19, ARM64::D19_D20, ARM64::D20_D21, ARM64::D21_D22, ARM64::D22_D23, ARM64::D23_D24, ARM64::D24_D25, ARM64::D25_D26, ARM64::D26_D27, ARM64::D27_D28, ARM64::D28_D29, ARM64::D29_D30, ARM64::D30_D31, ARM64::D31_D0, 
  };

  // DD Bit set.
  const uint8_t DDBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // FPR128 Register Class...
  const uint16_t FPR128[] = {
    ARM64::Q0, ARM64::Q1, ARM64::Q2, ARM64::Q3, ARM64::Q4, ARM64::Q5, ARM64::Q6, ARM64::Q7, ARM64::Q8, ARM64::Q9, ARM64::Q10, ARM64::Q11, ARM64::Q12, ARM64::Q13, ARM64::Q14, ARM64::Q15, ARM64::Q16, ARM64::Q17, ARM64::Q18, ARM64::Q19, ARM64::Q20, ARM64::Q21, ARM64::Q22, ARM64::Q23, ARM64::Q24, ARM64::Q25, ARM64::Q26, ARM64::Q27, ARM64::Q28, ARM64::Q29, ARM64::Q30, ARM64::Q31, 
  };

  // FPR128 Bit set.
  const uint8_t FPR128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // FPR128_lo Register Class...
  const uint16_t FPR128_lo[] = {
    ARM64::Q0, ARM64::Q1, ARM64::Q2, ARM64::Q3, ARM64::Q4, ARM64::Q5, ARM64::Q6, ARM64::Q7, ARM64::Q8, ARM64::Q9, ARM64::Q10, ARM64::Q11, ARM64::Q12, ARM64::Q13, ARM64::Q14, ARM64::Q15, 
  };

  // FPR128_lo Bit set.
  const uint8_t FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
  };

  // DDD Register Class...
  const uint16_t DDD[] = {
    ARM64::D0_D1_D2, ARM64::D1_D2_D3, ARM64::D2_D3_D4, ARM64::D3_D4_D5, ARM64::D4_D5_D6, ARM64::D5_D6_D7, ARM64::D6_D7_D8, ARM64::D7_D8_D9, ARM64::D8_D9_D10, ARM64::D9_D10_D11, ARM64::D10_D11_D12, ARM64::D11_D12_D13, ARM64::D12_D13_D14, ARM64::D13_D14_D15, ARM64::D14_D15_D16, ARM64::D15_D16_D17, ARM64::D16_D17_D18, ARM64::D17_D18_D19, ARM64::D18_D19_D20, ARM64::D19_D20_D21, ARM64::D20_D21_D22, ARM64::D21_D22_D23, ARM64::D22_D23_D24, ARM64::D23_D24_D25, ARM64::D24_D25_D26, ARM64::D25_D26_D27, ARM64::D26_D27_D28, ARM64::D27_D28_D29, ARM64::D28_D29_D30, ARM64::D29_D30_D31, ARM64::D30_D31_D0, ARM64::D31_D0_D1, 
  };

  // DDD Bit set.
  const uint8_t DDDBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // DDDD Register Class...
  const uint16_t DDDD[] = {
    ARM64::D0_D1_D2_D3, ARM64::D1_D2_D3_D4, ARM64::D2_D3_D4_D5, ARM64::D3_D4_D5_D6, ARM64::D4_D5_D6_D7, ARM64::D5_D6_D7_D8, ARM64::D6_D7_D8_D9, ARM64::D7_D8_D9_D10, ARM64::D8_D9_D10_D11, ARM64::D9_D10_D11_D12, ARM64::D10_D11_D12_D13, ARM64::D11_D12_D13_D14, ARM64::D12_D13_D14_D15, ARM64::D13_D14_D15_D16, ARM64::D14_D15_D16_D17, ARM64::D15_D16_D17_D18, ARM64::D16_D17_D18_D19, ARM64::D17_D18_D19_D20, ARM64::D18_D19_D20_D21, ARM64::D19_D20_D21_D22, ARM64::D20_D21_D22_D23, ARM64::D21_D22_D23_D24, ARM64::D22_D23_D24_D25, ARM64::D23_D24_D25_D26, ARM64::D24_D25_D26_D27, ARM64::D25_D26_D27_D28, ARM64::D26_D27_D28_D29, ARM64::D27_D28_D29_D30, ARM64::D28_D29_D30_D31, ARM64::D29_D30_D31_D0, ARM64::D30_D31_D0_D1, ARM64::D31_D0_D1_D2, 
  };

  // DDDD Bit set.
  const uint8_t DDDDBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // QQ Register Class...
  const uint16_t QQ[] = {
    ARM64::Q0_Q1, ARM64::Q1_Q2, ARM64::Q2_Q3, ARM64::Q3_Q4, ARM64::Q4_Q5, ARM64::Q5_Q6, ARM64::Q6_Q7, ARM64::Q7_Q8, ARM64::Q8_Q9, ARM64::Q9_Q10, ARM64::Q10_Q11, ARM64::Q11_Q12, ARM64::Q12_Q13, ARM64::Q13_Q14, ARM64::Q14_Q15, ARM64::Q15_Q16, ARM64::Q16_Q17, ARM64::Q17_Q18, ARM64::Q18_Q19, ARM64::Q19_Q20, ARM64::Q20_Q21, ARM64::Q21_Q22, ARM64::Q22_Q23, ARM64::Q23_Q24, ARM64::Q24_Q25, ARM64::Q25_Q26, ARM64::Q26_Q27, ARM64::Q27_Q28, ARM64::Q28_Q29, ARM64::Q29_Q30, ARM64::Q30_Q31, ARM64::Q31_Q0, 
  };

  // QQ Bit set.
  const uint8_t QQBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // QQ_with_qsub0_in_FPR128_lo Register Class...
  const uint16_t QQ_with_qsub0_in_FPR128_lo[] = {
    ARM64::Q0_Q1, ARM64::Q1_Q2, ARM64::Q2_Q3, ARM64::Q3_Q4, ARM64::Q4_Q5, ARM64::Q5_Q6, ARM64::Q6_Q7, ARM64::Q7_Q8, ARM64::Q8_Q9, ARM64::Q9_Q10, ARM64::Q10_Q11, ARM64::Q11_Q12, ARM64::Q12_Q13, ARM64::Q13_Q14, ARM64::Q14_Q15, ARM64::Q15_Q16, 
  };

  // QQ_with_qsub0_in_FPR128_lo Bit set.
  const uint8_t QQ_with_qsub0_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // QQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1, ARM64::Q1_Q2, ARM64::Q2_Q3, ARM64::Q3_Q4, ARM64::Q4_Q5, ARM64::Q5_Q6, ARM64::Q6_Q7, ARM64::Q7_Q8, ARM64::Q8_Q9, ARM64::Q9_Q10, ARM64::Q10_Q11, ARM64::Q11_Q12, ARM64::Q12_Q13, ARM64::Q13_Q14, ARM64::Q14_Q15, ARM64::Q31_Q0, 
  };

  // QQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x08, 
  };

  // QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1, ARM64::Q1_Q2, ARM64::Q2_Q3, ARM64::Q3_Q4, ARM64::Q4_Q5, ARM64::Q5_Q6, ARM64::Q6_Q7, ARM64::Q7_Q8, ARM64::Q8_Q9, ARM64::Q9_Q10, ARM64::Q10_Q11, ARM64::Q11_Q12, ARM64::Q12_Q13, ARM64::Q13_Q14, ARM64::Q14_Q15, 
  };

  // QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 
  };

  // QQQ Register Class...
  const uint16_t QQQ[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q14_Q15_Q16, ARM64::Q15_Q16_Q17, ARM64::Q16_Q17_Q18, ARM64::Q17_Q18_Q19, ARM64::Q18_Q19_Q20, ARM64::Q19_Q20_Q21, ARM64::Q20_Q21_Q22, ARM64::Q21_Q22_Q23, ARM64::Q22_Q23_Q24, ARM64::Q23_Q24_Q25, ARM64::Q24_Q25_Q26, ARM64::Q25_Q26_Q27, ARM64::Q26_Q27_Q28, ARM64::Q27_Q28_Q29, ARM64::Q28_Q29_Q30, ARM64::Q29_Q30_Q31, ARM64::Q30_Q31_Q0, ARM64::Q31_Q0_Q1, 
  };

  // QQQ Bit set.
  const uint8_t QQQBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // QQQ_with_qsub0_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub0_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q14_Q15_Q16, ARM64::Q15_Q16_Q17, 
  };

  // QQQ_with_qsub0_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub0_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // QQQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q14_Q15_Q16, ARM64::Q31_Q0_Q1, 
  };

  // QQQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x08, 
  };

  // QQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q30_Q31_Q0, ARM64::Q31_Q0_Q1, 
  };

  // QQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x0c, 
  };

  // QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q14_Q15_Q16, 
  };

  // QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 
  };

  // QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, ARM64::Q31_Q0_Q1, 
  };

  // QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x08, 
  };

  // QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2, ARM64::Q1_Q2_Q3, ARM64::Q2_Q3_Q4, ARM64::Q3_Q4_Q5, ARM64::Q4_Q5_Q6, ARM64::Q5_Q6_Q7, ARM64::Q6_Q7_Q8, ARM64::Q7_Q8_Q9, ARM64::Q8_Q9_Q10, ARM64::Q9_Q10_Q11, ARM64::Q10_Q11_Q12, ARM64::Q11_Q12_Q13, ARM64::Q12_Q13_Q14, ARM64::Q13_Q14_Q15, 
  };

  // QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 
  };

  // QQQQ Register Class...
  const uint16_t QQQQ[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q14_Q15_Q16_Q17, ARM64::Q15_Q16_Q17_Q18, ARM64::Q16_Q17_Q18_Q19, ARM64::Q17_Q18_Q19_Q20, ARM64::Q18_Q19_Q20_Q21, ARM64::Q19_Q20_Q21_Q22, ARM64::Q20_Q21_Q22_Q23, ARM64::Q21_Q22_Q23_Q24, ARM64::Q22_Q23_Q24_Q25, ARM64::Q23_Q24_Q25_Q26, ARM64::Q24_Q25_Q26_Q27, ARM64::Q25_Q26_Q27_Q28, ARM64::Q26_Q27_Q28_Q29, ARM64::Q27_Q28_Q29_Q30, ARM64::Q28_Q29_Q30_Q31, ARM64::Q29_Q30_Q31_Q0, ARM64::Q30_Q31_Q0_Q1, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ Bit set.
  const uint8_t QQQQBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub0_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q14_Q15_Q16_Q17, ARM64::Q15_Q16_Q17_Q18, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub0_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q14_Q15_Q16_Q17, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x08, 
  };

  // QQQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q30_Q31_Q0_Q1, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x0c, 
  };

  // QQQQ_with_qsub3_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub3_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q29_Q30_Q31_Q0, ARM64::Q30_Q31_Q0_Q1, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub3_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub3_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x0e, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q14_Q15_Q16_Q17, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x08, 
  };

  // QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q30_Q31_Q0_Q1, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x0c, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q13_Q14_Q15_Q16, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, ARM64::Q31_Q0_Q1_Q2, 
  };

  // QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x08, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Register Class...
  const uint16_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo[] = {
    ARM64::Q0_Q1_Q2_Q3, ARM64::Q1_Q2_Q3_Q4, ARM64::Q2_Q3_Q4_Q5, ARM64::Q3_Q4_Q5_Q6, ARM64::Q4_Q5_Q6_Q7, ARM64::Q5_Q6_Q7_Q8, ARM64::Q6_Q7_Q8_Q9, ARM64::Q7_Q8_Q9_Q10, ARM64::Q8_Q9_Q10_Q11, ARM64::Q9_Q10_Q11_Q12, ARM64::Q10_Q11_Q12_Q13, ARM64::Q11_Q12_Q13_Q14, ARM64::Q12_Q13_Q14_Q15, 
  };

  // QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo Bit set.
  const uint8_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x01, 
  };

}

extern const MCRegisterClass ARM64MCRegisterClasses[] = {
  { "FPR8", FPR8, FPR8Bits, 32, sizeof(FPR8Bits), ARM64::FPR8RegClassID, 1, 1, 1, 1 },
  { "FPR16", FPR16, FPR16Bits, 32, sizeof(FPR16Bits), ARM64::FPR16RegClassID, 2, 2, 1, 1 },
  { "GPR32all", GPR32all, GPR32allBits, 33, sizeof(GPR32allBits), ARM64::GPR32allRegClassID, 4, 4, 1, 1 },
  { "FPR32", FPR32, FPR32Bits, 32, sizeof(FPR32Bits), ARM64::FPR32RegClassID, 4, 4, 1, 1 },
  { "GPR32", GPR32, GPR32Bits, 32, sizeof(GPR32Bits), ARM64::GPR32RegClassID, 4, 4, 1, 1 },
  { "GPR32sp", GPR32sp, GPR32spBits, 32, sizeof(GPR32spBits), ARM64::GPR32spRegClassID, 4, 4, 1, 1 },
  { "GPR32common", GPR32common, GPR32commonBits, 31, sizeof(GPR32commonBits), ARM64::GPR32commonRegClassID, 4, 4, 1, 1 },
  { "CCR", CCR, CCRBits, 1, sizeof(CCRBits), ARM64::CCRRegClassID, 4, 4, -1, 0 },
  { "GPR64all", GPR64all, GPR64allBits, 33, sizeof(GPR64allBits), ARM64::GPR64allRegClassID, 8, 8, 1, 1 },
  { "FPR64", FPR64, FPR64Bits, 32, sizeof(FPR64Bits), ARM64::FPR64RegClassID, 8, 8, 1, 1 },
  { "GPR64", GPR64, GPR64Bits, 32, sizeof(GPR64Bits), ARM64::GPR64RegClassID, 8, 8, 1, 1 },
  { "GPR64sp", GPR64sp, GPR64spBits, 32, sizeof(GPR64spBits), ARM64::GPR64spRegClassID, 8, 8, 1, 1 },
  { "GPR64common", GPR64common, GPR64commonBits, 31, sizeof(GPR64commonBits), ARM64::GPR64commonRegClassID, 8, 8, 1, 1 },
  { "tcGPR64", tcGPR64, tcGPR64Bits, 21, sizeof(tcGPR64Bits), ARM64::tcGPR64RegClassID, 8, 8, 1, 1 },
  { "DD", DD, DDBits, 32, sizeof(DDBits), ARM64::DDRegClassID, 16, 8, 1, 1 },
  { "FPR128", FPR128, FPR128Bits, 32, sizeof(FPR128Bits), ARM64::FPR128RegClassID, 16, 16, 1, 1 },
  { "FPR128_lo", FPR128_lo, FPR128_loBits, 16, sizeof(FPR128_loBits), ARM64::FPR128_loRegClassID, 16, 16, 1, 1 },
  { "DDD", DDD, DDDBits, 32, sizeof(DDDBits), ARM64::DDDRegClassID, 24, 8, 1, 1 },
  { "DDDD", DDDD, DDDDBits, 32, sizeof(DDDDBits), ARM64::DDDDRegClassID, 32, 8, 1, 1 },
  { "QQ", QQ, QQBits, 32, sizeof(QQBits), ARM64::QQRegClassID, 32, 16, 1, 1 },
  { "QQ_with_qsub0_in_FPR128_lo", QQ_with_qsub0_in_FPR128_lo, QQ_with_qsub0_in_FPR128_loBits, 16, sizeof(QQ_with_qsub0_in_FPR128_loBits), ARM64::QQ_with_qsub0_in_FPR128_loRegClassID, 32, 16, 1, 1 },
  { "QQ_with_qsub1_in_FPR128_lo", QQ_with_qsub1_in_FPR128_lo, QQ_with_qsub1_in_FPR128_loBits, 16, sizeof(QQ_with_qsub1_in_FPR128_loBits), ARM64::QQ_with_qsub1_in_FPR128_loRegClassID, 32, 16, 1, 1 },
  { "QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo", QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo, QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loBits, 15, sizeof(QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loBits), ARM64::QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClassID, 32, 16, 1, 1 },
  { "QQQ", QQQ, QQQBits, 32, sizeof(QQQBits), ARM64::QQQRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub0_in_FPR128_lo", QQQ_with_qsub0_in_FPR128_lo, QQQ_with_qsub0_in_FPR128_loBits, 16, sizeof(QQQ_with_qsub0_in_FPR128_loBits), ARM64::QQQ_with_qsub0_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub1_in_FPR128_lo", QQQ_with_qsub1_in_FPR128_lo, QQQ_with_qsub1_in_FPR128_loBits, 16, sizeof(QQQ_with_qsub1_in_FPR128_loBits), ARM64::QQQ_with_qsub1_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub2_in_FPR128_lo", QQQ_with_qsub2_in_FPR128_lo, QQQ_with_qsub2_in_FPR128_loBits, 16, sizeof(QQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQ_with_qsub2_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo", QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo, QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loBits, 15, sizeof(QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loBits), ARM64::QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo", QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo, QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits, 15, sizeof(QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo", QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo, QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits, 14, sizeof(QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID, 48, 16, 1, 1 },
  { "QQQQ", QQQQ, QQQQBits, 32, sizeof(QQQQBits), ARM64::QQQQRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub0_in_FPR128_lo", QQQQ_with_qsub0_in_FPR128_lo, QQQQ_with_qsub0_in_FPR128_loBits, 16, sizeof(QQQQ_with_qsub0_in_FPR128_loBits), ARM64::QQQQ_with_qsub0_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub1_in_FPR128_lo", QQQQ_with_qsub1_in_FPR128_lo, QQQQ_with_qsub1_in_FPR128_loBits, 16, sizeof(QQQQ_with_qsub1_in_FPR128_loBits), ARM64::QQQQ_with_qsub1_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub2_in_FPR128_lo", QQQQ_with_qsub2_in_FPR128_lo, QQQQ_with_qsub2_in_FPR128_loBits, 16, sizeof(QQQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQQ_with_qsub2_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub3_in_FPR128_lo", QQQQ_with_qsub3_in_FPR128_lo, QQQQ_with_qsub3_in_FPR128_loBits, 16, sizeof(QQQQ_with_qsub3_in_FPR128_loBits), ARM64::QQQQ_with_qsub3_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo", QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo, QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loBits, 15, sizeof(QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loBits), ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo", QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo, QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits, 15, sizeof(QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo", QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo, QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits, 15, sizeof(QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits), ARM64::QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo", QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo, QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits, 14, sizeof(QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loBits), ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo", QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo, QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits, 14, sizeof(QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits), ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID, 64, 16, 1, 1 },
  { "QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo", QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo, QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits, 13, sizeof(QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loBits), ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID, 64, 16, 1, 1 },
};

// ARM64 Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARM64DwarfFlavour0Dwarf2L[] = {
  { 0U, ARM64::W0 },
  { 1U, ARM64::W1 },
  { 2U, ARM64::W2 },
  { 3U, ARM64::W3 },
  { 4U, ARM64::W4 },
  { 5U, ARM64::W5 },
  { 6U, ARM64::W6 },
  { 7U, ARM64::W7 },
  { 8U, ARM64::W8 },
  { 9U, ARM64::W9 },
  { 10U, ARM64::W10 },
  { 11U, ARM64::W11 },
  { 12U, ARM64::W12 },
  { 13U, ARM64::W13 },
  { 14U, ARM64::W14 },
  { 15U, ARM64::W15 },
  { 16U, ARM64::W16 },
  { 17U, ARM64::W17 },
  { 18U, ARM64::W18 },
  { 19U, ARM64::W19 },
  { 20U, ARM64::W20 },
  { 21U, ARM64::W21 },
  { 22U, ARM64::W22 },
  { 23U, ARM64::W23 },
  { 24U, ARM64::W24 },
  { 25U, ARM64::W25 },
  { 26U, ARM64::W26 },
  { 27U, ARM64::W27 },
  { 28U, ARM64::W28 },
  { 29U, ARM64::W29 },
  { 30U, ARM64::W30 },
  { 31U, ARM64::WSP },
  { 64U, ARM64::B0 },
  { 65U, ARM64::B1 },
  { 66U, ARM64::B2 },
  { 67U, ARM64::B3 },
  { 68U, ARM64::B4 },
  { 69U, ARM64::B5 },
  { 70U, ARM64::B6 },
  { 71U, ARM64::B7 },
  { 72U, ARM64::B8 },
  { 73U, ARM64::B9 },
  { 74U, ARM64::B10 },
  { 75U, ARM64::B11 },
  { 76U, ARM64::B12 },
  { 77U, ARM64::B13 },
  { 78U, ARM64::B14 },
  { 79U, ARM64::B15 },
  { 80U, ARM64::B16 },
  { 81U, ARM64::B17 },
  { 82U, ARM64::B18 },
  { 83U, ARM64::B19 },
  { 84U, ARM64::B20 },
  { 85U, ARM64::B21 },
  { 86U, ARM64::B22 },
  { 87U, ARM64::B23 },
  { 88U, ARM64::B24 },
  { 89U, ARM64::B25 },
  { 90U, ARM64::B26 },
  { 91U, ARM64::B27 },
  { 92U, ARM64::B28 },
  { 93U, ARM64::B29 },
  { 94U, ARM64::B30 },
  { 95U, ARM64::B31 },
};
extern const unsigned ARM64DwarfFlavour0Dwarf2LSize = sizeof(ARM64DwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64EHFlavour0Dwarf2L[] = {
  { 0U, ARM64::W0 },
  { 1U, ARM64::W1 },
  { 2U, ARM64::W2 },
  { 3U, ARM64::W3 },
  { 4U, ARM64::W4 },
  { 5U, ARM64::W5 },
  { 6U, ARM64::W6 },
  { 7U, ARM64::W7 },
  { 8U, ARM64::W8 },
  { 9U, ARM64::W9 },
  { 10U, ARM64::W10 },
  { 11U, ARM64::W11 },
  { 12U, ARM64::W12 },
  { 13U, ARM64::W13 },
  { 14U, ARM64::W14 },
  { 15U, ARM64::W15 },
  { 16U, ARM64::W16 },
  { 17U, ARM64::W17 },
  { 18U, ARM64::W18 },
  { 19U, ARM64::W19 },
  { 20U, ARM64::W20 },
  { 21U, ARM64::W21 },
  { 22U, ARM64::W22 },
  { 23U, ARM64::W23 },
  { 24U, ARM64::W24 },
  { 25U, ARM64::W25 },
  { 26U, ARM64::W26 },
  { 27U, ARM64::W27 },
  { 28U, ARM64::W28 },
  { 29U, ARM64::W29 },
  { 30U, ARM64::W30 },
  { 31U, ARM64::WSP },
  { 64U, ARM64::B0 },
  { 65U, ARM64::B1 },
  { 66U, ARM64::B2 },
  { 67U, ARM64::B3 },
  { 68U, ARM64::B4 },
  { 69U, ARM64::B5 },
  { 70U, ARM64::B6 },
  { 71U, ARM64::B7 },
  { 72U, ARM64::B8 },
  { 73U, ARM64::B9 },
  { 74U, ARM64::B10 },
  { 75U, ARM64::B11 },
  { 76U, ARM64::B12 },
  { 77U, ARM64::B13 },
  { 78U, ARM64::B14 },
  { 79U, ARM64::B15 },
  { 80U, ARM64::B16 },
  { 81U, ARM64::B17 },
  { 82U, ARM64::B18 },
  { 83U, ARM64::B19 },
  { 84U, ARM64::B20 },
  { 85U, ARM64::B21 },
  { 86U, ARM64::B22 },
  { 87U, ARM64::B23 },
  { 88U, ARM64::B24 },
  { 89U, ARM64::B25 },
  { 90U, ARM64::B26 },
  { 91U, ARM64::B27 },
  { 92U, ARM64::B28 },
  { 93U, ARM64::B29 },
  { 94U, ARM64::B30 },
  { 95U, ARM64::B31 },
};
extern const unsigned ARM64EHFlavour0Dwarf2LSize = sizeof(ARM64EHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64DwarfFlavour0L2Dwarf[] = {
  { ARM64::FP, 29U },
  { ARM64::LR, 30U },
  { ARM64::SP, 31U },
  { ARM64::WSP, 31U },
  { ARM64::WZR, 31U },
  { ARM64::XZR, 31U },
  { ARM64::B0, 64U },
  { ARM64::B1, 65U },
  { ARM64::B2, 66U },
  { ARM64::B3, 67U },
  { ARM64::B4, 68U },
  { ARM64::B5, 69U },
  { ARM64::B6, 70U },
  { ARM64::B7, 71U },
  { ARM64::B8, 72U },
  { ARM64::B9, 73U },
  { ARM64::B10, 74U },
  { ARM64::B11, 75U },
  { ARM64::B12, 76U },
  { ARM64::B13, 77U },
  { ARM64::B14, 78U },
  { ARM64::B15, 79U },
  { ARM64::B16, 80U },
  { ARM64::B17, 81U },
  { ARM64::B18, 82U },
  { ARM64::B19, 83U },
  { ARM64::B20, 84U },
  { ARM64::B21, 85U },
  { ARM64::B22, 86U },
  { ARM64::B23, 87U },
  { ARM64::B24, 88U },
  { ARM64::B25, 89U },
  { ARM64::B26, 90U },
  { ARM64::B27, 91U },
  { ARM64::B28, 92U },
  { ARM64::B29, 93U },
  { ARM64::B30, 94U },
  { ARM64::B31, 95U },
  { ARM64::D0, 64U },
  { ARM64::D1, 65U },
  { ARM64::D2, 66U },
  { ARM64::D3, 67U },
  { ARM64::D4, 68U },
  { ARM64::D5, 69U },
  { ARM64::D6, 70U },
  { ARM64::D7, 71U },
  { ARM64::D8, 72U },
  { ARM64::D9, 73U },
  { ARM64::D10, 74U },
  { ARM64::D11, 75U },
  { ARM64::D12, 76U },
  { ARM64::D13, 77U },
  { ARM64::D14, 78U },
  { ARM64::D15, 79U },
  { ARM64::D16, 80U },
  { ARM64::D17, 81U },
  { ARM64::D18, 82U },
  { ARM64::D19, 83U },
  { ARM64::D20, 84U },
  { ARM64::D21, 85U },
  { ARM64::D22, 86U },
  { ARM64::D23, 87U },
  { ARM64::D24, 88U },
  { ARM64::D25, 89U },
  { ARM64::D26, 90U },
  { ARM64::D27, 91U },
  { ARM64::D28, 92U },
  { ARM64::D29, 93U },
  { ARM64::D30, 94U },
  { ARM64::D31, 95U },
  { ARM64::H0, 64U },
  { ARM64::H1, 65U },
  { ARM64::H2, 66U },
  { ARM64::H3, 67U },
  { ARM64::H4, 68U },
  { ARM64::H5, 69U },
  { ARM64::H6, 70U },
  { ARM64::H7, 71U },
  { ARM64::H8, 72U },
  { ARM64::H9, 73U },
  { ARM64::H10, 74U },
  { ARM64::H11, 75U },
  { ARM64::H12, 76U },
  { ARM64::H13, 77U },
  { ARM64::H14, 78U },
  { ARM64::H15, 79U },
  { ARM64::H16, 80U },
  { ARM64::H17, 81U },
  { ARM64::H18, 82U },
  { ARM64::H19, 83U },
  { ARM64::H20, 84U },
  { ARM64::H21, 85U },
  { ARM64::H22, 86U },
  { ARM64::H23, 87U },
  { ARM64::H24, 88U },
  { ARM64::H25, 89U },
  { ARM64::H26, 90U },
  { ARM64::H27, 91U },
  { ARM64::H28, 92U },
  { ARM64::H29, 93U },
  { ARM64::H30, 94U },
  { ARM64::H31, 95U },
  { ARM64::Q0, 64U },
  { ARM64::Q1, 65U },
  { ARM64::Q2, 66U },
  { ARM64::Q3, 67U },
  { ARM64::Q4, 68U },
  { ARM64::Q5, 69U },
  { ARM64::Q6, 70U },
  { ARM64::Q7, 71U },
  { ARM64::Q8, 72U },
  { ARM64::Q9, 73U },
  { ARM64::Q10, 74U },
  { ARM64::Q11, 75U },
  { ARM64::Q12, 76U },
  { ARM64::Q13, 77U },
  { ARM64::Q14, 78U },
  { ARM64::Q15, 79U },
  { ARM64::Q16, 80U },
  { ARM64::Q17, 81U },
  { ARM64::Q18, 82U },
  { ARM64::Q19, 83U },
  { ARM64::Q20, 84U },
  { ARM64::Q21, 85U },
  { ARM64::Q22, 86U },
  { ARM64::Q23, 87U },
  { ARM64::Q24, 88U },
  { ARM64::Q25, 89U },
  { ARM64::Q26, 90U },
  { ARM64::Q27, 91U },
  { ARM64::Q28, 92U },
  { ARM64::Q29, 93U },
  { ARM64::Q30, 94U },
  { ARM64::Q31, 95U },
  { ARM64::S0, 64U },
  { ARM64::S1, 65U },
  { ARM64::S2, 66U },
  { ARM64::S3, 67U },
  { ARM64::S4, 68U },
  { ARM64::S5, 69U },
  { ARM64::S6, 70U },
  { ARM64::S7, 71U },
  { ARM64::S8, 72U },
  { ARM64::S9, 73U },
  { ARM64::S10, 74U },
  { ARM64::S11, 75U },
  { ARM64::S12, 76U },
  { ARM64::S13, 77U },
  { ARM64::S14, 78U },
  { ARM64::S15, 79U },
  { ARM64::S16, 80U },
  { ARM64::S17, 81U },
  { ARM64::S18, 82U },
  { ARM64::S19, 83U },
  { ARM64::S20, 84U },
  { ARM64::S21, 85U },
  { ARM64::S22, 86U },
  { ARM64::S23, 87U },
  { ARM64::S24, 88U },
  { ARM64::S25, 89U },
  { ARM64::S26, 90U },
  { ARM64::S27, 91U },
  { ARM64::S28, 92U },
  { ARM64::S29, 93U },
  { ARM64::S30, 94U },
  { ARM64::S31, 95U },
  { ARM64::W0, 0U },
  { ARM64::W1, 1U },
  { ARM64::W2, 2U },
  { ARM64::W3, 3U },
  { ARM64::W4, 4U },
  { ARM64::W5, 5U },
  { ARM64::W6, 6U },
  { ARM64::W7, 7U },
  { ARM64::W8, 8U },
  { ARM64::W9, 9U },
  { ARM64::W10, 10U },
  { ARM64::W11, 11U },
  { ARM64::W12, 12U },
  { ARM64::W13, 13U },
  { ARM64::W14, 14U },
  { ARM64::W15, 15U },
  { ARM64::W16, 16U },
  { ARM64::W17, 17U },
  { ARM64::W18, 18U },
  { ARM64::W19, 19U },
  { ARM64::W20, 20U },
  { ARM64::W21, 21U },
  { ARM64::W22, 22U },
  { ARM64::W23, 23U },
  { ARM64::W24, 24U },
  { ARM64::W25, 25U },
  { ARM64::W26, 26U },
  { ARM64::W27, 27U },
  { ARM64::W28, 28U },
  { ARM64::W29, 29U },
  { ARM64::W30, 30U },
  { ARM64::X0, 0U },
  { ARM64::X1, 1U },
  { ARM64::X2, 2U },
  { ARM64::X3, 3U },
  { ARM64::X4, 4U },
  { ARM64::X5, 5U },
  { ARM64::X6, 6U },
  { ARM64::X7, 7U },
  { ARM64::X8, 8U },
  { ARM64::X9, 9U },
  { ARM64::X10, 10U },
  { ARM64::X11, 11U },
  { ARM64::X12, 12U },
  { ARM64::X13, 13U },
  { ARM64::X14, 14U },
  { ARM64::X15, 15U },
  { ARM64::X16, 16U },
  { ARM64::X17, 17U },
  { ARM64::X18, 18U },
  { ARM64::X19, 19U },
  { ARM64::X20, 20U },
  { ARM64::X21, 21U },
  { ARM64::X22, 22U },
  { ARM64::X23, 23U },
  { ARM64::X24, 24U },
  { ARM64::X25, 25U },
  { ARM64::X26, 26U },
  { ARM64::X27, 27U },
  { ARM64::X28, 28U },
};
extern const unsigned ARM64DwarfFlavour0L2DwarfSize = sizeof(ARM64DwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64EHFlavour0L2Dwarf[] = {
  { ARM64::FP, 29U },
  { ARM64::LR, 30U },
  { ARM64::SP, 31U },
  { ARM64::WSP, 31U },
  { ARM64::WZR, 31U },
  { ARM64::XZR, 31U },
  { ARM64::B0, 64U },
  { ARM64::B1, 65U },
  { ARM64::B2, 66U },
  { ARM64::B3, 67U },
  { ARM64::B4, 68U },
  { ARM64::B5, 69U },
  { ARM64::B6, 70U },
  { ARM64::B7, 71U },
  { ARM64::B8, 72U },
  { ARM64::B9, 73U },
  { ARM64::B10, 74U },
  { ARM64::B11, 75U },
  { ARM64::B12, 76U },
  { ARM64::B13, 77U },
  { ARM64::B14, 78U },
  { ARM64::B15, 79U },
  { ARM64::B16, 80U },
  { ARM64::B17, 81U },
  { ARM64::B18, 82U },
  { ARM64::B19, 83U },
  { ARM64::B20, 84U },
  { ARM64::B21, 85U },
  { ARM64::B22, 86U },
  { ARM64::B23, 87U },
  { ARM64::B24, 88U },
  { ARM64::B25, 89U },
  { ARM64::B26, 90U },
  { ARM64::B27, 91U },
  { ARM64::B28, 92U },
  { ARM64::B29, 93U },
  { ARM64::B30, 94U },
  { ARM64::B31, 95U },
  { ARM64::D0, 64U },
  { ARM64::D1, 65U },
  { ARM64::D2, 66U },
  { ARM64::D3, 67U },
  { ARM64::D4, 68U },
  { ARM64::D5, 69U },
  { ARM64::D6, 70U },
  { ARM64::D7, 71U },
  { ARM64::D8, 72U },
  { ARM64::D9, 73U },
  { ARM64::D10, 74U },
  { ARM64::D11, 75U },
  { ARM64::D12, 76U },
  { ARM64::D13, 77U },
  { ARM64::D14, 78U },
  { ARM64::D15, 79U },
  { ARM64::D16, 80U },
  { ARM64::D17, 81U },
  { ARM64::D18, 82U },
  { ARM64::D19, 83U },
  { ARM64::D20, 84U },
  { ARM64::D21, 85U },
  { ARM64::D22, 86U },
  { ARM64::D23, 87U },
  { ARM64::D24, 88U },
  { ARM64::D25, 89U },
  { ARM64::D26, 90U },
  { ARM64::D27, 91U },
  { ARM64::D28, 92U },
  { ARM64::D29, 93U },
  { ARM64::D30, 94U },
  { ARM64::D31, 95U },
  { ARM64::H0, 64U },
  { ARM64::H1, 65U },
  { ARM64::H2, 66U },
  { ARM64::H3, 67U },
  { ARM64::H4, 68U },
  { ARM64::H5, 69U },
  { ARM64::H6, 70U },
  { ARM64::H7, 71U },
  { ARM64::H8, 72U },
  { ARM64::H9, 73U },
  { ARM64::H10, 74U },
  { ARM64::H11, 75U },
  { ARM64::H12, 76U },
  { ARM64::H13, 77U },
  { ARM64::H14, 78U },
  { ARM64::H15, 79U },
  { ARM64::H16, 80U },
  { ARM64::H17, 81U },
  { ARM64::H18, 82U },
  { ARM64::H19, 83U },
  { ARM64::H20, 84U },
  { ARM64::H21, 85U },
  { ARM64::H22, 86U },
  { ARM64::H23, 87U },
  { ARM64::H24, 88U },
  { ARM64::H25, 89U },
  { ARM64::H26, 90U },
  { ARM64::H27, 91U },
  { ARM64::H28, 92U },
  { ARM64::H29, 93U },
  { ARM64::H30, 94U },
  { ARM64::H31, 95U },
  { ARM64::Q0, 64U },
  { ARM64::Q1, 65U },
  { ARM64::Q2, 66U },
  { ARM64::Q3, 67U },
  { ARM64::Q4, 68U },
  { ARM64::Q5, 69U },
  { ARM64::Q6, 70U },
  { ARM64::Q7, 71U },
  { ARM64::Q8, 72U },
  { ARM64::Q9, 73U },
  { ARM64::Q10, 74U },
  { ARM64::Q11, 75U },
  { ARM64::Q12, 76U },
  { ARM64::Q13, 77U },
  { ARM64::Q14, 78U },
  { ARM64::Q15, 79U },
  { ARM64::Q16, 80U },
  { ARM64::Q17, 81U },
  { ARM64::Q18, 82U },
  { ARM64::Q19, 83U },
  { ARM64::Q20, 84U },
  { ARM64::Q21, 85U },
  { ARM64::Q22, 86U },
  { ARM64::Q23, 87U },
  { ARM64::Q24, 88U },
  { ARM64::Q25, 89U },
  { ARM64::Q26, 90U },
  { ARM64::Q27, 91U },
  { ARM64::Q28, 92U },
  { ARM64::Q29, 93U },
  { ARM64::Q30, 94U },
  { ARM64::Q31, 95U },
  { ARM64::S0, 64U },
  { ARM64::S1, 65U },
  { ARM64::S2, 66U },
  { ARM64::S3, 67U },
  { ARM64::S4, 68U },
  { ARM64::S5, 69U },
  { ARM64::S6, 70U },
  { ARM64::S7, 71U },
  { ARM64::S8, 72U },
  { ARM64::S9, 73U },
  { ARM64::S10, 74U },
  { ARM64::S11, 75U },
  { ARM64::S12, 76U },
  { ARM64::S13, 77U },
  { ARM64::S14, 78U },
  { ARM64::S15, 79U },
  { ARM64::S16, 80U },
  { ARM64::S17, 81U },
  { ARM64::S18, 82U },
  { ARM64::S19, 83U },
  { ARM64::S20, 84U },
  { ARM64::S21, 85U },
  { ARM64::S22, 86U },
  { ARM64::S23, 87U },
  { ARM64::S24, 88U },
  { ARM64::S25, 89U },
  { ARM64::S26, 90U },
  { ARM64::S27, 91U },
  { ARM64::S28, 92U },
  { ARM64::S29, 93U },
  { ARM64::S30, 94U },
  { ARM64::S31, 95U },
  { ARM64::W0, 0U },
  { ARM64::W1, 1U },
  { ARM64::W2, 2U },
  { ARM64::W3, 3U },
  { ARM64::W4, 4U },
  { ARM64::W5, 5U },
  { ARM64::W6, 6U },
  { ARM64::W7, 7U },
  { ARM64::W8, 8U },
  { ARM64::W9, 9U },
  { ARM64::W10, 10U },
  { ARM64::W11, 11U },
  { ARM64::W12, 12U },
  { ARM64::W13, 13U },
  { ARM64::W14, 14U },
  { ARM64::W15, 15U },
  { ARM64::W16, 16U },
  { ARM64::W17, 17U },
  { ARM64::W18, 18U },
  { ARM64::W19, 19U },
  { ARM64::W20, 20U },
  { ARM64::W21, 21U },
  { ARM64::W22, 22U },
  { ARM64::W23, 23U },
  { ARM64::W24, 24U },
  { ARM64::W25, 25U },
  { ARM64::W26, 26U },
  { ARM64::W27, 27U },
  { ARM64::W28, 28U },
  { ARM64::W29, 29U },
  { ARM64::W30, 30U },
  { ARM64::X0, 0U },
  { ARM64::X1, 1U },
  { ARM64::X2, 2U },
  { ARM64::X3, 3U },
  { ARM64::X4, 4U },
  { ARM64::X5, 5U },
  { ARM64::X6, 6U },
  { ARM64::X7, 7U },
  { ARM64::X8, 8U },
  { ARM64::X9, 9U },
  { ARM64::X10, 10U },
  { ARM64::X11, 11U },
  { ARM64::X12, 12U },
  { ARM64::X13, 13U },
  { ARM64::X14, 14U },
  { ARM64::X15, 15U },
  { ARM64::X16, 16U },
  { ARM64::X17, 17U },
  { ARM64::X18, 18U },
  { ARM64::X19, 19U },
  { ARM64::X20, 20U },
  { ARM64::X21, 21U },
  { ARM64::X22, 22U },
  { ARM64::X23, 23U },
  { ARM64::X24, 24U },
  { ARM64::X25, 25U },
  { ARM64::X26, 26U },
  { ARM64::X27, 27U },
  { ARM64::X28, 28U },
};
extern const unsigned ARM64EHFlavour0L2DwarfSize = sizeof(ARM64EHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t ARM64RegEncodingTable[] = {
  0,
  0,
  29,
  30,
  31,
  31,
  31,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
};
static inline void InitARM64MCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(ARM64RegDesc, 420, RA, PC, ARM64MCRegisterClasses, 41, ARM64RegUnitRoots, 66, ARM64RegDiffLists, ARM64RegStrings, ARM64SubRegIdxLists, 53,
ARM64SubRegIdxRanges,   ARM64RegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARM64DwarfFlavour0Dwarf2L, ARM64DwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARM64EHFlavour0Dwarf2L, ARM64EHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARM64DwarfFlavour0L2Dwarf, ARM64DwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARM64EHFlavour0L2Dwarf, ARM64EHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct ARM64GenRegisterInfo : public TargetRegisterInfo {
  explicit ARM64GenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace ARM64 { // Register classes
  extern const TargetRegisterClass FPR8RegClass;
  extern const TargetRegisterClass FPR16RegClass;
  extern const TargetRegisterClass GPR32allRegClass;
  extern const TargetRegisterClass FPR32RegClass;
  extern const TargetRegisterClass GPR32RegClass;
  extern const TargetRegisterClass GPR32spRegClass;
  extern const TargetRegisterClass GPR32commonRegClass;
  extern const TargetRegisterClass CCRRegClass;
  extern const TargetRegisterClass GPR64allRegClass;
  extern const TargetRegisterClass FPR64RegClass;
  extern const TargetRegisterClass GPR64RegClass;
  extern const TargetRegisterClass GPR64spRegClass;
  extern const TargetRegisterClass GPR64commonRegClass;
  extern const TargetRegisterClass tcGPR64RegClass;
  extern const TargetRegisterClass DDRegClass;
  extern const TargetRegisterClass FPR128RegClass;
  extern const TargetRegisterClass FPR128_loRegClass;
  extern const TargetRegisterClass DDDRegClass;
  extern const TargetRegisterClass DDDDRegClass;
  extern const TargetRegisterClass QQRegClass;
  extern const TargetRegisterClass QQ_with_qsub0_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQRegClass;
  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub3_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass;
  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass;
} // end of namespace ARM64

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass ARM64MCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::f32, MVT::i32, MVT::Other,
  /* 3 */ MVT::i64, MVT::Other,
  /* 5 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::f128, MVT::Other,
  /* 13 */ MVT::f64, MVT::i64, MVT::v2f32, MVT::v1f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::Other,
  /* 22 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other,
  /* 29 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "bsub", "dsub", "dsub0", "dsub1", "dsub2", "dsub3", "hsub", "qhisub", "qsub", "qsub0", "qsub1", "qsub2", "qsub3", "ssub", "sub_32", "dsub1_then_bsub", "dsub1_then_hsub", "dsub1_then_ssub", "dsub3_then_bsub", "dsub3_then_hsub", "dsub3_then_ssub", "dsub2_then_bsub", "dsub2_then_hsub", "dsub2_then_ssub", "qsub1_then_bsub", "qsub1_then_dsub", "qsub1_then_hsub", "qsub1_then_ssub", "qsub3_then_bsub", "qsub3_then_dsub", "qsub3_then_hsub", "qsub3_then_ssub", "qsub2_then_bsub", "qsub2_then_dsub", "qsub2_then_hsub", "qsub2_then_ssub", "dsub0_dsub1", "dsub0_dsub1_dsub2", "dsub1_dsub2", "dsub1_dsub2_dsub3", "dsub2_dsub3", "dsub_qsub1_then_dsub", "dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub", "dsub_qsub1_then_dsub_qsub2_then_dsub", "qsub0_qsub1", "qsub0_qsub1_qsub2", "qsub1_qsub2", "qsub1_qsub2_qsub3", "qsub2_qsub3", "qsub1_then_dsub_qsub2_then_dsub", "qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub", "qsub2_then_dsub_qsub3_then_dsub" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // bsub
  0x00000001, // dsub
  0x00000001, // dsub0
  0x00000010, // dsub1
  0x00000040, // dsub2
  0x00000020, // dsub3
  0x00000001, // hsub
  0x00000002, // qhisub
  0x00000004, // qsub
  0x00000001, // qsub0
  0x00000080, // qsub1
  0x00000200, // qsub2
  0x00000100, // qsub3
  0x00000001, // ssub
  0x00000008, // sub_32
  0x00000010, // dsub1_then_bsub
  0x00000010, // dsub1_then_hsub
  0x00000010, // dsub1_then_ssub
  0x00000020, // dsub3_then_bsub
  0x00000020, // dsub3_then_hsub
  0x00000020, // dsub3_then_ssub
  0x00000040, // dsub2_then_bsub
  0x00000040, // dsub2_then_hsub
  0x00000040, // dsub2_then_ssub
  0x00000080, // qsub1_then_bsub
  0x00000080, // qsub1_then_dsub
  0x00000080, // qsub1_then_hsub
  0x00000080, // qsub1_then_ssub
  0x00000100, // qsub3_then_bsub
  0x00000100, // qsub3_then_dsub
  0x00000100, // qsub3_then_hsub
  0x00000100, // qsub3_then_ssub
  0x00000200, // qsub2_then_bsub
  0x00000200, // qsub2_then_dsub
  0x00000200, // qsub2_then_hsub
  0x00000200, // qsub2_then_ssub
  0x00000011, // dsub0_dsub1
  0x00000051, // dsub0_dsub1_dsub2
  0x00000050, // dsub1_dsub2
  0x00000070, // dsub1_dsub2_dsub3
  0x00000060, // dsub2_dsub3
  0x00000081, // dsub_qsub1_then_dsub
  0x00000381, // dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
  0x00000281, // dsub_qsub1_then_dsub_qsub2_then_dsub
  0x00000081, // qsub0_qsub1
  0x00000281, // qsub0_qsub1_qsub2
  0x00000280, // qsub1_qsub2
  0x00000380, // qsub1_qsub2_qsub3
  0x00000300, // qsub2_qsub3
  0x00000280, // qsub1_then_dsub_qsub2_then_dsub
  0x00000380, // qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
  0x00000300, // qsub2_then_dsub_qsub3_then_dsub
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t FPR8SubClassMask[] = {
  0x00000001, 0x00000000, 
  0xffffc20a, 0x000001ff, // bsub
  0x00064000, 0x00000000, // dsub1_then_bsub
  0x00040000, 0x00000000, // dsub3_then_bsub
  0x00060000, 0x00000000, // dsub2_then_bsub
  0xfff80000, 0x000001ff, // qsub1_then_bsub
  0xc0000000, 0x000001ff, // qsub3_then_bsub
  0xff800000, 0x000001ff, // qsub2_then_bsub
};

static const uint32_t FPR16SubClassMask[] = {
  0x00000002, 0x00000000, 
  0xffffc208, 0x000001ff, // hsub
  0x00064000, 0x00000000, // dsub1_then_hsub
  0x00040000, 0x00000000, // dsub3_then_hsub
  0x00060000, 0x00000000, // dsub2_then_hsub
  0xfff80000, 0x000001ff, // qsub1_then_hsub
  0xc0000000, 0x000001ff, // qsub3_then_hsub
  0xff800000, 0x000001ff, // qsub2_then_hsub
};

static const uint32_t GPR32allSubClassMask[] = {
  0x00000074, 0x00000000, 
  0x00003d00, 0x00000000, // sub_32
};

static const uint32_t FPR32SubClassMask[] = {
  0x00000008, 0x00000000, 
  0xffffc200, 0x000001ff, // ssub
  0x00064000, 0x00000000, // dsub1_then_ssub
  0x00040000, 0x00000000, // dsub3_then_ssub
  0x00060000, 0x00000000, // dsub2_then_ssub
  0xfff80000, 0x000001ff, // qsub1_then_ssub
  0xc0000000, 0x000001ff, // qsub3_then_ssub
  0xff800000, 0x000001ff, // qsub2_then_ssub
};

static const uint32_t GPR32SubClassMask[] = {
  0x00000050, 0x00000000, 
  0x00003400, 0x00000000, // sub_32
};

static const uint32_t GPR32spSubClassMask[] = {
  0x00000060, 0x00000000, 
  0x00003800, 0x00000000, // sub_32
};

static const uint32_t GPR32commonSubClassMask[] = {
  0x00000040, 0x00000000, 
  0x00003000, 0x00000000, // sub_32
};

static const uint32_t CCRSubClassMask[] = {
  0x00000080, 0x00000000, 
};

static const uint32_t GPR64allSubClassMask[] = {
  0x00003d00, 0x00000000, 
};

static const uint32_t FPR64SubClassMask[] = {
  0x00000200, 0x00000000, 
  0xfff98000, 0x000001ff, // dsub
  0x00064000, 0x00000000, // dsub0
  0x00064000, 0x00000000, // dsub1
  0x00060000, 0x00000000, // dsub2
  0x00040000, 0x00000000, // dsub3
  0xfff80000, 0x000001ff, // qsub1_then_dsub
  0xc0000000, 0x000001ff, // qsub3_then_dsub
  0xff800000, 0x000001ff, // qsub2_then_dsub
};

static const uint32_t GPR64SubClassMask[] = {
  0x00003400, 0x00000000, 
};

static const uint32_t GPR64spSubClassMask[] = {
  0x00003800, 0x00000000, 
};

static const uint32_t GPR64commonSubClassMask[] = {
  0x00003000, 0x00000000, 
};

static const uint32_t tcGPR64SubClassMask[] = {
  0x00002000, 0x00000000, 
};

static const uint32_t DDSubClassMask[] = {
  0x00004000, 0x00000000, 
  0x00060000, 0x00000000, // dsub0_dsub1
  0x00060000, 0x00000000, // dsub1_dsub2
  0x00040000, 0x00000000, // dsub2_dsub3
  0xfff80000, 0x000001ff, // dsub_qsub1_then_dsub
  0xff800000, 0x000001ff, // qsub1_then_dsub_qsub2_then_dsub
  0xc0000000, 0x000001ff, // qsub2_then_dsub_qsub3_then_dsub
};

static const uint32_t FPR128SubClassMask[] = {
  0x00018000, 0x00000000, 
  0xfff80000, 0x000001ff, // qsub0
  0xfff80000, 0x000001ff, // qsub1
  0xff800000, 0x000001ff, // qsub2
  0xc0000000, 0x000001ff, // qsub3
};

static const uint32_t FPR128_loSubClassMask[] = {
  0x00010000, 0x00000000, 
  0xa9500000, 0x00000148, // qsub0
  0x3a600000, 0x000001d9, // qsub1
  0x34000000, 0x000001f2, // qsub2
  0x00000000, 0x000001a4, // qsub3
};

static const uint32_t DDDSubClassMask[] = {
  0x00020000, 0x00000000, 
  0x00040000, 0x00000000, // dsub0_dsub1_dsub2
  0x00040000, 0x00000000, // dsub1_dsub2_dsub3
  0xff800000, 0x000001ff, // dsub_qsub1_then_dsub_qsub2_then_dsub
  0xc0000000, 0x000001ff, // qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
};

static const uint32_t DDDDSubClassMask[] = {
  0x00040000, 0x00000000, 
  0xc0000000, 0x000001ff, // dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
};

static const uint32_t QQSubClassMask[] = {
  0x00780000, 0x00000000, 
  0xff800000, 0x000001ff, // qsub0_qsub1
  0xff800000, 0x000001ff, // qsub1_qsub2
  0xc0000000, 0x000001ff, // qsub2_qsub3
};

static const uint32_t QQ_with_qsub0_in_FPR128_loSubClassMask[] = {
  0x00500000, 0x00000000, 
  0xa9000000, 0x00000148, // qsub0_qsub1
  0x3a000000, 0x000001d9, // qsub1_qsub2
  0x00000000, 0x000001f2, // qsub2_qsub3
};

static const uint32_t QQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x00600000, 0x00000000, 
  0x3a000000, 0x000001d9, // qsub0_qsub1
  0x34000000, 0x000001f2, // qsub1_qsub2
  0x00000000, 0x000001a4, // qsub2_qsub3
};

static const uint32_t QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x00400000, 0x00000000, 
  0x28000000, 0x00000148, // qsub0_qsub1
  0x30000000, 0x000001d0, // qsub1_qsub2
  0x00000000, 0x000001a0, // qsub2_qsub3
};

static const uint32_t QQQSubClassMask[] = {
  0x3f800000, 0x00000000, 
  0xc0000000, 0x000001ff, // qsub0_qsub1_qsub2
  0xc0000000, 0x000001ff, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub0_in_FPR128_loSubClassMask[] = {
  0x29000000, 0x00000000, 
  0x80000000, 0x00000148, // qsub0_qsub1_qsub2
  0x00000000, 0x000001d9, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x3a000000, 0x00000000, 
  0x00000000, 0x000001d9, // qsub0_qsub1_qsub2
  0x00000000, 0x000001f2, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x34000000, 0x00000000, 
  0x00000000, 0x000001f2, // qsub0_qsub1_qsub2
  0x00000000, 0x000001a4, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x28000000, 0x00000000, 
  0x00000000, 0x00000148, // qsub0_qsub1_qsub2
  0x00000000, 0x000001d0, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x30000000, 0x00000000, 
  0x00000000, 0x000001d0, // qsub0_qsub1_qsub2
  0x00000000, 0x000001a0, // qsub1_qsub2_qsub3
};

static const uint32_t QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x20000000, 0x00000000, 
  0x00000000, 0x00000140, // qsub0_qsub1_qsub2
  0x00000000, 0x00000180, // qsub1_qsub2_qsub3
};

static const uint32_t QQQQSubClassMask[] = {
  0xc0000000, 0x000001ff, 
};

static const uint32_t QQQQ_with_qsub0_in_FPR128_loSubClassMask[] = {
  0x80000000, 0x00000148, 
};

static const uint32_t QQQQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x000001d9, 
};

static const uint32_t QQQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x000001f2, 
};

static const uint32_t QQQQ_with_qsub3_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x000001a4, 
};

static const uint32_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x00000148, 
};

static const uint32_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x000001d0, 
};

static const uint32_t QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x000001a0, 
};

static const uint32_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x00000140, 
};

static const uint32_t QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x00000180, 
};

static const uint32_t QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask[] = {
  0x00000000, 0x00000100, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 10, 11, 12, 13, 0,
  /* 5 */ 15, 0,
  /* 7 */ 1, 16, 19, 22, 25, 29, 33, 0,
  /* 15 */ 2, 3, 4, 5, 6, 26, 30, 34, 0,
  /* 24 */ 7, 17, 20, 23, 27, 31, 35, 0,
  /* 32 */ 14, 18, 21, 24, 28, 32, 36, 0,
  /* 40 */ 43, 0,
  /* 42 */ 46, 48, 0,
  /* 45 */ 45, 47, 49, 0,
  /* 49 */ 38, 40, 44, 51, 0,
  /* 54 */ 37, 39, 41, 42, 50, 52, 0,
};

static const TargetRegisterClass *const GPR32Superclasses[] = {
  &ARM64::GPR32allRegClass,
  NULL
};

static const TargetRegisterClass *const GPR32spSuperclasses[] = {
  &ARM64::GPR32allRegClass,
  NULL
};

static const TargetRegisterClass *const GPR32commonSuperclasses[] = {
  &ARM64::GPR32allRegClass,
  &ARM64::GPR32RegClass,
  &ARM64::GPR32spRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64Superclasses[] = {
  &ARM64::GPR64allRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64spSuperclasses[] = {
  &ARM64::GPR64allRegClass,
  NULL
};

static const TargetRegisterClass *const GPR64commonSuperclasses[] = {
  &ARM64::GPR64allRegClass,
  &ARM64::GPR64RegClass,
  &ARM64::GPR64spRegClass,
  NULL
};

static const TargetRegisterClass *const tcGPR64Superclasses[] = {
  &ARM64::GPR64allRegClass,
  &ARM64::GPR64RegClass,
  &ARM64::GPR64spRegClass,
  &ARM64::GPR64commonRegClass,
  NULL
};

static const TargetRegisterClass *const FPR128_loSuperclasses[] = {
  &ARM64::FPR128RegClass,
  NULL
};

static const TargetRegisterClass *const QQ_with_qsub0_in_FPR128_loSuperclasses[] = {
  &ARM64::QQRegClass,
  NULL
};

static const TargetRegisterClass *const QQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQRegClass,
  NULL
};

static const TargetRegisterClass *const QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQRegClass,
  &ARM64::QQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQ_with_qsub1_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub0_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  &ARM64::QQQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub1_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  &ARM64::QQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub2_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQRegClass,
  &ARM64::QQQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub0_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub3_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub3_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub3_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses[] = {
  &ARM64::QQQQRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub3_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
  &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
  NULL
};


static inline unsigned GPR32AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR32GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::WZR, ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR32RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR32AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned GPR32spAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR32spGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::WSP, ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR32spRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR32spAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned GPR32commonAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR32commonGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::W8, ARM64::W9, ARM64::W10, ARM64::W11, ARM64::W12, ARM64::W13, ARM64::W14, ARM64::W15, ARM64::W16, ARM64::W17, ARM64::W18, ARM64::W19, ARM64::W20, ARM64::W21, ARM64::W22, ARM64::W23, ARM64::W24, ARM64::W25, ARM64::W26, ARM64::W27, ARM64::W28, ARM64::W29, ARM64::W30, ARM64::W0, ARM64::W1, ARM64::W2, ARM64::W3, ARM64::W4, ARM64::W5, ARM64::W6, ARM64::W7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR32commonRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR32commonAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned GPR64AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR64GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::XZR, ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR64RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR64AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned GPR64spAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR64spGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::SP, ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR64spRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR64spAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned GPR64commonAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> GPR64commonGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::LR, ARM64::X0, ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7 };
  const MCRegisterClass &MCR = ARM64MCRegisterClasses[ARM64::GPR64commonRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = GPR64commonAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
namespace ARM64 {   // Register class instances
  extern const TargetRegisterClass FPR8RegClass = {
    &ARM64MCRegisterClasses[FPR8RegClassID],
    VTLists + 29,
    FPR8SubClassMask,
    SuperRegIdxSeqs + 7,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR16RegClass = {
    &ARM64MCRegisterClasses[FPR16RegClassID],
    VTLists + 29,
    FPR16SubClassMask,
    SuperRegIdxSeqs + 24,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32allRegClass = {
    &ARM64MCRegisterClasses[GPR32allRegClassID],
    VTLists + 1,
    GPR32allSubClassMask,
    SuperRegIdxSeqs + 5,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR32RegClass = {
    &ARM64MCRegisterClasses[FPR32RegClassID],
    VTLists + 0,
    FPR32SubClassMask,
    SuperRegIdxSeqs + 32,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR32RegClass = {
    &ARM64MCRegisterClasses[GPR32RegClassID],
    VTLists + 1,
    GPR32SubClassMask,
    SuperRegIdxSeqs + 5,
    GPR32Superclasses,
    GPR32GetRawAllocationOrder
  };

  extern const TargetRegisterClass GPR32spRegClass = {
    &ARM64MCRegisterClasses[GPR32spRegClassID],
    VTLists + 1,
    GPR32spSubClassMask,
    SuperRegIdxSeqs + 5,
    GPR32spSuperclasses,
    GPR32spGetRawAllocationOrder
  };

  extern const TargetRegisterClass GPR32commonRegClass = {
    &ARM64MCRegisterClasses[GPR32commonRegClassID],
    VTLists + 1,
    GPR32commonSubClassMask,
    SuperRegIdxSeqs + 5,
    GPR32commonSuperclasses,
    GPR32commonGetRawAllocationOrder
  };

  extern const TargetRegisterClass CCRRegClass = {
    &ARM64MCRegisterClasses[CCRRegClassID],
    VTLists + 1,
    CCRSubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64allRegClass = {
    &ARM64MCRegisterClasses[GPR64allRegClassID],
    VTLists + 3,
    GPR64allSubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR64RegClass = {
    &ARM64MCRegisterClasses[FPR64RegClassID],
    VTLists + 13,
    FPR64SubClassMask,
    SuperRegIdxSeqs + 15,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPR64RegClass = {
    &ARM64MCRegisterClasses[GPR64RegClassID],
    VTLists + 3,
    GPR64SubClassMask,
    SuperRegIdxSeqs + 4,
    GPR64Superclasses,
    GPR64GetRawAllocationOrder
  };

  extern const TargetRegisterClass GPR64spRegClass = {
    &ARM64MCRegisterClasses[GPR64spRegClassID],
    VTLists + 3,
    GPR64spSubClassMask,
    SuperRegIdxSeqs + 4,
    GPR64spSuperclasses,
    GPR64spGetRawAllocationOrder
  };

  extern const TargetRegisterClass GPR64commonRegClass = {
    &ARM64MCRegisterClasses[GPR64commonRegClassID],
    VTLists + 3,
    GPR64commonSubClassMask,
    SuperRegIdxSeqs + 4,
    GPR64commonSuperclasses,
    GPR64commonGetRawAllocationOrder
  };

  extern const TargetRegisterClass tcGPR64RegClass = {
    &ARM64MCRegisterClasses[tcGPR64RegClassID],
    VTLists + 3,
    tcGPR64SubClassMask,
    SuperRegIdxSeqs + 4,
    tcGPR64Superclasses,
    0
  };

  extern const TargetRegisterClass DDRegClass = {
    &ARM64MCRegisterClasses[DDRegClassID],
    VTLists + 29,
    DDSubClassMask,
    SuperRegIdxSeqs + 54,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR128RegClass = {
    &ARM64MCRegisterClasses[FPR128RegClassID],
    VTLists + 5,
    FPR128SubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass FPR128_loRegClass = {
    &ARM64MCRegisterClasses[FPR128_loRegClassID],
    VTLists + 22,
    FPR128_loSubClassMask,
    SuperRegIdxSeqs + 0,
    FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass DDDRegClass = {
    &ARM64MCRegisterClasses[DDDRegClassID],
    VTLists + 29,
    DDDSubClassMask,
    SuperRegIdxSeqs + 49,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DDDDRegClass = {
    &ARM64MCRegisterClasses[DDDDRegClassID],
    VTLists + 29,
    DDDDSubClassMask,
    SuperRegIdxSeqs + 40,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass QQRegClass = {
    &ARM64MCRegisterClasses[QQRegClassID],
    VTLists + 29,
    QQSubClassMask,
    SuperRegIdxSeqs + 45,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass QQ_with_qsub0_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQ_with_qsub0_in_FPR128_loRegClassID],
    VTLists + 29,
    QQ_with_qsub0_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 45,
    QQ_with_qsub0_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 45,
    QQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 45,
    QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQRegClass = {
    &ARM64MCRegisterClasses[QQQRegClassID],
    VTLists + 29,
    QQQSubClassMask,
    SuperRegIdxSeqs + 42,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub0_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub0_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub0_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 42,
    QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQRegClass = {
    &ARM64MCRegisterClasses[QQQQRegClassID],
    VTLists + 29,
    QQQQSubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub0_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub0_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub0_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub3_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub3_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub3_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub3_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass = {
    &ARM64MCRegisterClasses[QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClassID],
    VTLists + 29,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSubClassMask,
    SuperRegIdxSeqs + 4,
    QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loSuperclasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &ARM64::FPR8RegClass,
    &ARM64::FPR16RegClass,
    &ARM64::GPR32allRegClass,
    &ARM64::FPR32RegClass,
    &ARM64::GPR32RegClass,
    &ARM64::GPR32spRegClass,
    &ARM64::GPR32commonRegClass,
    &ARM64::CCRRegClass,
    &ARM64::GPR64allRegClass,
    &ARM64::FPR64RegClass,
    &ARM64::GPR64RegClass,
    &ARM64::GPR64spRegClass,
    &ARM64::GPR64commonRegClass,
    &ARM64::tcGPR64RegClass,
    &ARM64::DDRegClass,
    &ARM64::FPR128RegClass,
    &ARM64::FPR128_loRegClass,
    &ARM64::DDDRegClass,
    &ARM64::DDDDRegClass,
    &ARM64::QQRegClass,
    &ARM64::QQ_with_qsub0_in_FPR128_loRegClass,
    &ARM64::QQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQQRegClass,
    &ARM64::QQQ_with_qsub0_in_FPR128_loRegClass,
    &ARM64::QQQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQQRegClass,
    &ARM64::QQQQ_with_qsub0_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub3_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
    &ARM64::QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_loRegClass,
  };
}

static const TargetRegisterInfoDesc ARM64RegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned ARM64GenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[52] = {
    0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 4, 5, 6, 0, 0, 0, 1, 1, 0, 3, 3, 0, 2, 2, 0, 4, 4, 4, 0, 6, 6, 6, 0, 5, 5, 5, 0, 0, 1, 1, 2, 7, 7, 7, 0, 0, 4, 4, 5, 4, 4, 5, 
  };
  static const uint8_t Rows[8][52] = {
    { 1, 2, 3, 4, 5, 0, 7, 0, 0, 10, 11, 12, 0, 14, 0, 16, 17, 18, 0, 0, 0, 22, 23, 24, 25, 26, 27, 28, 0, 0, 0, 0, 33, 34, 35, 36, 37, 0, 39, 0, 0, 42, 0, 44, 45, 0, 47, 0, 0, 50, 0, 0, },
    { 16, 0, 4, 5, 6, 0, 17, 0, 0, 0, 0, 0, 0, 18, 0, 22, 23, 24, 0, 0, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 22, 0, 5, 6, 0, 0, 23, 0, 0, 0, 0, 0, 0, 24, 0, 19, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 19, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 25, 26, 26, 34, 30, 0, 27, 0, 0, 11, 12, 13, 0, 28, 0, 33, 35, 36, 0, 0, 0, 29, 31, 32, 33, 34, 35, 36, 0, 0, 0, 0, 29, 30, 31, 32, 50, 0, 52, 0, 0, 50, 0, 51, 47, 0, 49, 0, 0, 52, 0, 0, },
    { 33, 34, 34, 30, 0, 0, 35, 0, 0, 12, 13, 0, 0, 36, 0, 29, 31, 32, 0, 0, 0, 0, 0, 0, 29, 30, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 29, 30, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 1, 0, 2, 26, 34, 30, 7, 0, 0, 0, 0, 0, 0, 14, 0, 25, 27, 28, 29, 31, 32, 33, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 44, 50, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 52);
  --IdxB; assert(IdxB < 52);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *ARM64GenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[41][52] = {
    {	// FPR8
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// FPR16
      2,	// bsub -> FPR16
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR32all
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// FPR32
      4,	// bsub -> FPR32
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      4,	// hsub -> FPR32
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR32
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR32sp
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR32common
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// CCR
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR64all
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      9,	// sub_32 -> GPR64all
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// FPR64
      10,	// bsub -> FPR64
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      10,	// hsub -> FPR64
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      10,	// ssub -> FPR64
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR64
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      11,	// sub_32 -> GPR64
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR64sp
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      12,	// sub_32 -> GPR64sp
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// GPR64common
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      13,	// sub_32 -> GPR64common
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// tcGPR64
      0,	// bsub
      0,	// dsub
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      0,	// hsub
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      0,	// ssub
      14,	// sub_32 -> tcGPR64
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// DD
      15,	// bsub -> DD
      0,	// dsub
      15,	// dsub0 -> DD
      15,	// dsub1 -> DD
      0,	// dsub2
      0,	// dsub3
      15,	// hsub -> DD
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      15,	// ssub -> DD
      0,	// sub_32
      15,	// dsub1_then_bsub -> DD
      15,	// dsub1_then_hsub -> DD
      15,	// dsub1_then_ssub -> DD
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// FPR128
      16,	// bsub -> FPR128
      16,	// dsub -> FPR128
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      16,	// hsub -> FPR128
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      16,	// ssub -> FPR128
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// FPR128_lo
      17,	// bsub -> FPR128_lo
      17,	// dsub -> FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      17,	// hsub -> FPR128_lo
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      17,	// ssub -> FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// DDD
      18,	// bsub -> DDD
      0,	// dsub
      18,	// dsub0 -> DDD
      18,	// dsub1 -> DDD
      18,	// dsub2 -> DDD
      0,	// dsub3
      18,	// hsub -> DDD
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      18,	// ssub -> DDD
      0,	// sub_32
      18,	// dsub1_then_bsub -> DDD
      18,	// dsub1_then_hsub -> DDD
      18,	// dsub1_then_ssub -> DDD
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      18,	// dsub2_then_bsub -> DDD
      18,	// dsub2_then_hsub -> DDD
      18,	// dsub2_then_ssub -> DDD
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      18,	// dsub0_dsub1 -> DDD
      0,	// dsub0_dsub1_dsub2
      18,	// dsub1_dsub2 -> DDD
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// DDDD
      19,	// bsub -> DDDD
      0,	// dsub
      19,	// dsub0 -> DDDD
      19,	// dsub1 -> DDDD
      19,	// dsub2 -> DDDD
      19,	// dsub3 -> DDDD
      19,	// hsub -> DDDD
      0,	// qhisub
      0,	// qsub
      0,	// qsub0
      0,	// qsub1
      0,	// qsub2
      0,	// qsub3
      19,	// ssub -> DDDD
      0,	// sub_32
      19,	// dsub1_then_bsub -> DDDD
      19,	// dsub1_then_hsub -> DDDD
      19,	// dsub1_then_ssub -> DDDD
      19,	// dsub3_then_bsub -> DDDD
      19,	// dsub3_then_hsub -> DDDD
      19,	// dsub3_then_ssub -> DDDD
      19,	// dsub2_then_bsub -> DDDD
      19,	// dsub2_then_hsub -> DDDD
      19,	// dsub2_then_ssub -> DDDD
      0,	// qsub1_then_bsub
      0,	// qsub1_then_dsub
      0,	// qsub1_then_hsub
      0,	// qsub1_then_ssub
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      19,	// dsub0_dsub1 -> DDDD
      19,	// dsub0_dsub1_dsub2 -> DDDD
      19,	// dsub1_dsub2 -> DDDD
      19,	// dsub1_dsub2_dsub3 -> DDDD
      19,	// dsub2_dsub3 -> DDDD
      0,	// dsub_qsub1_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQ
      20,	// bsub -> QQ
      20,	// dsub -> QQ
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      20,	// hsub -> QQ
      0,	// qhisub
      0,	// qsub
      20,	// qsub0 -> QQ
      20,	// qsub1 -> QQ
      0,	// qsub2
      0,	// qsub3
      20,	// ssub -> QQ
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      20,	// qsub1_then_bsub -> QQ
      20,	// qsub1_then_dsub -> QQ
      20,	// qsub1_then_hsub -> QQ
      20,	// qsub1_then_ssub -> QQ
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      20,	// dsub_qsub1_then_dsub -> QQ
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQ_with_qsub0_in_FPR128_lo
      21,	// bsub -> QQ_with_qsub0_in_FPR128_lo
      21,	// dsub -> QQ_with_qsub0_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      21,	// hsub -> QQ_with_qsub0_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      21,	// qsub0 -> QQ_with_qsub0_in_FPR128_lo
      21,	// qsub1 -> QQ_with_qsub0_in_FPR128_lo
      0,	// qsub2
      0,	// qsub3
      21,	// ssub -> QQ_with_qsub0_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      21,	// qsub1_then_bsub -> QQ_with_qsub0_in_FPR128_lo
      21,	// qsub1_then_dsub -> QQ_with_qsub0_in_FPR128_lo
      21,	// qsub1_then_hsub -> QQ_with_qsub0_in_FPR128_lo
      21,	// qsub1_then_ssub -> QQ_with_qsub0_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      21,	// dsub_qsub1_then_dsub -> QQ_with_qsub0_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQ_with_qsub1_in_FPR128_lo
      22,	// bsub -> QQ_with_qsub1_in_FPR128_lo
      22,	// dsub -> QQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      22,	// hsub -> QQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      22,	// qsub0 -> QQ_with_qsub1_in_FPR128_lo
      22,	// qsub1 -> QQ_with_qsub1_in_FPR128_lo
      0,	// qsub2
      0,	// qsub3
      22,	// ssub -> QQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      22,	// qsub1_then_bsub -> QQ_with_qsub1_in_FPR128_lo
      22,	// qsub1_then_dsub -> QQ_with_qsub1_in_FPR128_lo
      22,	// qsub1_then_hsub -> QQ_with_qsub1_in_FPR128_lo
      22,	// qsub1_then_ssub -> QQ_with_qsub1_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      22,	// dsub_qsub1_then_dsub -> QQ_with_qsub1_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// bsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// dsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      23,	// hsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      23,	// qsub0 -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// qsub1 -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// qsub2
      0,	// qsub3
      23,	// ssub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      23,	// qsub1_then_bsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// qsub1_then_dsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// qsub1_then_hsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      23,	// qsub1_then_ssub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      0,	// qsub2_then_bsub
      0,	// qsub2_then_dsub
      0,	// qsub2_then_hsub
      0,	// qsub2_then_ssub
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      23,	// dsub_qsub1_then_dsub -> QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub0_qsub1
      0,	// qsub0_qsub1_qsub2
      0,	// qsub1_qsub2
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      0,	// qsub1_then_dsub_qsub2_then_dsub
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ
      24,	// bsub -> QQQ
      24,	// dsub -> QQQ
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      24,	// hsub -> QQQ
      0,	// qhisub
      0,	// qsub
      24,	// qsub0 -> QQQ
      24,	// qsub1 -> QQQ
      24,	// qsub2 -> QQQ
      0,	// qsub3
      24,	// ssub -> QQQ
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      24,	// qsub1_then_bsub -> QQQ
      24,	// qsub1_then_dsub -> QQQ
      24,	// qsub1_then_hsub -> QQQ
      24,	// qsub1_then_ssub -> QQQ
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      24,	// qsub2_then_bsub -> QQQ
      24,	// qsub2_then_dsub -> QQQ
      24,	// qsub2_then_hsub -> QQQ
      24,	// qsub2_then_ssub -> QQQ
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      24,	// dsub_qsub1_then_dsub -> QQQ
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      24,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ
      24,	// qsub0_qsub1 -> QQQ
      0,	// qsub0_qsub1_qsub2
      24,	// qsub1_qsub2 -> QQQ
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      24,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub0_in_FPR128_lo
      25,	// bsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// dsub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      25,	// hsub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      25,	// qsub0 -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub1 -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub2 -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qsub3
      25,	// ssub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      25,	// qsub1_then_bsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub1_then_hsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub1_then_ssub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      25,	// qsub2_then_bsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub2_then_hsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub2_then_ssub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      25,	// dsub_qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      25,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo
      25,	// qsub0_qsub1 -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      25,	// qsub1_qsub2 -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      25,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub1_in_FPR128_lo
      26,	// bsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// dsub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      26,	// hsub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      26,	// qsub0 -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub1 -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub2 -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub3
      26,	// ssub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      26,	// qsub1_then_bsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub1_then_dsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub1_then_hsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub1_then_ssub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      26,	// qsub2_then_bsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub2_then_hsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub2_then_ssub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      26,	// dsub_qsub1_then_dsub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      26,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo
      26,	// qsub0_qsub1 -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      26,	// qsub1_qsub2 -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      26,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub2_in_FPR128_lo
      27,	// bsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// dsub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      27,	// hsub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      27,	// qsub0 -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub1 -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub2 -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3
      27,	// ssub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      27,	// qsub1_then_bsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub1_then_dsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub1_then_hsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub1_then_ssub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      27,	// qsub2_then_bsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub2_then_dsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub2_then_hsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub2_then_ssub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      27,	// dsub_qsub1_then_dsub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      27,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub2_in_FPR128_lo
      27,	// qsub0_qsub1 -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      27,	// qsub1_qsub2 -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      27,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      28,	// hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      28,	// qsub0 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub1 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub2 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub3
      28,	// ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      28,	// qsub1_then_bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub1_then_hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub1_then_ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      28,	// qsub2_then_bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub2_then_hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub2_then_ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      28,	// dsub_qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      28,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      28,	// qsub0_qsub1 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      28,	// qsub1_qsub2 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      28,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// bsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      29,	// hsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      29,	// qsub0 -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub1 -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub2 -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3
      29,	// ssub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      29,	// qsub1_then_bsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub1_then_dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub1_then_hsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub1_then_ssub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      29,	// qsub2_then_bsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub2_then_hsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub2_then_ssub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      29,	// dsub_qsub1_then_dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      29,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      29,	// qsub0_qsub1 -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      29,	// qsub1_qsub2 -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      29,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      30,	// hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      30,	// qsub0 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub1 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub2 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3
      30,	// ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      30,	// qsub1_then_bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub1_then_hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub1_then_ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub3_then_bsub
      0,	// qsub3_then_dsub
      0,	// qsub3_then_hsub
      0,	// qsub3_then_ssub
      30,	// qsub2_then_bsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub2_then_hsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub2_then_ssub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      30,	// dsub_qsub1_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      30,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      30,	// qsub0_qsub1 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub0_qsub1_qsub2
      30,	// qsub1_qsub2 -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_qsub2_qsub3
      0,	// qsub2_qsub3
      30,	// qsub1_then_dsub_qsub2_then_dsub -> QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
      0,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub
      0,	// qsub2_then_dsub_qsub3_then_dsub
    },
    {	// QQQQ
      31,	// bsub -> QQQQ
      31,	// dsub -> QQQQ
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      31,	// hsub -> QQQQ
      0,	// qhisub
      0,	// qsub
      31,	// qsub0 -> QQQQ
      31,	// qsub1 -> QQQQ
      31,	// qsub2 -> QQQQ
      31,	// qsub3 -> QQQQ
      31,	// ssub -> QQQQ
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      31,	// qsub1_then_bsub -> QQQQ
      31,	// qsub1_then_dsub -> QQQQ
      31,	// qsub1_then_hsub -> QQQQ
      31,	// qsub1_then_ssub -> QQQQ
      31,	// qsub3_then_bsub -> QQQQ
      31,	// qsub3_then_dsub -> QQQQ
      31,	// qsub3_then_hsub -> QQQQ
      31,	// qsub3_then_ssub -> QQQQ
      31,	// qsub2_then_bsub -> QQQQ
      31,	// qsub2_then_dsub -> QQQQ
      31,	// qsub2_then_hsub -> QQQQ
      31,	// qsub2_then_ssub -> QQQQ
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      31,	// dsub_qsub1_then_dsub -> QQQQ
      31,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ
      31,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ
      31,	// qsub0_qsub1 -> QQQQ
      31,	// qsub0_qsub1_qsub2 -> QQQQ
      31,	// qsub1_qsub2 -> QQQQ
      31,	// qsub1_qsub2_qsub3 -> QQQQ
      31,	// qsub2_qsub3 -> QQQQ
      31,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ
      31,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ
      31,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ
    },
    {	// QQQQ_with_qsub0_in_FPR128_lo
      32,	// bsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// dsub -> QQQQ_with_qsub0_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      32,	// hsub -> QQQQ_with_qsub0_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      32,	// qsub0 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub3 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// ssub -> QQQQ_with_qsub0_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      32,	// qsub1_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub3_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub3_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub3_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      32,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub0_qsub1 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
      32,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo
    },
    {	// QQQQ_with_qsub1_in_FPR128_lo
      33,	// bsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// dsub -> QQQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      33,	// hsub -> QQQQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      33,	// qsub0 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub3 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// ssub -> QQQQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      33,	// qsub1_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub3_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub3_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub3_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      33,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub0_qsub1 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
      33,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo
    },
    {	// QQQQ_with_qsub2_in_FPR128_lo
      34,	// bsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// dsub -> QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      34,	// hsub -> QQQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      34,	// qsub0 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub3 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// ssub -> QQQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      34,	// qsub1_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub3_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub3_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub3_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      34,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub0_qsub1 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_qsub2 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_qsub3 -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
      34,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo
    },
    {	// QQQQ_with_qsub3_in_FPR128_lo
      35,	// bsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// dsub -> QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      35,	// hsub -> QQQQ_with_qsub3_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      35,	// qsub0 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub3 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// ssub -> QQQQ_with_qsub3_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      35,	// qsub1_then_bsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_then_hsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_then_ssub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub3_then_bsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub3_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub3_then_hsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub3_then_ssub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_then_bsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_then_hsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_then_ssub -> QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      35,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub0_qsub1 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_qsub2 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_qsub3 -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
      35,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub3_in_FPR128_lo
    },
    {	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      36,	// hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      36,	// qsub0 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      36,	// qsub1_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub3_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub3_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub3_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      36,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub0_qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
      36,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
    },
    {	// QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      37,	// hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      37,	// qsub0 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      37,	// qsub1_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub3_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub3_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub3_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      37,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub0_qsub1 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      37,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    },
    {	// QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// bsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      38,	// hsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      38,	// qsub0 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub3 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// ssub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      38,	// qsub1_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub3_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub3_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub3_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_then_bsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_then_hsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_then_ssub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      38,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub0_qsub1 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_qsub2 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_qsub3 -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      38,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    },
    {	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      39,	// hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      39,	// qsub0 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      39,	// qsub1_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub3_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub3_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub3_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      39,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub0_qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
      39,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    },
    {	// QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      40,	// hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      40,	// qsub0 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      40,	// qsub1_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub3_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub3_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub3_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_then_bsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_then_hsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_then_ssub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      40,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub0_qsub1 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_qsub2 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_qsub3 -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      40,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    },
    {	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0
      0,	// dsub1
      0,	// dsub2
      0,	// dsub3
      41,	// hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// qhisub
      0,	// qsub
      41,	// qsub0 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// sub_32
      0,	// dsub1_then_bsub
      0,	// dsub1_then_hsub
      0,	// dsub1_then_ssub
      0,	// dsub3_then_bsub
      0,	// dsub3_then_hsub
      0,	// dsub3_then_ssub
      0,	// dsub2_then_bsub
      0,	// dsub2_then_hsub
      0,	// dsub2_then_ssub
      41,	// qsub1_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub3_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub3_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub3_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_then_bsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_then_hsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_then_ssub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      0,	// dsub0_dsub1
      0,	// dsub0_dsub1_dsub2
      0,	// dsub1_dsub2
      0,	// dsub1_dsub2_dsub3
      0,	// dsub2_dsub3
      41,	// dsub_qsub1_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// dsub_qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// dsub_qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub0_qsub1 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub0_qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_qsub2 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_qsub3 -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_then_dsub_qsub2_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub1_then_dsub_qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
      41,	// qsub2_then_dsub_qsub3_then_dsub -> QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 52 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &ARM64GenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// FPR8
    {1, 32},  	// FPR16
    {1, 33},  	// GPR32all
    {1, 32},  	// FPR32
    {1, 32},  	// GPR32
    {1, 32},  	// GPR32sp
    {1, 31},  	// GPR32common
    {0, 0},  	// CCR
    {1, 33},  	// GPR64all
    {1, 32},  	// FPR64
    {1, 32},  	// GPR64
    {1, 32},  	// GPR64sp
    {1, 31},  	// GPR64common
    {1, 21},  	// tcGPR64
    {2, 32},  	// DD
    {1, 32},  	// FPR128
    {1, 16},  	// FPR128_lo
    {3, 32},  	// DDD
    {4, 32},  	// DDDD
    {2, 32},  	// QQ
    {2, 17},  	// QQ_with_qsub0_in_FPR128_lo
    {2, 17},  	// QQ_with_qsub1_in_FPR128_lo
    {2, 16},  	// QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
    {3, 32},  	// QQQ
    {3, 18},  	// QQQ_with_qsub0_in_FPR128_lo
    {3, 18},  	// QQQ_with_qsub1_in_FPR128_lo
    {3, 18},  	// QQQ_with_qsub2_in_FPR128_lo
    {3, 17},  	// QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
    {3, 17},  	// QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
    {3, 16},  	// QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
    {4, 32},  	// QQQQ
    {4, 19},  	// QQQQ_with_qsub0_in_FPR128_lo
    {4, 19},  	// QQQQ_with_qsub1_in_FPR128_lo
    {4, 19},  	// QQQQ_with_qsub2_in_FPR128_lo
    {4, 19},  	// QQQQ_with_qsub3_in_FPR128_lo
    {4, 18},  	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
    {4, 18},  	// QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    {4, 18},  	// QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    {4, 17},  	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    {4, 17},  	// QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    {4, 16},  	// QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned ARM64GenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 66 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned ARM64GenRegisterInfo::getNumRegPressureSets() const {
  return 4;
}

// Get the name of this register unit pressure set.
const char *ARM64GenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "tcGPR64",
    "QQQQ_with_qsub0_in_FPR128_lo+QQQQ_with_qsub3_in_FPR128_lo",
    "FPR8",
    "GPR32all",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned ARM64GenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    21,  	// 0: tcGPR64
    22,  	// 1: QQQQ_with_qsub0_in_FPR128_lo+QQQQ_with_qsub3_in_FPR128_lo
    32,  	// 2: FPR8
    33,  	// 3: GPR32all
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    2,  -1,  	// #0 FPR8
    2,  -1,  	// #2 FPR16
    3,  -1,  	// #4 GPR32all
    2,  -1,  	// #6 FPR32
    3,  -1,  	// #8 GPR32
    3,  -1,  	// #10 GPR32sp
    3,  -1,  	// #12 GPR32common
    -1,  	// #14 CCR
    3,  -1,  	// #15 GPR64all
    2,  -1,  	// #17 FPR64
    3,  -1,  	// #19 GPR64
    3,  -1,  	// #21 GPR64sp
    3,  -1,  	// #23 GPR64common
    0,  3,  -1,  	// #25 tcGPR64
    2,  -1,  	// #28 DD
    2,  -1,  	// #30 FPR128
    1,  2,  -1,  	// #32 FPR128_lo
    2,  -1,  	// #35 DDD
    2,  -1,  	// #37 DDDD
    2,  -1,  	// #39 QQ
    1,  2,  -1,  	// #41 QQ_with_qsub0_in_FPR128_lo
    1,  2,  -1,  	// #44 QQ_with_qsub1_in_FPR128_lo
    1,  2,  -1,  	// #47 QQ_with_qsub0_in_FPR128_lo_and_QQ_with_qsub1_in_FPR128_lo
    2,  -1,  	// #50 QQQ
    1,  2,  -1,  	// #52 QQQ_with_qsub0_in_FPR128_lo
    1,  2,  -1,  	// #55 QQQ_with_qsub1_in_FPR128_lo
    1,  2,  -1,  	// #58 QQQ_with_qsub2_in_FPR128_lo
    1,  2,  -1,  	// #61 QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub1_in_FPR128_lo
    1,  2,  -1,  	// #64 QQQ_with_qsub1_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
    1,  2,  -1,  	// #67 QQQ_with_qsub0_in_FPR128_lo_and_QQQ_with_qsub2_in_FPR128_lo
    2,  -1,  	// #70 QQQQ
    1,  2,  -1,  	// #72 QQQQ_with_qsub0_in_FPR128_lo
    1,  2,  -1,  	// #75 QQQQ_with_qsub1_in_FPR128_lo
    1,  2,  -1,  	// #78 QQQQ_with_qsub2_in_FPR128_lo
    1,  2,  -1,  	// #81 QQQQ_with_qsub3_in_FPR128_lo
    1,  2,  -1,  	// #84 QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub1_in_FPR128_lo
    1,  2,  -1,  	// #87 QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    1,  2,  -1,  	// #90 QQQQ_with_qsub2_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    1,  2,  -1,  	// #93 QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub2_in_FPR128_lo
    1,  2,  -1,  	// #96 QQQQ_with_qsub1_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    1,  2,  -1,  	// #99 QQQQ_with_qsub0_in_FPR128_lo_and_QQQQ_with_qsub3_in_FPR128_lo
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* ARM64GenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,2,4,6,8,10,12,14,15,17,19,21,23,25,28,30,32,35,37,39,41,44,47,50,52,55,58,61,64,67,70,72,75,78,81,84,87,90,93,96,99,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* ARM64GenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 66 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    14,25,25,4,4,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,32,32,32,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,4,4,4,4,4,4,4,4,4,4,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc ARM64RegDesc[];
extern const MCPhysReg ARM64RegDiffLists[];
extern const char ARM64RegStrings[];
extern const uint16_t ARM64RegUnitRoots[][2];
extern const uint16_t ARM64SubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits ARM64SubRegIdxRanges[];
extern const uint16_t ARM64RegEncodingTable[];
// ARM64 Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARM64DwarfFlavour0Dwarf2L[];
extern const unsigned ARM64DwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64EHFlavour0Dwarf2L[];
extern const unsigned ARM64EHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64DwarfFlavour0L2Dwarf[];
extern const unsigned ARM64DwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARM64EHFlavour0L2Dwarf[];
extern const unsigned ARM64EHFlavour0L2DwarfSize;

ARM64GenRegisterInfo::
ARM64GenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(ARM64RegInfoDesc, RegisterClasses, RegisterClasses+41,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xfffffff6) {
  InitMCRegisterInfo(ARM64RegDesc, 420, RA, PC,
                     ARM64MCRegisterClasses, 41,
                     ARM64RegUnitRoots,
                     66,
                     ARM64RegDiffLists,
                     ARM64RegStrings,
                     ARM64SubRegIdxLists,
                     53,
                     ARM64SubRegIdxRanges,
                     ARM64RegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARM64DwarfFlavour0Dwarf2L, ARM64DwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARM64EHFlavour0Dwarf2L, ARM64EHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARM64DwarfFlavour0L2Dwarf, ARM64DwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARM64EHFlavour0L2Dwarf, ARM64EHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_ARM64_AAPCS_SaveList[] = { ARM64::LR, ARM64::FP, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::D8, ARM64::D9, ARM64::D10, ARM64::D11, ARM64::D12, ARM64::D13, ARM64::D14, ARM64::D15, 0 };
static const uint32_t CSR_ARM64_AAPCS_RegMask[] = { 0x00ff000c, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00ff0000, 0xf8000000, 0xfc00007f, 0x0007f00f, 0x0001f000, 0x0003f000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_ARM64_AAPCS_ThisReturn_SaveList[] = { ARM64::LR, ARM64::FP, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::D8, ARM64::D9, ARM64::D10, ARM64::D11, ARM64::D12, ARM64::D13, ARM64::D14, ARM64::D15, ARM64::X0, 0 };
static const uint32_t CSR_ARM64_AAPCS_ThisReturn_RegMask[] = { 0x00ff000c, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00ff0000, 0xf8000100, 0xfc0000ff, 0x0007f00f, 0x0001f000, 0x0003f000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_ARM64_TLS_Darwin_SaveList[] = { ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::Q0, ARM64::Q1, ARM64::Q2, ARM64::Q3, ARM64::Q4, ARM64::Q5, ARM64::Q6, ARM64::Q7, ARM64::Q8, ARM64::Q9, ARM64::Q10, ARM64::Q11, ARM64::Q12, ARM64::Q13, ARM64::Q14, ARM64::Q15, ARM64::Q16, ARM64::Q17, ARM64::Q18, ARM64::Q19, ARM64::Q20, ARM64::Q21, ARM64::Q22, ARM64::Q23, ARM64::Q24, ARM64::Q25, ARM64::Q26, ARM64::Q27, ARM64::Q28, ARM64::Q29, ARM64::Q30, ARM64::Q31, 0 };
static const uint32_t CSR_ARM64_TLS_Darwin_RegMask[] = { 0xffffff04, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfcfffeff, 0xfe7fff3f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0000000f, };
static const MCPhysReg CSR_ARM64_TLS_ELF_SaveList[] = { ARM64::X1, ARM64::X2, ARM64::X3, ARM64::X4, ARM64::X5, ARM64::X6, ARM64::X7, ARM64::X8, ARM64::X9, ARM64::X10, ARM64::X11, ARM64::X12, ARM64::X13, ARM64::X14, ARM64::X15, ARM64::X16, ARM64::X17, ARM64::X18, ARM64::X19, ARM64::X20, ARM64::X21, ARM64::X22, ARM64::X23, ARM64::X24, ARM64::X25, ARM64::X26, ARM64::X27, ARM64::X28, ARM64::FP, ARM64::Q0, ARM64::Q1, ARM64::Q2, ARM64::Q3, ARM64::Q4, ARM64::Q5, ARM64::Q6, ARM64::Q7, ARM64::Q8, ARM64::Q9, ARM64::Q10, ARM64::Q11, ARM64::Q12, ARM64::Q13, ARM64::Q14, ARM64::Q15, ARM64::Q16, ARM64::Q17, ARM64::Q18, ARM64::Q19, ARM64::Q20, ARM64::Q21, ARM64::Q22, ARM64::Q23, ARM64::Q24, ARM64::Q25, ARM64::Q26, ARM64::Q27, ARM64::Q28, ARM64::Q29, ARM64::Q30, ARM64::Q31, 0 };
static const uint32_t CSR_ARM64_TLS_ELF_RegMask[] = { 0xffffff04, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfffffeff, 0xffffff3f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0000000f, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

