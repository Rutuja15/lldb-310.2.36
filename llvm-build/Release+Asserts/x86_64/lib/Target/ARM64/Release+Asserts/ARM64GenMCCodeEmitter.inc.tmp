/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Machine Code Emitter                                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t ARM64MCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1310767104),	// ABSv16i8
    UINT64_C(1591785472),	// ABSv1i64
    UINT64_C(245413888),	// ABSv2i32
    UINT64_C(1323350016),	// ABSv2i64
    UINT64_C(241219584),	// ABSv4i16
    UINT64_C(1319155712),	// ABSv4i32
    UINT64_C(1314961408),	// ABSv8i16
    UINT64_C(237025280),	// ABSv8i8
    UINT64_C(973078528),	// ADCSWr
    UINT64_C(3120562176),	// ADCSXr
    UINT64_C(436207616),	// ADCWr
    UINT64_C(2583691264),	// ADCXr
    UINT64_C(245383168),	// ADDHNv2i64_v2i32
    UINT64_C(1319124992),	// ADDHNv2i64_v4i32
    UINT64_C(241188864),	// ADDHNv4i32_v4i16
    UINT64_C(1314930688),	// ADDHNv4i32_v8i16
    UINT64_C(1310736384),	// ADDHNv8i16_v16i8
    UINT64_C(236994560),	// ADDHNv8i16_v8i8
    UINT64_C(1310768128),	// ADDPv16i8
    UINT64_C(245414912),	// ADDPv2i32
    UINT64_C(1323351040),	// ADDPv2i64
    UINT64_C(1592899584),	// ADDPv2i64p
    UINT64_C(241220608),	// ADDPv4i16
    UINT64_C(1319156736),	// ADDPv4i32
    UINT64_C(1314962432),	// ADDPv8i16
    UINT64_C(237026304),	// ADDPv8i8
    UINT64_C(822083584),	// ADDSWri
    UINT64_C(0),	// ADDSWrr
    UINT64_C(721420288),	// ADDSWrs
    UINT64_C(723517440),	// ADDSWrx
    UINT64_C(2969567232),	// ADDSXri
    UINT64_C(0),	// ADDSXrr
    UINT64_C(2868903936),	// ADDSXrs
    UINT64_C(2871001088),	// ADDSXrx
    UINT64_C(2871025664),	// ADDSXrx64
    UINT64_C(1311881216),	// ADDVv16i8v
    UINT64_C(242333696),	// ADDVv4i16v
    UINT64_C(1320269824),	// ADDVv4i32v
    UINT64_C(1316075520),	// ADDVv8i16v
    UINT64_C(238139392),	// ADDVv8i8v
    UINT64_C(285212672),	// ADDWri
    UINT64_C(0),	// ADDWrr
    UINT64_C(184549376),	// ADDWrs
    UINT64_C(186646528),	// ADDWrx
    UINT64_C(2432696320),	// ADDXri
    UINT64_C(0),	// ADDXrr
    UINT64_C(2332033024),	// ADDXrs
    UINT64_C(2334130176),	// ADDXrx
    UINT64_C(2334154752),	// ADDXrx64
    UINT64_C(1310753792),	// ADDv16i8
    UINT64_C(1591772160),	// ADDv1i64
    UINT64_C(245400576),	// ADDv2i32
    UINT64_C(1323336704),	// ADDv2i64
    UINT64_C(241206272),	// ADDv4i16
    UINT64_C(1319142400),	// ADDv4i32
    UINT64_C(1314948096),	// ADDv8i16
    UINT64_C(237011968),	// ADDv8i8
    UINT64_C(0),	// ADJCALLSTACKDOWN
    UINT64_C(0),	// ADJCALLSTACKUP
    UINT64_C(268435456),	// ADR
    UINT64_C(2415919104),	// ADRP
    UINT64_C(1311266816),	// AESDrr
    UINT64_C(1311262720),	// AESErr
    UINT64_C(1311275008),	// AESIMCrr
    UINT64_C(1311270912),	// AESMCrr
    UINT64_C(1912602624),	// ANDSWri
    UINT64_C(1778384896),	// ANDSWrs
    UINT64_C(4060086272),	// ANDSXri
    UINT64_C(3925868544),	// ANDSXrs
    UINT64_C(301989888),	// ANDWri
    UINT64_C(0),	// ANDWrr
    UINT64_C(167772160),	// ANDWrs
    UINT64_C(2449473536),	// ANDXri
    UINT64_C(0),	// ANDXrr
    UINT64_C(2315255808),	// ANDXrs
    UINT64_C(1310727168),	// ANDv16i8
    UINT64_C(236985344),	// ANDv8i8
    UINT64_C(448800768),	// ASRVWr
    UINT64_C(2596284416),	// ASRVXr
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I128
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I16
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I32
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I64
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I8
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I128
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I16
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I32
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I64
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I8
    UINT64_C(0),	// ATOMIC_LOAD_AND_I128
    UINT64_C(0),	// ATOMIC_LOAD_AND_I16
    UINT64_C(0),	// ATOMIC_LOAD_AND_I32
    UINT64_C(0),	// ATOMIC_LOAD_AND_I64
    UINT64_C(0),	// ATOMIC_LOAD_AND_I8
    UINT64_C(0),	// ATOMIC_LOAD_MAX_I128
    UINT64_C(0),	// ATOMIC_LOAD_MAX_I16
    UINT64_C(0),	// ATOMIC_LOAD_MAX_I32
    UINT64_C(0),	// ATOMIC_LOAD_MAX_I64
    UINT64_C(0),	// ATOMIC_LOAD_MAX_I8
    UINT64_C(0),	// ATOMIC_LOAD_MIN_I128
    UINT64_C(0),	// ATOMIC_LOAD_MIN_I16
    UINT64_C(0),	// ATOMIC_LOAD_MIN_I32
    UINT64_C(0),	// ATOMIC_LOAD_MIN_I64
    UINT64_C(0),	// ATOMIC_LOAD_MIN_I8
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I128
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I16
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I32
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I64
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I8
    UINT64_C(0),	// ATOMIC_LOAD_OR_I128
    UINT64_C(0),	// ATOMIC_LOAD_OR_I16
    UINT64_C(0),	// ATOMIC_LOAD_OR_I32
    UINT64_C(0),	// ATOMIC_LOAD_OR_I64
    UINT64_C(0),	// ATOMIC_LOAD_OR_I8
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I128
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I16
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I32
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I64
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I8
    UINT64_C(0),	// ATOMIC_LOAD_UMAX_I128
    UINT64_C(0),	// ATOMIC_LOAD_UMAX_I16
    UINT64_C(0),	// ATOMIC_LOAD_UMAX_I32
    UINT64_C(0),	// ATOMIC_LOAD_UMAX_I64
    UINT64_C(0),	// ATOMIC_LOAD_UMAX_I8
    UINT64_C(0),	// ATOMIC_LOAD_UMIN_I128
    UINT64_C(0),	// ATOMIC_LOAD_UMIN_I16
    UINT64_C(0),	// ATOMIC_LOAD_UMIN_I32
    UINT64_C(0),	// ATOMIC_LOAD_UMIN_I64
    UINT64_C(0),	// ATOMIC_LOAD_UMIN_I8
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I128
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I16
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I32
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I64
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I8
    UINT64_C(0),	// ATOMIC_SWAP_I128
    UINT64_C(0),	// ATOMIC_SWAP_I16
    UINT64_C(0),	// ATOMIC_SWAP_I32
    UINT64_C(0),	// ATOMIC_SWAP_I64
    UINT64_C(0),	// ATOMIC_SWAP_I8
    UINT64_C(335544320),	// B
    UINT64_C(855638016),	// BFMWri
    UINT64_C(3007315968),	// BFMXri
    UINT64_C(1780482048),	// BICSWrs
    UINT64_C(3927965696),	// BICSXrs
    UINT64_C(0),	// BICWrr
    UINT64_C(169869312),	// BICWrs
    UINT64_C(0),	// BICXrr
    UINT64_C(2317352960),	// BICXrs
    UINT64_C(1314921472),	// BICv16i8
    UINT64_C(788534272),	// BICv2i32
    UINT64_C(788567040),	// BICv4i16
    UINT64_C(1862276096),	// BICv4i32
    UINT64_C(1862308864),	// BICv8i16
    UINT64_C(241179648),	// BICv8i8
    UINT64_C(1860180992),	// BIFv16i8
    UINT64_C(786439168),	// BIFv8i8
    UINT64_C(1855986688),	// BITv16i8
    UINT64_C(782244864),	// BITv8i8
    UINT64_C(2483027968),	// BL
    UINT64_C(3594452992),	// BLR
    UINT64_C(3592355840),	// BR
    UINT64_C(3558866944),	// BRK
    UINT64_C(1851792384),	// BSLv16i8
    UINT64_C(778050560),	// BSLv8i8
    UINT64_C(1409286144),	// Bcc
    UINT64_C(889192448),	// CBNZW
    UINT64_C(3036676096),	// CBNZX
    UINT64_C(872415232),	// CBZW
    UINT64_C(3019898880),	// CBZX
    UINT64_C(977274880),	// CCMNWi
    UINT64_C(977272832),	// CCMNWr
    UINT64_C(3124758528),	// CCMNXi
    UINT64_C(3124756480),	// CCMNXr
    UINT64_C(2051016704),	// CCMPWi
    UINT64_C(2051014656),	// CCMPWr
    UINT64_C(4198500352),	// CCMPXi
    UINT64_C(4198498304),	// CCMPXr
    UINT64_C(3573755999),	// CLREX
    UINT64_C(1522537472),	// CLSWr
    UINT64_C(3670021120),	// CLSXr
    UINT64_C(1310738432),	// CLSv16i8
    UINT64_C(245385216),	// CLSv2i32
    UINT64_C(241190912),	// CLSv4i16
    UINT64_C(1319127040),	// CLSv4i32
    UINT64_C(1314932736),	// CLSv8i16
    UINT64_C(236996608),	// CLSv8i8
    UINT64_C(1522536448),	// CLZWr
    UINT64_C(3670020096),	// CLZXr
    UINT64_C(1847609344),	// CLZv16i8
    UINT64_C(782256128),	// CLZv2i32
    UINT64_C(778061824),	// CLZv4i16
    UINT64_C(1855997952),	// CLZv4i32
    UINT64_C(1851803648),	// CLZv8i16
    UINT64_C(773867520),	// CLZv8i8
    UINT64_C(1847626752),	// CMEQv16i8
    UINT64_C(1310758912),	// CMEQv16i8rz
    UINT64_C(2128645120),	// CMEQv1i64
    UINT64_C(1591777280),	// CMEQv1i64rz
    UINT64_C(782273536),	// CMEQv2i32
    UINT64_C(245405696),	// CMEQv2i32rz
    UINT64_C(1860209664),	// CMEQv2i64
    UINT64_C(1323341824),	// CMEQv2i64rz
    UINT64_C(778079232),	// CMEQv4i16
    UINT64_C(241211392),	// CMEQv4i16rz
    UINT64_C(1856015360),	// CMEQv4i32
    UINT64_C(1319147520),	// CMEQv4i32rz
    UINT64_C(1851821056),	// CMEQv8i16
    UINT64_C(1314953216),	// CMEQv8i16rz
    UINT64_C(773884928),	// CMEQv8i8
    UINT64_C(237017088),	// CMEQv8i8rz
    UINT64_C(1310735360),	// CMGEv16i8
    UINT64_C(1847625728),	// CMGEv16i8rz
    UINT64_C(1591753728),	// CMGEv1i64
    UINT64_C(2128644096),	// CMGEv1i64rz
    UINT64_C(245382144),	// CMGEv2i32
    UINT64_C(782272512),	// CMGEv2i32rz
    UINT64_C(1323318272),	// CMGEv2i64
    UINT64_C(1860208640),	// CMGEv2i64rz
    UINT64_C(241187840),	// CMGEv4i16
    UINT64_C(778078208),	// CMGEv4i16rz
    UINT64_C(1319123968),	// CMGEv4i32
    UINT64_C(1856014336),	// CMGEv4i32rz
    UINT64_C(1314929664),	// CMGEv8i16
    UINT64_C(1851820032),	// CMGEv8i16rz
    UINT64_C(236993536),	// CMGEv8i8
    UINT64_C(773883904),	// CMGEv8i8rz
    UINT64_C(1310733312),	// CMGTv16i8
    UINT64_C(1310754816),	// CMGTv16i8rz
    UINT64_C(1591751680),	// CMGTv1i64
    UINT64_C(1591773184),	// CMGTv1i64rz
    UINT64_C(245380096),	// CMGTv2i32
    UINT64_C(245401600),	// CMGTv2i32rz
    UINT64_C(1323316224),	// CMGTv2i64
    UINT64_C(1323337728),	// CMGTv2i64rz
    UINT64_C(241185792),	// CMGTv4i16
    UINT64_C(241207296),	// CMGTv4i16rz
    UINT64_C(1319121920),	// CMGTv4i32
    UINT64_C(1319143424),	// CMGTv4i32rz
    UINT64_C(1314927616),	// CMGTv8i16
    UINT64_C(1314949120),	// CMGTv8i16rz
    UINT64_C(236991488),	// CMGTv8i8
    UINT64_C(237012992),	// CMGTv8i8rz
    UINT64_C(1847604224),	// CMHIv16i8
    UINT64_C(2128622592),	// CMHIv1i64
    UINT64_C(782251008),	// CMHIv2i32
    UINT64_C(1860187136),	// CMHIv2i64
    UINT64_C(778056704),	// CMHIv4i16
    UINT64_C(1855992832),	// CMHIv4i32
    UINT64_C(1851798528),	// CMHIv8i16
    UINT64_C(773862400),	// CMHIv8i8
    UINT64_C(1847606272),	// CMHSv16i8
    UINT64_C(2128624640),	// CMHSv1i64
    UINT64_C(782253056),	// CMHSv2i32
    UINT64_C(1860189184),	// CMHSv2i64
    UINT64_C(778058752),	// CMHSv4i16
    UINT64_C(1855994880),	// CMHSv4i32
    UINT64_C(1851800576),	// CMHSv8i16
    UINT64_C(773864448),	// CMHSv8i8
    UINT64_C(1847629824),	// CMLEv16i8rz
    UINT64_C(2128648192),	// CMLEv1i64rz
    UINT64_C(782276608),	// CMLEv2i32rz
    UINT64_C(1860212736),	// CMLEv2i64rz
    UINT64_C(778082304),	// CMLEv4i16rz
    UINT64_C(1856018432),	// CMLEv4i32rz
    UINT64_C(1851824128),	// CMLEv8i16rz
    UINT64_C(773888000),	// CMLEv8i8rz
    UINT64_C(1310763008),	// CMLTv16i8rz
    UINT64_C(1591781376),	// CMLTv1i64rz
    UINT64_C(245409792),	// CMLTv2i32rz
    UINT64_C(1323345920),	// CMLTv2i64rz
    UINT64_C(241215488),	// CMLTv4i16rz
    UINT64_C(1319151616),	// CMLTv4i32rz
    UINT64_C(1314957312),	// CMLTv8i16rz
    UINT64_C(237021184),	// CMLTv8i8rz
    UINT64_C(1310755840),	// CMTSTv16i8
    UINT64_C(1591774208),	// CMTSTv1i64
    UINT64_C(245402624),	// CMTSTv2i32
    UINT64_C(1323338752),	// CMTSTv2i64
    UINT64_C(241208320),	// CMTSTv4i16
    UINT64_C(1319144448),	// CMTSTv4i32
    UINT64_C(1314950144),	// CMTSTv8i16
    UINT64_C(237014016),	// CMTSTv8i8
    UINT64_C(1310742528),	// CNTv16i8
    UINT64_C(237000704),	// CNTv8i8
    UINT64_C(1577190400),	// CPYi16
    UINT64_C(1577321472),	// CPYi32
    UINT64_C(1577583616),	// CPYi64
    UINT64_C(1577124864),	// CPYi8
    UINT64_C(444596224),	// CSELWr
    UINT64_C(2592079872),	// CSELXr
    UINT64_C(444597248),	// CSINCWr
    UINT64_C(2592080896),	// CSINCXr
    UINT64_C(1518338048),	// CSINVWr
    UINT64_C(3665821696),	// CSINVXr
    UINT64_C(1518339072),	// CSNEGWr
    UINT64_C(3665822720),	// CSNEGXr
    UINT64_C(3567255553),	// DCPS1
    UINT64_C(3567255554),	// DCPS2
    UINT64_C(3567255555),	// DCPS3
    UINT64_C(3573756095),	// DMB
    UINT64_C(3602842592),	// DRPS
    UINT64_C(3573756063),	// DSB
    UINT64_C(1308691456),	// DUPv16i8gpr
    UINT64_C(1308689408),	// DUPv16i8lane
    UINT64_C(235146240),	// DUPv2i32gpr
    UINT64_C(235144192),	// DUPv2i32lane
    UINT64_C(1309150208),	// DUPv2i64gpr
    UINT64_C(1309148160),	// DUPv2i64lane
    UINT64_C(235015168),	// DUPv4i16gpr
    UINT64_C(235013120),	// DUPv4i16lane
    UINT64_C(1308888064),	// DUPv4i32gpr
    UINT64_C(1308886016),	// DUPv4i32lane
    UINT64_C(1308756992),	// DUPv8i16gpr
    UINT64_C(1308754944),	// DUPv8i16lane
    UINT64_C(234949632),	// DUPv8i8gpr
    UINT64_C(234947584),	// DUPv8i8lane
    UINT64_C(0),	// EONWrr
    UINT64_C(1243611136),	// EONWrs
    UINT64_C(0),	// EONXrr
    UINT64_C(3391094784),	// EONXrs
    UINT64_C(1375731712),	// EORWri
    UINT64_C(0),	// EORWrr
    UINT64_C(1241513984),	// EORWrs
    UINT64_C(3523215360),	// EORXri
    UINT64_C(0),	// EORXrr
    UINT64_C(3388997632),	// EORXrs
    UINT64_C(1847598080),	// EORv16i8
    UINT64_C(773856256),	// EORv8i8
    UINT64_C(3600745440),	// ERET
    UINT64_C(327155712),	// EXTRWrri
    UINT64_C(2478833664),	// EXTRXrri
    UINT64_C(1845493760),	// EXTv16i8
    UINT64_C(771751936),	// EXTv8i8
    UINT64_C(0),	// F128CSEL
    UINT64_C(2124469248),	// FABD32
    UINT64_C(2128663552),	// FABD64
    UINT64_C(782291968),	// FABDv2f32
    UINT64_C(1860228096),	// FABDv2f64
    UINT64_C(1856033792),	// FABDv4f32
    UINT64_C(509657088),	// FABSDr
    UINT64_C(505462784),	// FABSSr
    UINT64_C(245430272),	// FABSv2f32
    UINT64_C(1323366400),	// FABSv2f64
    UINT64_C(1319172096),	// FABSv4f32
    UINT64_C(2116086784),	// FACGE32
    UINT64_C(2120281088),	// FACGE64
    UINT64_C(773909504),	// FACGEv2f32
    UINT64_C(1851845632),	// FACGEv2f64
    UINT64_C(1847651328),	// FACGEv4f32
    UINT64_C(2124475392),	// FACGT32
    UINT64_C(2128669696),	// FACGT64
    UINT64_C(782298112),	// FACGTv2f32
    UINT64_C(1860234240),	// FACGTv2f64
    UINT64_C(1856039936),	// FACGTv4f32
    UINT64_C(509618176),	// FADDDrr
    UINT64_C(773903360),	// FADDPv2f32
    UINT64_C(1851839488),	// FADDPv2f64
    UINT64_C(2117130240),	// FADDPv2i32p
    UINT64_C(2121324544),	// FADDPv2i64p
    UINT64_C(1847645184),	// FADDPv4f32
    UINT64_C(505423872),	// FADDSrr
    UINT64_C(237032448),	// FADDv2f32
    UINT64_C(1314968576),	// FADDv2f64
    UINT64_C(1310774272),	// FADDv4f32
    UINT64_C(509608960),	// FCCMPDrr
    UINT64_C(509608976),	// FCCMPEDrr
    UINT64_C(505414672),	// FCCMPESrr
    UINT64_C(505414656),	// FCCMPSrr
    UINT64_C(1579213824),	// FCMEQ32
    UINT64_C(1583408128),	// FCMEQ64
    UINT64_C(1587599360),	// FCMEQv1i32rz
    UINT64_C(1591793664),	// FCMEQv1i64rz
    UINT64_C(237036544),	// FCMEQv2f32
    UINT64_C(1314972672),	// FCMEQv2f64
    UINT64_C(245422080),	// FCMEQv2i32rz
    UINT64_C(1323358208),	// FCMEQv2i64rz
    UINT64_C(1310778368),	// FCMEQv4f32
    UINT64_C(1319163904),	// FCMEQv4i32rz
    UINT64_C(2116084736),	// FCMGE32
    UINT64_C(2120279040),	// FCMGE64
    UINT64_C(2124466176),	// FCMGEv1i32rz
    UINT64_C(2128660480),	// FCMGEv1i64rz
    UINT64_C(773907456),	// FCMGEv2f32
    UINT64_C(1851843584),	// FCMGEv2f64
    UINT64_C(782288896),	// FCMGEv2i32rz
    UINT64_C(1860225024),	// FCMGEv2i64rz
    UINT64_C(1847649280),	// FCMGEv4f32
    UINT64_C(1856030720),	// FCMGEv4i32rz
    UINT64_C(2124473344),	// FCMGT32
    UINT64_C(2128667648),	// FCMGT64
    UINT64_C(1587595264),	// FCMGTv1i32rz
    UINT64_C(1591789568),	// FCMGTv1i64rz
    UINT64_C(782296064),	// FCMGTv2f32
    UINT64_C(1860232192),	// FCMGTv2f64
    UINT64_C(245417984),	// FCMGTv2i32rz
    UINT64_C(1323354112),	// FCMGTv2i64rz
    UINT64_C(1856037888),	// FCMGTv4f32
    UINT64_C(1319159808),	// FCMGTv4i32rz
    UINT64_C(2124470272),	// FCMLEv1i32rz
    UINT64_C(2128664576),	// FCMLEv1i64rz
    UINT64_C(782292992),	// FCMLEv2i32rz
    UINT64_C(1860229120),	// FCMLEv2i64rz
    UINT64_C(1856034816),	// FCMLEv4i32rz
    UINT64_C(1587603456),	// FCMLTv1i32rz
    UINT64_C(1591797760),	// FCMLTv1i64rz
    UINT64_C(245426176),	// FCMLTv2i32rz
    UINT64_C(1323362304),	// FCMLTv2i64rz
    UINT64_C(1319168000),	// FCMLTv4i32rz
    UINT64_C(509616136),	// FCMPDri
    UINT64_C(509616128),	// FCMPDrr
    UINT64_C(509616152),	// FCMPEDri
    UINT64_C(509616144),	// FCMPEDrr
    UINT64_C(505421848),	// FCMPESri
    UINT64_C(505421840),	// FCMPESrr
    UINT64_C(505421832),	// FCMPSri
    UINT64_C(505421824),	// FCMPSrr
    UINT64_C(509611008),	// FCSELDrrr
    UINT64_C(505416704),	// FCSELSrrr
    UINT64_C(507772928),	// FCVTASSWDri
    UINT64_C(503578624),	// FCVTASSWSri
    UINT64_C(2655256576),	// FCVTASSXDri
    UINT64_C(2651062272),	// FCVTASSXSri
    UINT64_C(509870080),	// FCVTASUWDr
    UINT64_C(505675776),	// FCVTASUWSr
    UINT64_C(2657353728),	// FCVTASUXDr
    UINT64_C(2653159424),	// FCVTASUXSr
    UINT64_C(1579272192),	// FCVTASv1i32
    UINT64_C(1583466496),	// FCVTASv1i64
    UINT64_C(237094912),	// FCVTASv2f32
    UINT64_C(1315031040),	// FCVTASv2f64
    UINT64_C(1310836736),	// FCVTASv4f32
    UINT64_C(507838464),	// FCVTAUSWDri
    UINT64_C(503644160),	// FCVTAUSWSri
    UINT64_C(2655322112),	// FCVTAUSXDri
    UINT64_C(2651127808),	// FCVTAUSXSri
    UINT64_C(509935616),	// FCVTAUUWDr
    UINT64_C(505741312),	// FCVTAUUWSr
    UINT64_C(2657419264),	// FCVTAUUXDr
    UINT64_C(2653224960),	// FCVTAUUXSr
    UINT64_C(2116143104),	// FCVTAUv1i32
    UINT64_C(2120337408),	// FCVTAUv1i64
    UINT64_C(773965824),	// FCVTAUv2f32
    UINT64_C(1851901952),	// FCVTAUv2f64
    UINT64_C(1847707648),	// FCVTAUv4f32
    UINT64_C(518176768),	// FCVTDHr
    UINT64_C(505593856),	// FCVTDSr
    UINT64_C(509853696),	// FCVTHDr
    UINT64_C(505659392),	// FCVTHSr
    UINT64_C(241268736),	// FCVTLv2i32
    UINT64_C(237074432),	// FCVTLv4i16
    UINT64_C(1315010560),	// FCVTLv4i32
    UINT64_C(1310816256),	// FCVTLv8i16
    UINT64_C(508559360),	// FCVTMSSWDri
    UINT64_C(504365056),	// FCVTMSSWSri
    UINT64_C(2656043008),	// FCVTMSSXDri
    UINT64_C(2651848704),	// FCVTMSSXSri
    UINT64_C(510656512),	// FCVTMSUWDr
    UINT64_C(506462208),	// FCVTMSUWSr
    UINT64_C(2658140160),	// FCVTMSUXDr
    UINT64_C(2653945856),	// FCVTMSUXSr
    UINT64_C(1579268096),	// FCVTMSv1i32
    UINT64_C(1583462400),	// FCVTMSv1i64
    UINT64_C(237090816),	// FCVTMSv2f32
    UINT64_C(1315026944),	// FCVTMSv2f64
    UINT64_C(1310832640),	// FCVTMSv4f32
    UINT64_C(508624896),	// FCVTMUSWDri
    UINT64_C(504430592),	// FCVTMUSWSri
    UINT64_C(2656108544),	// FCVTMUSXDri
    UINT64_C(2651914240),	// FCVTMUSXSri
    UINT64_C(510722048),	// FCVTMUUWDr
    UINT64_C(506527744),	// FCVTMUUWSr
    UINT64_C(2658205696),	// FCVTMUUXDr
    UINT64_C(2654011392),	// FCVTMUUXSr
    UINT64_C(2116139008),	// FCVTMUv1i32
    UINT64_C(2120333312),	// FCVTMUv1i64
    UINT64_C(773961728),	// FCVTMUv2f32
    UINT64_C(1851897856),	// FCVTMUv2f64
    UINT64_C(1847703552),	// FCVTMUv4f32
    UINT64_C(507510784),	// FCVTNSSWDri
    UINT64_C(503316480),	// FCVTNSSWSri
    UINT64_C(2654994432),	// FCVTNSSXDri
    UINT64_C(2650800128),	// FCVTNSSXSri
    UINT64_C(509607936),	// FCVTNSUWDr
    UINT64_C(505413632),	// FCVTNSUWSr
    UINT64_C(2657091584),	// FCVTNSUXDr
    UINT64_C(2652897280),	// FCVTNSUXSr
    UINT64_C(1579264000),	// FCVTNSv1i32
    UINT64_C(1583458304),	// FCVTNSv1i64
    UINT64_C(237086720),	// FCVTNSv2f32
    UINT64_C(1315022848),	// FCVTNSv2f64
    UINT64_C(1310828544),	// FCVTNSv4f32
    UINT64_C(507576320),	// FCVTNUSWDri
    UINT64_C(503382016),	// FCVTNUSWSri
    UINT64_C(2655059968),	// FCVTNUSXDri
    UINT64_C(2650865664),	// FCVTNUSXSri
    UINT64_C(509673472),	// FCVTNUUWDr
    UINT64_C(505479168),	// FCVTNUUWSr
    UINT64_C(2657157120),	// FCVTNUUXDr
    UINT64_C(2652962816),	// FCVTNUUXSr
    UINT64_C(2116134912),	// FCVTNUv1i32
    UINT64_C(2120329216),	// FCVTNUv1i64
    UINT64_C(773957632),	// FCVTNUv2f32
    UINT64_C(1851893760),	// FCVTNUv2f64
    UINT64_C(1847699456),	// FCVTNUv4f32
    UINT64_C(241264640),	// FCVTNv2i32
    UINT64_C(237070336),	// FCVTNv4i16
    UINT64_C(1315006464),	// FCVTNv4i32
    UINT64_C(1310812160),	// FCVTNv8i16
    UINT64_C(508035072),	// FCVTPSSWDri
    UINT64_C(503840768),	// FCVTPSSWSri
    UINT64_C(2655518720),	// FCVTPSSXDri
    UINT64_C(2651324416),	// FCVTPSSXSri
    UINT64_C(510132224),	// FCVTPSUWDr
    UINT64_C(505937920),	// FCVTPSUWSr
    UINT64_C(2657615872),	// FCVTPSUXDr
    UINT64_C(2653421568),	// FCVTPSUXSr
    UINT64_C(1587652608),	// FCVTPSv1i32
    UINT64_C(1591846912),	// FCVTPSv1i64
    UINT64_C(245475328),	// FCVTPSv2f32
    UINT64_C(1323411456),	// FCVTPSv2f64
    UINT64_C(1319217152),	// FCVTPSv4f32
    UINT64_C(508100608),	// FCVTPUSWDri
    UINT64_C(503906304),	// FCVTPUSWSri
    UINT64_C(2655584256),	// FCVTPUSXDri
    UINT64_C(2651389952),	// FCVTPUSXSri
    UINT64_C(510197760),	// FCVTPUUWDr
    UINT64_C(506003456),	// FCVTPUUWSr
    UINT64_C(2657681408),	// FCVTPUUXDr
    UINT64_C(2653487104),	// FCVTPUUXSr
    UINT64_C(2124523520),	// FCVTPUv1i32
    UINT64_C(2128717824),	// FCVTPUv1i64
    UINT64_C(782346240),	// FCVTPUv2f32
    UINT64_C(1860282368),	// FCVTPUv2f64
    UINT64_C(1856088064),	// FCVTPUv4f32
    UINT64_C(509755392),	// FCVTSDr
    UINT64_C(518144000),	// FCVTSHr
    UINT64_C(2120312832),	// FCVTXNv1i64
    UINT64_C(778135552),	// FCVTXNv2f32
    UINT64_C(1851877376),	// FCVTXNv4f32
    UINT64_C(509083648),	// FCVTZSSWDri
    UINT64_C(504889344),	// FCVTZSSWSri
    UINT64_C(2656567296),	// FCVTZSSXDri
    UINT64_C(2652372992),	// FCVTZSSXSri
    UINT64_C(511180800),	// FCVTZSUWDr
    UINT64_C(506986496),	// FCVTZSUWSr
    UINT64_C(2658664448),	// FCVTZSUXDr
    UINT64_C(2654470144),	// FCVTZSUXSr
    UINT64_C(1598094336),	// FCVTZSd
    UINT64_C(1595997184),	// FCVTZSs
    UINT64_C(1587656704),	// FCVTZSv1i32
    UINT64_C(1591851008),	// FCVTZSv1i64
    UINT64_C(245479424),	// FCVTZSv2f32
    UINT64_C(1323415552),	// FCVTZSv2f64
    UINT64_C(253819904),	// FCVTZSv2i32_shift
    UINT64_C(1329658880),	// FCVTZSv2i64_shift
    UINT64_C(1319221248),	// FCVTZSv4f32
    UINT64_C(1327561728),	// FCVTZSv4i32_shift
    UINT64_C(509149184),	// FCVTZUSWDri
    UINT64_C(504954880),	// FCVTZUSWSri
    UINT64_C(2656632832),	// FCVTZUSXDri
    UINT64_C(2652438528),	// FCVTZUSXSri
    UINT64_C(511246336),	// FCVTZUUWDr
    UINT64_C(507052032),	// FCVTZUUWSr
    UINT64_C(2658729984),	// FCVTZUUXDr
    UINT64_C(2654535680),	// FCVTZUUXSr
    UINT64_C(2134965248),	// FCVTZUd
    UINT64_C(2132868096),	// FCVTZUs
    UINT64_C(2124527616),	// FCVTZUv1i32
    UINT64_C(2128721920),	// FCVTZUv1i64
    UINT64_C(782350336),	// FCVTZUv2f32
    UINT64_C(1860286464),	// FCVTZUv2f64
    UINT64_C(790690816),	// FCVTZUv2i32_shift
    UINT64_C(1866529792),	// FCVTZUv2i64_shift
    UINT64_C(1856092160),	// FCVTZUv4f32
    UINT64_C(1864432640),	// FCVTZUv4i32_shift
    UINT64_C(509614080),	// FDIVDrr
    UINT64_C(505419776),	// FDIVSrr
    UINT64_C(773913600),	// FDIVv2f32
    UINT64_C(1851849728),	// FDIVv2f64
    UINT64_C(1847655424),	// FDIVv4f32
    UINT64_C(524288000),	// FMADDDrrr
    UINT64_C(520093696),	// FMADDSrrr
    UINT64_C(509626368),	// FMAXDrr
    UINT64_C(509634560),	// FMAXNMDrr
    UINT64_C(773899264),	// FMAXNMPv2f32
    UINT64_C(1851835392),	// FMAXNMPv2f64
    UINT64_C(2117126144),	// FMAXNMPv2i32p
    UINT64_C(2121320448),	// FMAXNMPv2i64p
    UINT64_C(1847641088),	// FMAXNMPv4f32
    UINT64_C(505440256),	// FMAXNMSrr
    UINT64_C(1848690688),	// FMAXNMVv4i32v
    UINT64_C(237028352),	// FMAXNMv2f32
    UINT64_C(1314964480),	// FMAXNMv2f64
    UINT64_C(1310770176),	// FMAXNMv4f32
    UINT64_C(773911552),	// FMAXPv2f32
    UINT64_C(1851847680),	// FMAXPv2f64
    UINT64_C(2117138432),	// FMAXPv2i32p
    UINT64_C(2121332736),	// FMAXPv2i64p
    UINT64_C(1847653376),	// FMAXPv4f32
    UINT64_C(505432064),	// FMAXSrr
    UINT64_C(1848702976),	// FMAXVv4i32v
    UINT64_C(237040640),	// FMAXv2f32
    UINT64_C(1314976768),	// FMAXv2f64
    UINT64_C(1310782464),	// FMAXv4f32
    UINT64_C(509630464),	// FMINDrr
    UINT64_C(509638656),	// FMINNMDrr
    UINT64_C(782287872),	// FMINNMPv2f32
    UINT64_C(1860224000),	// FMINNMPv2f64
    UINT64_C(2125514752),	// FMINNMPv2i32p
    UINT64_C(2129709056),	// FMINNMPv2i64p
    UINT64_C(1856029696),	// FMINNMPv4f32
    UINT64_C(505444352),	// FMINNMSrr
    UINT64_C(1857079296),	// FMINNMVv4i32v
    UINT64_C(245416960),	// FMINNMv2f32
    UINT64_C(1323353088),	// FMINNMv2f64
    UINT64_C(1319158784),	// FMINNMv4f32
    UINT64_C(782300160),	// FMINPv2f32
    UINT64_C(1860236288),	// FMINPv2f64
    UINT64_C(2125527040),	// FMINPv2i32p
    UINT64_C(2129721344),	// FMINPv2i64p
    UINT64_C(1856041984),	// FMINPv4f32
    UINT64_C(505436160),	// FMINSrr
    UINT64_C(1857091584),	// FMINVv4i32v
    UINT64_C(245429248),	// FMINv2f32
    UINT64_C(1323365376),	// FMINv2f64
    UINT64_C(1319171072),	// FMINv4f32
    UINT64_C(1602228224),	// FMLAv1i32_indexed
    UINT64_C(1606422528),	// FMLAv1i64_indexed
    UINT64_C(237030400),	// FMLAv2f32
    UINT64_C(1314966528),	// FMLAv2f64
    UINT64_C(260050944),	// FMLAv2i32_indexed
    UINT64_C(1337987072),	// FMLAv2i64_indexed
    UINT64_C(1310772224),	// FMLAv4f32
    UINT64_C(1333792768),	// FMLAv4i32_indexed
    UINT64_C(1602244608),	// FMLSv1i32_indexed
    UINT64_C(1606438912),	// FMLSv1i64_indexed
    UINT64_C(245419008),	// FMLSv2f32
    UINT64_C(1323355136),	// FMLSv2f64
    UINT64_C(260067328),	// FMLSv2i32_indexed
    UINT64_C(1338003456),	// FMLSv2i64_indexed
    UINT64_C(1319160832),	// FMLSv4f32
    UINT64_C(1333809152),	// FMLSv4i32_indexed
    UINT64_C(2662203392),	// FMOVDXHighr
    UINT64_C(2657484800),	// FMOVDXr
    UINT64_C(509612032),	// FMOVDi
    UINT64_C(509624320),	// FMOVDr
    UINT64_C(505806848),	// FMOVSWr
    UINT64_C(505417728),	// FMOVSi
    UINT64_C(505430016),	// FMOVSr
    UINT64_C(505872384),	// FMOVWSr
    UINT64_C(2662268928),	// FMOVXDHighr
    UINT64_C(2657550336),	// FMOVXDr
    UINT64_C(251720704),	// FMOVv2f32ns
    UINT64_C(1862333440),	// FMOVv2f64ns
    UINT64_C(1325462528),	// FMOVv4f32ns
    UINT64_C(524320768),	// FMSUBDrrr
    UINT64_C(520126464),	// FMSUBSrrr
    UINT64_C(509609984),	// FMULDrr
    UINT64_C(505415680),	// FMULSrr
    UINT64_C(1579211776),	// FMULX32
    UINT64_C(1583406080),	// FMULX64
    UINT64_C(2139131904),	// FMULXv1i32_indexed
    UINT64_C(2143326208),	// FMULXv1i64_indexed
    UINT64_C(237034496),	// FMULXv2f32
    UINT64_C(1314970624),	// FMULXv2f64
    UINT64_C(796954624),	// FMULXv2i32_indexed
    UINT64_C(1874890752),	// FMULXv2i64_indexed
    UINT64_C(1310776320),	// FMULXv4f32
    UINT64_C(1870696448),	// FMULXv4i32_indexed
    UINT64_C(1602260992),	// FMULv1i32_indexed
    UINT64_C(1606455296),	// FMULv1i64_indexed
    UINT64_C(773905408),	// FMULv2f32
    UINT64_C(1851841536),	// FMULv2f64
    UINT64_C(260083712),	// FMULv2i32_indexed
    UINT64_C(1338019840),	// FMULv2i64_indexed
    UINT64_C(1847647232),	// FMULv4f32
    UINT64_C(1333825536),	// FMULv4i32_indexed
    UINT64_C(509689856),	// FNEGDr
    UINT64_C(505495552),	// FNEGSr
    UINT64_C(782301184),	// FNEGv2f32
    UINT64_C(1860237312),	// FNEGv2f64
    UINT64_C(1856043008),	// FNEGv4f32
    UINT64_C(526385152),	// FNMADDDrrr
    UINT64_C(522190848),	// FNMADDSrrr
    UINT64_C(526417920),	// FNMSUBDrrr
    UINT64_C(522223616),	// FNMSUBSrrr
    UINT64_C(509642752),	// FNMULDrr
    UINT64_C(505448448),	// FNMULSrr
    UINT64_C(1587664896),	// FRECPEv1i32
    UINT64_C(1591859200),	// FRECPEv1i64
    UINT64_C(245487616),	// FRECPEv2f32
    UINT64_C(1323423744),	// FRECPEv2f64
    UINT64_C(1319229440),	// FRECPEv4f32
    UINT64_C(1579219968),	// FRECPS32
    UINT64_C(1583414272),	// FRECPS64
    UINT64_C(237042688),	// FRECPSv2f32
    UINT64_C(1314978816),	// FRECPSv2f64
    UINT64_C(1310784512),	// FRECPSv4f32
    UINT64_C(1587673088),	// FRECPXv1i32
    UINT64_C(1591867392),	// FRECPXv1i64
    UINT64_C(510017536),	// FRINTADr
    UINT64_C(505823232),	// FRINTASr
    UINT64_C(773949440),	// FRINTAv2f32
    UINT64_C(1851885568),	// FRINTAv2f64
    UINT64_C(1847691264),	// FRINTAv4f32
    UINT64_C(510115840),	// FRINTIDr
    UINT64_C(505921536),	// FRINTISr
    UINT64_C(782342144),	// FRINTIv2f32
    UINT64_C(1860278272),	// FRINTIv2f64
    UINT64_C(1856083968),	// FRINTIv4f32
    UINT64_C(509952000),	// FRINTMDr
    UINT64_C(505757696),	// FRINTMSr
    UINT64_C(237082624),	// FRINTMv2f32
    UINT64_C(1315018752),	// FRINTMv2f64
    UINT64_C(1310824448),	// FRINTMv4f32
    UINT64_C(509886464),	// FRINTNDr
    UINT64_C(505692160),	// FRINTNSr
    UINT64_C(237078528),	// FRINTNv2f32
    UINT64_C(1315014656),	// FRINTNv2f64
    UINT64_C(1310820352),	// FRINTNv4f32
    UINT64_C(509919232),	// FRINTPDr
    UINT64_C(505724928),	// FRINTPSr
    UINT64_C(245467136),	// FRINTPv2f32
    UINT64_C(1323403264),	// FRINTPv2f64
    UINT64_C(1319208960),	// FRINTPv4f32
    UINT64_C(510083072),	// FRINTXDr
    UINT64_C(505888768),	// FRINTXSr
    UINT64_C(773953536),	// FRINTXv2f32
    UINT64_C(1851889664),	// FRINTXv2f64
    UINT64_C(1847695360),	// FRINTXv4f32
    UINT64_C(509984768),	// FRINTZDr
    UINT64_C(505790464),	// FRINTZSr
    UINT64_C(245471232),	// FRINTZv2f32
    UINT64_C(1323407360),	// FRINTZv2f64
    UINT64_C(1319213056),	// FRINTZv4f32
    UINT64_C(2124535808),	// FRSQRTEv1i32
    UINT64_C(2128730112),	// FRSQRTEv1i64
    UINT64_C(782358528),	// FRSQRTEv2f32
    UINT64_C(1860294656),	// FRSQRTEv2f64
    UINT64_C(1856100352),	// FRSQRTEv4f32
    UINT64_C(1587608576),	// FRSQRTS32
    UINT64_C(1591802880),	// FRSQRTS64
    UINT64_C(245431296),	// FRSQRTSv2f32
    UINT64_C(1323367424),	// FRSQRTSv2f64
    UINT64_C(1319173120),	// FRSQRTSv4f32
    UINT64_C(509722624),	// FSQRTDr
    UINT64_C(505528320),	// FSQRTSr
    UINT64_C(782366720),	// FSQRTv2f32
    UINT64_C(1860302848),	// FSQRTv2f64
    UINT64_C(1856108544),	// FSQRTv4f32
    UINT64_C(509622272),	// FSUBDrr
    UINT64_C(505427968),	// FSUBSrr
    UINT64_C(245421056),	// FSUBv2f32
    UINT64_C(1323357184),	// FSUBv2f64
    UINT64_C(1319162880),	// FSUBv4f32
    UINT64_C(3573751839),	// HINT
    UINT64_C(3560964096),	// HLT
    UINT64_C(3556769794),	// HVC
    UINT64_C(1308761088),	// INSvi16gpr
    UINT64_C(1845625856),	// INSvi16lane
    UINT64_C(1308892160),	// INSvi32gpr
    UINT64_C(1845756928),	// INSvi32lane
    UINT64_C(1309154304),	// INSvi64gpr
    UINT64_C(1846019072),	// INSvi64lane
    UINT64_C(1308695552),	// INSvi8gpr
    UINT64_C(1845560320),	// INSvi8lane
    UINT64_C(3573756127),	// ISB
    UINT64_C(1279270912),	// LD1Fourv16b
    UINT64_C(1287659520),	// LD1Fourv16b_POST
    UINT64_C(205532160),	// LD1Fourv1d
    UINT64_C(213920768),	// LD1Fourv1d_POST
    UINT64_C(1279273984),	// LD1Fourv2d
    UINT64_C(1287662592),	// LD1Fourv2d_POST
    UINT64_C(205531136),	// LD1Fourv2s
    UINT64_C(213919744),	// LD1Fourv2s_POST
    UINT64_C(205530112),	// LD1Fourv4h
    UINT64_C(213918720),	// LD1Fourv4h_POST
    UINT64_C(1279272960),	// LD1Fourv4s
    UINT64_C(1287661568),	// LD1Fourv4s_POST
    UINT64_C(205529088),	// LD1Fourv8b
    UINT64_C(213917696),	// LD1Fourv8b_POST
    UINT64_C(1279271936),	// LD1Fourv8h
    UINT64_C(1287660544),	// LD1Fourv8h_POST
    UINT64_C(1279291392),	// LD1Onev16b
    UINT64_C(1287680000),	// LD1Onev16b_POST
    UINT64_C(205552640),	// LD1Onev1d
    UINT64_C(213941248),	// LD1Onev1d_POST
    UINT64_C(1279294464),	// LD1Onev2d
    UINT64_C(1287683072),	// LD1Onev2d_POST
    UINT64_C(205551616),	// LD1Onev2s
    UINT64_C(213940224),	// LD1Onev2s_POST
    UINT64_C(205550592),	// LD1Onev4h
    UINT64_C(213939200),	// LD1Onev4h_POST
    UINT64_C(1279293440),	// LD1Onev4s
    UINT64_C(1287682048),	// LD1Onev4s_POST
    UINT64_C(205549568),	// LD1Onev8b
    UINT64_C(213938176),	// LD1Onev8b_POST
    UINT64_C(1279292416),	// LD1Onev8h
    UINT64_C(1287681024),	// LD1Onev8h_POST
    UINT64_C(1296089088),	// LD1Rv16b
    UINT64_C(1304477696),	// LD1Rv16b_POST
    UINT64_C(222350336),	// LD1Rv1d
    UINT64_C(230738944),	// LD1Rv1d_POST
    UINT64_C(1296092160),	// LD1Rv2d
    UINT64_C(1304480768),	// LD1Rv2d_POST
    UINT64_C(222349312),	// LD1Rv2s
    UINT64_C(230737920),	// LD1Rv2s_POST
    UINT64_C(222348288),	// LD1Rv4h
    UINT64_C(230736896),	// LD1Rv4h_POST
    UINT64_C(1296091136),	// LD1Rv4s
    UINT64_C(1304479744),	// LD1Rv4s_POST
    UINT64_C(222347264),	// LD1Rv8b
    UINT64_C(230735872),	// LD1Rv8b_POST
    UINT64_C(1296090112),	// LD1Rv8h
    UINT64_C(1304478720),	// LD1Rv8h_POST
    UINT64_C(1279287296),	// LD1Threev16b
    UINT64_C(1287675904),	// LD1Threev16b_POST
    UINT64_C(205548544),	// LD1Threev1d
    UINT64_C(213937152),	// LD1Threev1d_POST
    UINT64_C(1279290368),	// LD1Threev2d
    UINT64_C(1287678976),	// LD1Threev2d_POST
    UINT64_C(205547520),	// LD1Threev2s
    UINT64_C(213936128),	// LD1Threev2s_POST
    UINT64_C(205546496),	// LD1Threev4h
    UINT64_C(213935104),	// LD1Threev4h_POST
    UINT64_C(1279289344),	// LD1Threev4s
    UINT64_C(1287677952),	// LD1Threev4s_POST
    UINT64_C(205545472),	// LD1Threev8b
    UINT64_C(213934080),	// LD1Threev8b_POST
    UINT64_C(1279288320),	// LD1Threev8h
    UINT64_C(1287676928),	// LD1Threev8h_POST
    UINT64_C(1279303680),	// LD1Twov16b
    UINT64_C(1287692288),	// LD1Twov16b_POST
    UINT64_C(205564928),	// LD1Twov1d
    UINT64_C(213953536),	// LD1Twov1d_POST
    UINT64_C(1279306752),	// LD1Twov2d
    UINT64_C(1287695360),	// LD1Twov2d_POST
    UINT64_C(205563904),	// LD1Twov2s
    UINT64_C(213952512),	// LD1Twov2s_POST
    UINT64_C(205562880),	// LD1Twov4h
    UINT64_C(213951488),	// LD1Twov4h_POST
    UINT64_C(1279305728),	// LD1Twov4s
    UINT64_C(1287694336),	// LD1Twov4s_POST
    UINT64_C(205561856),	// LD1Twov8b
    UINT64_C(213950464),	// LD1Twov8b_POST
    UINT64_C(1279304704),	// LD1Twov8h
    UINT64_C(1287693312),	// LD1Twov8h_POST
    UINT64_C(222314496),	// LD1i16
    UINT64_C(230703104),	// LD1i16_POST
    UINT64_C(222330880),	// LD1i32
    UINT64_C(230719488),	// LD1i32_POST
    UINT64_C(222331904),	// LD1i64
    UINT64_C(230720512),	// LD1i64_POST
    UINT64_C(222298112),	// LD1i8
    UINT64_C(230686720),	// LD1i8_POST
    UINT64_C(1298186240),	// LD2Rv16b
    UINT64_C(1306574848),	// LD2Rv16b_POST
    UINT64_C(224447488),	// LD2Rv1d
    UINT64_C(232836096),	// LD2Rv1d_POST
    UINT64_C(1298189312),	// LD2Rv2d
    UINT64_C(1306577920),	// LD2Rv2d_POST
    UINT64_C(224446464),	// LD2Rv2s
    UINT64_C(232835072),	// LD2Rv2s_POST
    UINT64_C(224445440),	// LD2Rv4h
    UINT64_C(232834048),	// LD2Rv4h_POST
    UINT64_C(1298188288),	// LD2Rv4s
    UINT64_C(1306576896),	// LD2Rv4s_POST
    UINT64_C(224444416),	// LD2Rv8b
    UINT64_C(232833024),	// LD2Rv8b_POST
    UINT64_C(1298187264),	// LD2Rv8h
    UINT64_C(1306575872),	// LD2Rv8h_POST
    UINT64_C(1279295488),	// LD2Twov16b
    UINT64_C(1287684096),	// LD2Twov16b_POST
    UINT64_C(1279298560),	// LD2Twov2d
    UINT64_C(1287687168),	// LD2Twov2d_POST
    UINT64_C(205555712),	// LD2Twov2s
    UINT64_C(213944320),	// LD2Twov2s_POST
    UINT64_C(205554688),	// LD2Twov4h
    UINT64_C(213943296),	// LD2Twov4h_POST
    UINT64_C(1279297536),	// LD2Twov4s
    UINT64_C(1287686144),	// LD2Twov4s_POST
    UINT64_C(205553664),	// LD2Twov8b
    UINT64_C(213942272),	// LD2Twov8b_POST
    UINT64_C(1279296512),	// LD2Twov8h
    UINT64_C(1287685120),	// LD2Twov8h_POST
    UINT64_C(224411648),	// LD2i16
    UINT64_C(232800256),	// LD2i16_POST
    UINT64_C(224428032),	// LD2i32
    UINT64_C(232816640),	// LD2i32_POST
    UINT64_C(224429056),	// LD2i64
    UINT64_C(232817664),	// LD2i64_POST
    UINT64_C(224395264),	// LD2i8
    UINT64_C(232783872),	// LD2i8_POST
    UINT64_C(1296097280),	// LD3Rv16b
    UINT64_C(1304485888),	// LD3Rv16b_POST
    UINT64_C(222358528),	// LD3Rv1d
    UINT64_C(230747136),	// LD3Rv1d_POST
    UINT64_C(1296100352),	// LD3Rv2d
    UINT64_C(1304488960),	// LD3Rv2d_POST
    UINT64_C(222357504),	// LD3Rv2s
    UINT64_C(230746112),	// LD3Rv2s_POST
    UINT64_C(222356480),	// LD3Rv4h
    UINT64_C(230745088),	// LD3Rv4h_POST
    UINT64_C(1296099328),	// LD3Rv4s
    UINT64_C(1304487936),	// LD3Rv4s_POST
    UINT64_C(222355456),	// LD3Rv8b
    UINT64_C(230744064),	// LD3Rv8b_POST
    UINT64_C(1296098304),	// LD3Rv8h
    UINT64_C(1304486912),	// LD3Rv8h_POST
    UINT64_C(1279279104),	// LD3Threev16b
    UINT64_C(1287667712),	// LD3Threev16b_POST
    UINT64_C(1279282176),	// LD3Threev2d
    UINT64_C(1287670784),	// LD3Threev2d_POST
    UINT64_C(205539328),	// LD3Threev2s
    UINT64_C(213927936),	// LD3Threev2s_POST
    UINT64_C(205538304),	// LD3Threev4h
    UINT64_C(213926912),	// LD3Threev4h_POST
    UINT64_C(1279281152),	// LD3Threev4s
    UINT64_C(1287669760),	// LD3Threev4s_POST
    UINT64_C(205537280),	// LD3Threev8b
    UINT64_C(213925888),	// LD3Threev8b_POST
    UINT64_C(1279280128),	// LD3Threev8h
    UINT64_C(1287668736),	// LD3Threev8h_POST
    UINT64_C(222322688),	// LD3i16
    UINT64_C(230711296),	// LD3i16_POST
    UINT64_C(222339072),	// LD3i32
    UINT64_C(230727680),	// LD3i32_POST
    UINT64_C(222340096),	// LD3i64
    UINT64_C(230728704),	// LD3i64_POST
    UINT64_C(222306304),	// LD3i8
    UINT64_C(230694912),	// LD3i8_POST
    UINT64_C(1279262720),	// LD4Fourv16b
    UINT64_C(1287651328),	// LD4Fourv16b_POST
    UINT64_C(1279265792),	// LD4Fourv2d
    UINT64_C(1287654400),	// LD4Fourv2d_POST
    UINT64_C(205522944),	// LD4Fourv2s
    UINT64_C(213911552),	// LD4Fourv2s_POST
    UINT64_C(205521920),	// LD4Fourv4h
    UINT64_C(213910528),	// LD4Fourv4h_POST
    UINT64_C(1279264768),	// LD4Fourv4s
    UINT64_C(1287653376),	// LD4Fourv4s_POST
    UINT64_C(205520896),	// LD4Fourv8b
    UINT64_C(213909504),	// LD4Fourv8b_POST
    UINT64_C(1279263744),	// LD4Fourv8h
    UINT64_C(1287652352),	// LD4Fourv8h_POST
    UINT64_C(1298194432),	// LD4Rv16b
    UINT64_C(1306583040),	// LD4Rv16b_POST
    UINT64_C(224455680),	// LD4Rv1d
    UINT64_C(232844288),	// LD4Rv1d_POST
    UINT64_C(1298197504),	// LD4Rv2d
    UINT64_C(1306586112),	// LD4Rv2d_POST
    UINT64_C(224454656),	// LD4Rv2s
    UINT64_C(232843264),	// LD4Rv2s_POST
    UINT64_C(224453632),	// LD4Rv4h
    UINT64_C(232842240),	// LD4Rv4h_POST
    UINT64_C(1298196480),	// LD4Rv4s
    UINT64_C(1306585088),	// LD4Rv4s_POST
    UINT64_C(224452608),	// LD4Rv8b
    UINT64_C(232841216),	// LD4Rv8b_POST
    UINT64_C(1298195456),	// LD4Rv8h
    UINT64_C(1306584064),	// LD4Rv8h_POST
    UINT64_C(224419840),	// LD4i16
    UINT64_C(232808448),	// LD4i16_POST
    UINT64_C(224436224),	// LD4i32
    UINT64_C(232824832),	// LD4i32_POST
    UINT64_C(224437248),	// LD4i64
    UINT64_C(232825856),	// LD4i64_POST
    UINT64_C(224403456),	// LD4i8
    UINT64_C(232792064),	// LD4i8_POST
    UINT64_C(148896768),	// LDARB
    UINT64_C(1222638592),	// LDARH
    UINT64_C(2296380416),	// LDARW
    UINT64_C(3370122240),	// LDARX
    UINT64_C(2290057216),	// LDAXPW
    UINT64_C(3363799040),	// LDAXPX
    UINT64_C(140508160),	// LDAXRB
    UINT64_C(1214249984),	// LDAXRH
    UINT64_C(2287991808),	// LDAXRW
    UINT64_C(3361733632),	// LDAXRX
    UINT64_C(1816133632),	// LDNPDi
    UINT64_C(2889875456),	// LDNPQi
    UINT64_C(742391808),	// LDNPSi
    UINT64_C(675282944),	// LDNPWi
    UINT64_C(2822766592),	// LDNPXi
    UINT64_C(1832910848),	// LDPDi
    UINT64_C(1824522240),	// LDPDpost
    UINT64_C(1841299456),	// LDPDpre
    UINT64_C(2906652672),	// LDPQi
    UINT64_C(2898264064),	// LDPQpost
    UINT64_C(2915041280),	// LDPQpre
    UINT64_C(1765801984),	// LDPSWi
    UINT64_C(1757413376),	// LDPSWpost
    UINT64_C(1774190592),	// LDPSWpre
    UINT64_C(759169024),	// LDPSi
    UINT64_C(750780416),	// LDPSpost
    UINT64_C(767557632),	// LDPSpre
    UINT64_C(692060160),	// LDPWi
    UINT64_C(683671552),	// LDPWpost
    UINT64_C(700448768),	// LDPWpre
    UINT64_C(2839543808),	// LDPXi
    UINT64_C(2831155200),	// LDPXpost
    UINT64_C(2847932416),	// LDPXpre
    UINT64_C(943719424),	// LDRBBpost
    UINT64_C(0),	// LDRBBpost_isel
    UINT64_C(943721472),	// LDRBBpre
    UINT64_C(0),	// LDRBBpre_isel
    UINT64_C(945817600),	// LDRBBro
    UINT64_C(960495616),	// LDRBBui
    UINT64_C(1010828288),	// LDRBpost
    UINT64_C(1010830336),	// LDRBpre
    UINT64_C(1012926464),	// LDRBro
    UINT64_C(1027604480),	// LDRBui
    UINT64_C(1543503872),	// LDRDl
    UINT64_C(4232053760),	// LDRDpost
    UINT64_C(0),	// LDRDpost_isel
    UINT64_C(4232055808),	// LDRDpre
    UINT64_C(0),	// LDRDpre_isel
    UINT64_C(4234151936),	// LDRDro
    UINT64_C(4248829952),	// LDRDui
    UINT64_C(2017461248),	// LDRHHpost
    UINT64_C(0),	// LDRHHpost_isel
    UINT64_C(2017463296),	// LDRHHpre
    UINT64_C(0),	// LDRHHpre_isel
    UINT64_C(2019559424),	// LDRHHro
    UINT64_C(2034237440),	// LDRHHui
    UINT64_C(2084570112),	// LDRHpost
    UINT64_C(2084572160),	// LDRHpre
    UINT64_C(2086668288),	// LDRHro
    UINT64_C(2101346304),	// LDRHui
    UINT64_C(2617245696),	// LDRQl
    UINT64_C(1019216896),	// LDRQpost
    UINT64_C(1019218944),	// LDRQpre
    UINT64_C(1021315072),	// LDRQro
    UINT64_C(1035993088),	// LDRQui
    UINT64_C(952108032),	// LDRSBWpost
    UINT64_C(0),	// LDRSBWpost_isel
    UINT64_C(952110080),	// LDRSBWpre
    UINT64_C(0),	// LDRSBWpre_isel
    UINT64_C(954206208),	// LDRSBWro
    UINT64_C(968884224),	// LDRSBWui
    UINT64_C(947913728),	// LDRSBXpost
    UINT64_C(0),	// LDRSBXpost_isel
    UINT64_C(947915776),	// LDRSBXpre
    UINT64_C(0),	// LDRSBXpre_isel
    UINT64_C(950011904),	// LDRSBXro
    UINT64_C(964689920),	// LDRSBXui
    UINT64_C(2025849856),	// LDRSHWpost
    UINT64_C(0),	// LDRSHWpost_isel
    UINT64_C(2025851904),	// LDRSHWpre
    UINT64_C(0),	// LDRSHWpre_isel
    UINT64_C(2027948032),	// LDRSHWro
    UINT64_C(2042626048),	// LDRSHWui
    UINT64_C(2021655552),	// LDRSHXpost
    UINT64_C(0),	// LDRSHXpost_isel
    UINT64_C(2021657600),	// LDRSHXpre
    UINT64_C(0),	// LDRSHXpre_isel
    UINT64_C(2023753728),	// LDRSHXro
    UINT64_C(2038431744),	// LDRSHXui
    UINT64_C(2550136832),	// LDRSWl
    UINT64_C(3095397376),	// LDRSWpost
    UINT64_C(0),	// LDRSWpost_isel
    UINT64_C(3095399424),	// LDRSWpre
    UINT64_C(0),	// LDRSWpre_isel
    UINT64_C(3097495552),	// LDRSWro
    UINT64_C(3112173568),	// LDRSWui
    UINT64_C(469762048),	// LDRSl
    UINT64_C(3158311936),	// LDRSpost
    UINT64_C(0),	// LDRSpost_isel
    UINT64_C(3158313984),	// LDRSpre
    UINT64_C(0),	// LDRSpre_isel
    UINT64_C(3160410112),	// LDRSro
    UINT64_C(3175088128),	// LDRSui
    UINT64_C(402653184),	// LDRWl
    UINT64_C(3091203072),	// LDRWpost
    UINT64_C(0),	// LDRWpost_isel
    UINT64_C(3091205120),	// LDRWpre
    UINT64_C(0),	// LDRWpre_isel
    UINT64_C(3093301248),	// LDRWro
    UINT64_C(3107979264),	// LDRWui
    UINT64_C(1476395008),	// LDRXl
    UINT64_C(4164944896),	// LDRXpost
    UINT64_C(0),	// LDRXpost_isel
    UINT64_C(4164946944),	// LDRXpre
    UINT64_C(0),	// LDRXpre_isel
    UINT64_C(4167043072),	// LDRXro
    UINT64_C(4181721088),	// LDRXui
    UINT64_C(943720448),	// LDTRBi
    UINT64_C(2017462272),	// LDTRHi
    UINT64_C(952109056),	// LDTRSBWi
    UINT64_C(947914752),	// LDTRSBXi
    UINT64_C(2025850880),	// LDTRSHWi
    UINT64_C(2021656576),	// LDTRSHXi
    UINT64_C(3095398400),	// LDTRSWi
    UINT64_C(3091204096),	// LDTRWi
    UINT64_C(4164945920),	// LDTRXi
    UINT64_C(943718400),	// LDURBBi
    UINT64_C(1010827264),	// LDURBi
    UINT64_C(4232052736),	// LDURDi
    UINT64_C(2017460224),	// LDURHHi
    UINT64_C(2084569088),	// LDURHi
    UINT64_C(1019215872),	// LDURQi
    UINT64_C(952107008),	// LDURSBWi
    UINT64_C(947912704),	// LDURSBXi
    UINT64_C(2025848832),	// LDURSHWi
    UINT64_C(2021654528),	// LDURSHXi
    UINT64_C(3095396352),	// LDURSWi
    UINT64_C(3158310912),	// LDURSi
    UINT64_C(3091202048),	// LDURWi
    UINT64_C(4164943872),	// LDURXi
    UINT64_C(2290024448),	// LDXPW
    UINT64_C(3363766272),	// LDXPX
    UINT64_C(140475392),	// LDXRB
    UINT64_C(1214217216),	// LDXRH
    UINT64_C(2287959040),	// LDXRW
    UINT64_C(3361700864),	// LDXRX
    UINT64_C(0),	// LOADgot
    UINT64_C(448798720),	// LSLVWr
    UINT64_C(2596282368),	// LSLVXr
    UINT64_C(448799744),	// LSRVWr
    UINT64_C(2596283392),	// LSRVXr
    UINT64_C(452984832),	// MADDWrrr
    UINT64_C(2600468480),	// MADDXrrr
    UINT64_C(1310757888),	// MLAv16i8
    UINT64_C(245404672),	// MLAv2i32
    UINT64_C(796917760),	// MLAv2i32_indexed
    UINT64_C(241210368),	// MLAv4i16
    UINT64_C(792723456),	// MLAv4i16_indexed
    UINT64_C(1319146496),	// MLAv4i32
    UINT64_C(1870659584),	// MLAv4i32_indexed
    UINT64_C(1314952192),	// MLAv8i16
    UINT64_C(1866465280),	// MLAv8i16_indexed
    UINT64_C(237016064),	// MLAv8i8
    UINT64_C(1847628800),	// MLSv16i8
    UINT64_C(782275584),	// MLSv2i32
    UINT64_C(796934144),	// MLSv2i32_indexed
    UINT64_C(778081280),	// MLSv4i16
    UINT64_C(792739840),	// MLSv4i16_indexed
    UINT64_C(1856017408),	// MLSv4i32
    UINT64_C(1870675968),	// MLSv4i32_indexed
    UINT64_C(1851823104),	// MLSv8i16
    UINT64_C(1866481664),	// MLSv8i16_indexed
    UINT64_C(773886976),	// MLSv8i8
    UINT64_C(788587520),	// MOVID
    UINT64_C(1325458432),	// MOVIv16bns
    UINT64_C(1862329344),	// MOVIv2dns
    UINT64_C(251659264),	// MOVIv2i32
    UINT64_C(251708416),	// MOVIv2smsl
    UINT64_C(251692032),	// MOVIv4i16
    UINT64_C(1325401088),	// MOVIv4i32
    UINT64_C(1325450240),	// MOVIv4smsl
    UINT64_C(251716608),	// MOVIv8bns
    UINT64_C(1325433856),	// MOVIv8i16
    UINT64_C(1920991232),	// MOVKWi
    UINT64_C(4068474880),	// MOVKXi
    UINT64_C(310378496),	// MOVNWi
    UINT64_C(2457862144),	// MOVNXi
    UINT64_C(1384120320),	// MOVZWi
    UINT64_C(3531603968),	// MOVZXi
    UINT64_C(0),	// MOVaddr
    UINT64_C(0),	// MOVaddrBA
    UINT64_C(0),	// MOVaddrCP
    UINT64_C(0),	// MOVaddrEXT
    UINT64_C(0),	// MOVaddrJT
    UINT64_C(0),	// MOVaddrTLS
    UINT64_C(0),	// MOVi32imm
    UINT64_C(0),	// MOVi64imm
    UINT64_C(3576692736),	// MRS
    UINT64_C(3574595584),	// MSR
    UINT64_C(3573563423),	// MSRcpsr
    UINT64_C(453017600),	// MSUBWrrr
    UINT64_C(2600501248),	// MSUBXrrr
    UINT64_C(1310759936),	// MULv16i8
    UINT64_C(245406720),	// MULv2i32
    UINT64_C(260079616),	// MULv2i32_indexed
    UINT64_C(241212416),	// MULv4i16
    UINT64_C(255885312),	// MULv4i16_indexed
    UINT64_C(1319148544),	// MULv4i32
    UINT64_C(1333821440),	// MULv4i32_indexed
    UINT64_C(1314954240),	// MULv8i16
    UINT64_C(1329627136),	// MULv8i16_indexed
    UINT64_C(237018112),	// MULv8i8
    UINT64_C(788530176),	// MVNIv2i32
    UINT64_C(788579328),	// MVNIv2smsl
    UINT64_C(788562944),	// MVNIv4i16
    UINT64_C(1862272000),	// MVNIv4i32
    UINT64_C(1862321152),	// MVNIv4smsl
    UINT64_C(1862304768),	// MVNIv8i16
    UINT64_C(1847638016),	// NEGv16i8
    UINT64_C(2128656384),	// NEGv1i64
    UINT64_C(782284800),	// NEGv2i32
    UINT64_C(1860220928),	// NEGv2i64
    UINT64_C(778090496),	// NEGv4i16
    UINT64_C(1856026624),	// NEGv4i32
    UINT64_C(1851832320),	// NEGv8i16
    UINT64_C(773896192),	// NEGv8i8
    UINT64_C(1847613440),	// NOTv16i8
    UINT64_C(773871616),	// NOTv8i8
    UINT64_C(0),	// ORNWrr
    UINT64_C(706740224),	// ORNWrs
    UINT64_C(0),	// ORNXrr
    UINT64_C(2854223872),	// ORNXrs
    UINT64_C(1323310080),	// ORNv16i8
    UINT64_C(249568256),	// ORNv8i8
    UINT64_C(838860800),	// ORRWri
    UINT64_C(0),	// ORRWrr
    UINT64_C(704643072),	// ORRWrs
    UINT64_C(2986344448),	// ORRXri
    UINT64_C(0),	// ORRXrr
    UINT64_C(2852126720),	// ORRXrs
    UINT64_C(1319115776),	// ORRv16i8
    UINT64_C(251663360),	// ORRv2i32
    UINT64_C(251696128),	// ORRv4i16
    UINT64_C(1325405184),	// ORRv4i32
    UINT64_C(1325437952),	// ORRv8i16
    UINT64_C(245373952),	// ORRv8i8
    UINT64_C(1310777344),	// PMULLv16i8
    UINT64_C(249618432),	// PMULLv1i64
    UINT64_C(1323360256),	// PMULLv2i64
    UINT64_C(237035520),	// PMULLv8i8
    UINT64_C(1847630848),	// PMULv16i8
    UINT64_C(773889024),	// PMULv8i8
    UINT64_C(3623878656),	// PRFMl
    UINT64_C(4171237376),	// PRFMro
    UINT64_C(4185915392),	// PRFMui
    UINT64_C(4169138176),	// PRFUMi
    UINT64_C(782254080),	// RADDHNv2i64_v2i32
    UINT64_C(1855995904),	// RADDHNv2i64_v4i32
    UINT64_C(778059776),	// RADDHNv4i32_v4i16
    UINT64_C(1851801600),	// RADDHNv4i32_v8i16
    UINT64_C(1847607296),	// RADDHNv8i16_v16i8
    UINT64_C(773865472),	// RADDHNv8i16_v8i8
    UINT64_C(1522532352),	// RBITWr
    UINT64_C(3670016000),	// RBITXr
    UINT64_C(1851807744),	// RBITv16i8
    UINT64_C(778065920),	// RBITv8i8
    UINT64_C(3596550144),	// RET
    UINT64_C(0),	// RET_ReallyLR
    UINT64_C(1522533376),	// REV16Wr
    UINT64_C(3670017024),	// REV16Xr
    UINT64_C(1310726144),	// REV16v16i8
    UINT64_C(236984320),	// REV16v8i8
    UINT64_C(3670018048),	// REV32Xr
    UINT64_C(1847592960),	// REV32v16i8
    UINT64_C(778045440),	// REV32v4i16
    UINT64_C(1851787264),	// REV32v8i16
    UINT64_C(773851136),	// REV32v8i8
    UINT64_C(1310722048),	// REV64v16i8
    UINT64_C(245368832),	// REV64v2i32
    UINT64_C(241174528),	// REV64v4i16
    UINT64_C(1319110656),	// REV64v4i32
    UINT64_C(1314916352),	// REV64v8i16
    UINT64_C(236980224),	// REV64v8i8
    UINT64_C(1522534400),	// REVWr
    UINT64_C(3670019072),	// REVXr
    UINT64_C(448801792),	// RORVWr
    UINT64_C(2596285440),	// RORVXr
    UINT64_C(1325960192),	// RSHRNv16i8_shift
    UINT64_C(253791232),	// RSHRNv2i32_shift
    UINT64_C(252742656),	// RSHRNv4i16_shift
    UINT64_C(1327533056),	// RSHRNv4i32_shift
    UINT64_C(1326484480),	// RSHRNv8i16_shift
    UINT64_C(252218368),	// RSHRNv8i8_shift
    UINT64_C(782262272),	// RSUBHNv2i64_v2i32
    UINT64_C(1856004096),	// RSUBHNv2i64_v4i32
    UINT64_C(778067968),	// RSUBHNv4i32_v4i16
    UINT64_C(1851809792),	// RSUBHNv4i32_v8i16
    UINT64_C(1847615488),	// RSUBHNv8i16_v16i8
    UINT64_C(773873664),	// RSUBHNv8i16_v8i8
    UINT64_C(1310740480),	// SABALv16i8_v8i16
    UINT64_C(245387264),	// SABALv2i32_v2i64
    UINT64_C(241192960),	// SABALv4i16_v4i32
    UINT64_C(1319129088),	// SABALv4i32_v2i64
    UINT64_C(1314934784),	// SABALv8i16_v4i32
    UINT64_C(236998656),	// SABALv8i8_v8i16
    UINT64_C(1310751744),	// SABAv16i8
    UINT64_C(245398528),	// SABAv2i32
    UINT64_C(241204224),	// SABAv4i16
    UINT64_C(1319140352),	// SABAv4i32
    UINT64_C(1314946048),	// SABAv8i16
    UINT64_C(237009920),	// SABAv8i8
    UINT64_C(1310748672),	// SABDLv16i8_v8i16
    UINT64_C(245395456),	// SABDLv2i32_v2i64
    UINT64_C(241201152),	// SABDLv4i16_v4i32
    UINT64_C(1319137280),	// SABDLv4i32_v2i64
    UINT64_C(1314942976),	// SABDLv8i16_v4i32
    UINT64_C(237006848),	// SABDLv8i8_v8i16
    UINT64_C(1310749696),	// SABDv16i8
    UINT64_C(245396480),	// SABDv2i32
    UINT64_C(241202176),	// SABDv4i16
    UINT64_C(1319138304),	// SABDv4i32
    UINT64_C(1314944000),	// SABDv8i16
    UINT64_C(237007872),	// SABDv8i8
    UINT64_C(1310746624),	// SADALPv16i8_v8i16
    UINT64_C(245393408),	// SADALPv2i32_v1i64
    UINT64_C(241199104),	// SADALPv4i16_v2i32
    UINT64_C(1319135232),	// SADALPv4i32_v2i64
    UINT64_C(1314940928),	// SADALPv8i16_v4i32
    UINT64_C(237004800),	// SADALPv8i8_v4i16
    UINT64_C(1310730240),	// SADDLPv16i8_v8i16
    UINT64_C(245377024),	// SADDLPv2i32_v1i64
    UINT64_C(241182720),	// SADDLPv4i16_v2i32
    UINT64_C(1319118848),	// SADDLPv4i32_v2i64
    UINT64_C(1314924544),	// SADDLPv8i16_v4i32
    UINT64_C(236988416),	// SADDLPv8i8_v4i16
    UINT64_C(1311782912),	// SADDLVv16i8v
    UINT64_C(242235392),	// SADDLVv4i16v
    UINT64_C(1320171520),	// SADDLVv4i32v
    UINT64_C(1315977216),	// SADDLVv8i16v
    UINT64_C(238041088),	// SADDLVv8i8v
    UINT64_C(1310720000),	// SADDLv16i8_v8i16
    UINT64_C(245366784),	// SADDLv2i32_v2i64
    UINT64_C(241172480),	// SADDLv4i16_v4i32
    UINT64_C(1319108608),	// SADDLv4i32_v2i64
    UINT64_C(1314914304),	// SADDLv8i16_v4i32
    UINT64_C(236978176),	// SADDLv8i8_v8i16
    UINT64_C(1310724096),	// SADDWv16i8_v8i16
    UINT64_C(245370880),	// SADDWv2i32_v2i64
    UINT64_C(241176576),	// SADDWv4i16_v4i32
    UINT64_C(1319112704),	// SADDWv4i32_v2i64
    UINT64_C(1314918400),	// SADDWv8i16_v4i32
    UINT64_C(236982272),	// SADDWv8i8_v8i16
    UINT64_C(2046820352),	// SBCSWr
    UINT64_C(4194304000),	// SBCSXr
    UINT64_C(1509949440),	// SBCWr
    UINT64_C(3657433088),	// SBCXr
    UINT64_C(318767104),	// SBFMWri
    UINT64_C(2470445056),	// SBFMXri
    UINT64_C(507641856),	// SCVTFSWDri
    UINT64_C(503447552),	// SCVTFSWSri
    UINT64_C(2655125504),	// SCVTFSXDri
    UINT64_C(2650931200),	// SCVTFSXSri
    UINT64_C(509739008),	// SCVTFUWDri
    UINT64_C(505544704),	// SCVTFUWSri
    UINT64_C(2657222656),	// SCVTFUXDri
    UINT64_C(2653028352),	// SCVTFUXSri
    UINT64_C(1598088192),	// SCVTFd
    UINT64_C(1595991040),	// SCVTFs
    UINT64_C(1579276288),	// SCVTFv1i32
    UINT64_C(1583470592),	// SCVTFv1i64
    UINT64_C(237099008),	// SCVTFv2f32
    UINT64_C(1315035136),	// SCVTFv2f64
    UINT64_C(253813760),	// SCVTFv2i32_shift
    UINT64_C(1329652736),	// SCVTFv2i64_shift
    UINT64_C(1310840832),	// SCVTFv4f32
    UINT64_C(1327555584),	// SCVTFv4i32_shift
    UINT64_C(448793600),	// SDIVWr
    UINT64_C(2596277248),	// SDIVXr
    UINT64_C(1577058304),	// SHA1Crrr
    UINT64_C(1579681792),	// SHA1Hrr
    UINT64_C(1577066496),	// SHA1Mrrr
    UINT64_C(1577062400),	// SHA1Prrr
    UINT64_C(1577070592),	// SHA1SU0rrr
    UINT64_C(1579685888),	// SHA1SU1rr
    UINT64_C(1577078784),	// SHA256H2rrr
    UINT64_C(1577074688),	// SHA256Hrrr
    UINT64_C(1579689984),	// SHA256SU0rr
    UINT64_C(1577082880),	// SHA256SU1rrr
    UINT64_C(1310721024),	// SHADDv16i8
    UINT64_C(245367808),	// SHADDv2i32
    UINT64_C(241173504),	// SHADDv4i16
    UINT64_C(1319109632),	// SHADDv4i32
    UINT64_C(1314915328),	// SHADDv8i16
    UINT64_C(236979200),	// SHADDv8i8
    UINT64_C(1847670784),	// SHLLv16i8
    UINT64_C(782317568),	// SHLLv2i32
    UINT64_C(778123264),	// SHLLv4i16
    UINT64_C(1856059392),	// SHLLv4i32
    UINT64_C(1851865088),	// SHLLv8i16
    UINT64_C(773928960),	// SHLLv8i8
    UINT64_C(1598051328),	// SHLd
    UINT64_C(1325945856),	// SHLv16i8_shift
    UINT64_C(253776896),	// SHLv2i32_shift
    UINT64_C(1329615872),	// SHLv2i64_shift
    UINT64_C(252728320),	// SHLv4i16_shift
    UINT64_C(1327518720),	// SHLv4i32_shift
    UINT64_C(1326470144),	// SHLv8i16_shift
    UINT64_C(252204032),	// SHLv8i8_shift
    UINT64_C(1325958144),	// SHRNv16i8_shift
    UINT64_C(253789184),	// SHRNv2i32_shift
    UINT64_C(252740608),	// SHRNv4i16_shift
    UINT64_C(1327531008),	// SHRNv4i32_shift
    UINT64_C(1326482432),	// SHRNv8i16_shift
    UINT64_C(252216320),	// SHRNv8i8_shift
    UINT64_C(1310729216),	// SHSUBv16i8
    UINT64_C(245376000),	// SHSUBv2i32
    UINT64_C(241181696),	// SHSUBv4i16
    UINT64_C(1319117824),	// SHSUBv4i32
    UINT64_C(1314923520),	// SHSUBv8i16
    UINT64_C(236987392),	// SHSUBv8i8
    UINT64_C(2134922240),	// SLId
    UINT64_C(1862816768),	// SLIv16i8_shift
    UINT64_C(790647808),	// SLIv2i32_shift
    UINT64_C(1866486784),	// SLIv2i64_shift
    UINT64_C(789599232),	// SLIv4i16_shift
    UINT64_C(1864389632),	// SLIv4i32_shift
    UINT64_C(1863341056),	// SLIv8i16_shift
    UINT64_C(789074944),	// SLIv8i8_shift
    UINT64_C(2602565632),	// SMADDLrrr
    UINT64_C(1310761984),	// SMAXPv16i8
    UINT64_C(245408768),	// SMAXPv2i32
    UINT64_C(241214464),	// SMAXPv4i16
    UINT64_C(1319150592),	// SMAXPv4i32
    UINT64_C(1314956288),	// SMAXPv8i16
    UINT64_C(237020160),	// SMAXPv8i8
    UINT64_C(1311811584),	// SMAXVv16i8v
    UINT64_C(242264064),	// SMAXVv4i16v
    UINT64_C(1320200192),	// SMAXVv4i32v
    UINT64_C(1316005888),	// SMAXVv8i16v
    UINT64_C(238069760),	// SMAXVv8i8v
    UINT64_C(1310745600),	// SMAXv16i8
    UINT64_C(245392384),	// SMAXv2i32
    UINT64_C(241198080),	// SMAXv4i16
    UINT64_C(1319134208),	// SMAXv4i32
    UINT64_C(1314939904),	// SMAXv8i16
    UINT64_C(237003776),	// SMAXv8i8
    UINT64_C(3556769795),	// SMC
    UINT64_C(1310764032),	// SMINPv16i8
    UINT64_C(245410816),	// SMINPv2i32
    UINT64_C(241216512),	// SMINPv4i16
    UINT64_C(1319152640),	// SMINPv4i32
    UINT64_C(1314958336),	// SMINPv8i16
    UINT64_C(237022208),	// SMINPv8i8
    UINT64_C(1311877120),	// SMINVv16i8v
    UINT64_C(242329600),	// SMINVv4i16v
    UINT64_C(1320265728),	// SMINVv4i32v
    UINT64_C(1316071424),	// SMINVv8i16v
    UINT64_C(238135296),	// SMINVv8i8v
    UINT64_C(1310747648),	// SMINv16i8
    UINT64_C(245394432),	// SMINv2i32
    UINT64_C(241200128),	// SMINv4i16
    UINT64_C(1319136256),	// SMINv4i32
    UINT64_C(1314941952),	// SMINv8i16
    UINT64_C(237005824),	// SMINv8i8
    UINT64_C(1310752768),	// SMLALv16i8_v8i16
    UINT64_C(260055040),	// SMLALv2i32_indexed
    UINT64_C(245399552),	// SMLALv2i32_v2i64
    UINT64_C(255860736),	// SMLALv4i16_indexed
    UINT64_C(241205248),	// SMLALv4i16_v4i32
    UINT64_C(1333796864),	// SMLALv4i32_indexed
    UINT64_C(1319141376),	// SMLALv4i32_v2i64
    UINT64_C(1329602560),	// SMLALv8i16_indexed
    UINT64_C(1314947072),	// SMLALv8i16_v4i32
    UINT64_C(237010944),	// SMLALv8i8_v8i16
    UINT64_C(1310760960),	// SMLSLv16i8_v8i16
    UINT64_C(260071424),	// SMLSLv2i32_indexed
    UINT64_C(245407744),	// SMLSLv2i32_v2i64
    UINT64_C(255877120),	// SMLSLv4i16_indexed
    UINT64_C(241213440),	// SMLSLv4i16_v4i32
    UINT64_C(1333813248),	// SMLSLv4i32_indexed
    UINT64_C(1319149568),	// SMLSLv4i32_v2i64
    UINT64_C(1329618944),	// SMLSLv8i16_indexed
    UINT64_C(1314955264),	// SMLSLv8i16_v4i32
    UINT64_C(237019136),	// SMLSLv8i8_v8i16
    UINT64_C(235023360),	// SMOVvi16to32
    UINT64_C(1308765184),	// SMOVvi16to64
    UINT64_C(1308896256),	// SMOVvi32to64
    UINT64_C(234957824),	// SMOVvi8to32
    UINT64_C(1308699648),	// SMOVvi8to64
    UINT64_C(2602598400),	// SMSUBLrrr
    UINT64_C(2604694528),	// SMULHrr
    UINT64_C(1310769152),	// SMULLv16i8_v8i16
    UINT64_C(260087808),	// SMULLv2i32_indexed
    UINT64_C(245415936),	// SMULLv2i32_v2i64
    UINT64_C(255893504),	// SMULLv4i16_indexed
    UINT64_C(241221632),	// SMULLv4i16_v4i32
    UINT64_C(1333829632),	// SMULLv4i32_indexed
    UINT64_C(1319157760),	// SMULLv4i32_v2i64
    UINT64_C(1329635328),	// SMULLv8i16_indexed
    UINT64_C(1314963456),	// SMULLv8i16_v4i32
    UINT64_C(237027328),	// SMULLv8i8_v8i16
    UINT64_C(1310750720),	// SQABSv16i8
    UINT64_C(1583380480),	// SQABSv1i16
    UINT64_C(1587574784),	// SQABSv1i32
    UINT64_C(1591769088),	// SQABSv1i64
    UINT64_C(1579186176),	// SQABSv1i8
    UINT64_C(245397504),	// SQABSv2i32
    UINT64_C(1323333632),	// SQABSv2i64
    UINT64_C(241203200),	// SQABSv4i16
    UINT64_C(1319139328),	// SQABSv4i32
    UINT64_C(1314945024),	// SQABSv8i16
    UINT64_C(237008896),	// SQABSv8i8
    UINT64_C(1310723072),	// SQADDv16i8
    UINT64_C(1583352832),	// SQADDv1i16
    UINT64_C(1587547136),	// SQADDv1i32
    UINT64_C(1591741440),	// SQADDv1i64
    UINT64_C(1579158528),	// SQADDv1i8
    UINT64_C(245369856),	// SQADDv2i32
    UINT64_C(1323305984),	// SQADDv2i64
    UINT64_C(241175552),	// SQADDv4i16
    UINT64_C(1319111680),	// SQADDv4i32
    UINT64_C(1314917376),	// SQADDv8i16
    UINT64_C(236981248),	// SQADDv8i8
    UINT64_C(1583386624),	// SQDMLALi16
    UINT64_C(1587580928),	// SQDMLALi32
    UINT64_C(1598042112),	// SQDMLALv1i32_indexed
    UINT64_C(1602236416),	// SQDMLALv1i64_indexed
    UINT64_C(260059136),	// SQDMLALv2i32_indexed
    UINT64_C(245403648),	// SQDMLALv2i32_v2i64
    UINT64_C(255864832),	// SQDMLALv4i16_indexed
    UINT64_C(241209344),	// SQDMLALv4i16_v4i32
    UINT64_C(1333800960),	// SQDMLALv4i32_indexed
    UINT64_C(1319145472),	// SQDMLALv4i32_v2i64
    UINT64_C(1329606656),	// SQDMLALv8i16_indexed
    UINT64_C(1314951168),	// SQDMLALv8i16_v4i32
    UINT64_C(1583394816),	// SQDMLSLi16
    UINT64_C(1587589120),	// SQDMLSLi32
    UINT64_C(1598058496),	// SQDMLSLv1i32_indexed
    UINT64_C(1602252800),	// SQDMLSLv1i64_indexed
    UINT64_C(260075520),	// SQDMLSLv2i32_indexed
    UINT64_C(245411840),	// SQDMLSLv2i32_v2i64
    UINT64_C(255881216),	// SQDMLSLv4i16_indexed
    UINT64_C(241217536),	// SQDMLSLv4i16_v4i32
    UINT64_C(1333817344),	// SQDMLSLv4i32_indexed
    UINT64_C(1319153664),	// SQDMLSLv4i32_v2i64
    UINT64_C(1329623040),	// SQDMLSLv8i16_indexed
    UINT64_C(1314959360),	// SQDMLSLv8i16_v4i32
    UINT64_C(1583395840),	// SQDMULHv1i16
    UINT64_C(1598078976),	// SQDMULHv1i16_indexed
    UINT64_C(1587590144),	// SQDMULHv1i32
    UINT64_C(1602273280),	// SQDMULHv1i32_indexed
    UINT64_C(245412864),	// SQDMULHv2i32
    UINT64_C(260096000),	// SQDMULHv2i32_indexed
    UINT64_C(241218560),	// SQDMULHv4i16
    UINT64_C(255901696),	// SQDMULHv4i16_indexed
    UINT64_C(1319154688),	// SQDMULHv4i32
    UINT64_C(1333837824),	// SQDMULHv4i32_indexed
    UINT64_C(1314960384),	// SQDMULHv8i16
    UINT64_C(1329643520),	// SQDMULHv8i16_indexed
    UINT64_C(1583403008),	// SQDMULLi16
    UINT64_C(1587597312),	// SQDMULLi32
    UINT64_C(1598074880),	// SQDMULLv1i32_indexed
    UINT64_C(1602269184),	// SQDMULLv1i64_indexed
    UINT64_C(260091904),	// SQDMULLv2i32_indexed
    UINT64_C(245420032),	// SQDMULLv2i32_v2i64
    UINT64_C(255897600),	// SQDMULLv4i16_indexed
    UINT64_C(241225728),	// SQDMULLv4i16_v4i32
    UINT64_C(1333833728),	// SQDMULLv4i32_indexed
    UINT64_C(1319161856),	// SQDMULLv4i32_v2i64
    UINT64_C(1329639424),	// SQDMULLv8i16_indexed
    UINT64_C(1314967552),	// SQDMULLv8i16_v4i32
    UINT64_C(1847621632),	// SQNEGv16i8
    UINT64_C(2120251392),	// SQNEGv1i16
    UINT64_C(2124445696),	// SQNEGv1i32
    UINT64_C(2128640000),	// SQNEGv1i64
    UINT64_C(2116057088),	// SQNEGv1i8
    UINT64_C(782268416),	// SQNEGv2i32
    UINT64_C(1860204544),	// SQNEGv2i64
    UINT64_C(778074112),	// SQNEGv4i16
    UINT64_C(1856010240),	// SQNEGv4i32
    UINT64_C(1851815936),	// SQNEGv8i16
    UINT64_C(773879808),	// SQNEGv8i8
    UINT64_C(2120266752),	// SQRDMULHv1i16
    UINT64_C(1598083072),	// SQRDMULHv1i16_indexed
    UINT64_C(2124461056),	// SQRDMULHv1i32
    UINT64_C(1602277376),	// SQRDMULHv1i32_indexed
    UINT64_C(782283776),	// SQRDMULHv2i32
    UINT64_C(260100096),	// SQRDMULHv2i32_indexed
    UINT64_C(778089472),	// SQRDMULHv4i16
    UINT64_C(255905792),	// SQRDMULHv4i16_indexed
    UINT64_C(1856025600),	// SQRDMULHv4i32
    UINT64_C(1333841920),	// SQRDMULHv4i32_indexed
    UINT64_C(1851831296),	// SQRDMULHv8i16
    UINT64_C(1329647616),	// SQRDMULHv8i16_indexed
    UINT64_C(1310743552),	// SQRSHLv16i8
    UINT64_C(1583373312),	// SQRSHLv1i16
    UINT64_C(1587567616),	// SQRSHLv1i32
    UINT64_C(1591761920),	// SQRSHLv1i64
    UINT64_C(1579179008),	// SQRSHLv1i8
    UINT64_C(245390336),	// SQRSHLv2i32
    UINT64_C(1323326464),	// SQRSHLv2i64
    UINT64_C(241196032),	// SQRSHLv4i16
    UINT64_C(1319132160),	// SQRSHLv4i32
    UINT64_C(1314937856),	// SQRSHLv8i16
    UINT64_C(237001728),	// SQRSHLv8i8
    UINT64_C(1594399744),	// SQRSHRNb
    UINT64_C(1594924032),	// SQRSHRNh
    UINT64_C(1595972608),	// SQRSHRNs
    UINT64_C(1325964288),	// SQRSHRNv16i8_shift
    UINT64_C(253795328),	// SQRSHRNv2i32_shift
    UINT64_C(252746752),	// SQRSHRNv4i16_shift
    UINT64_C(1327537152),	// SQRSHRNv4i32_shift
    UINT64_C(1326488576),	// SQRSHRNv8i16_shift
    UINT64_C(252222464),	// SQRSHRNv8i8_shift
    UINT64_C(2131266560),	// SQRSHRUNb
    UINT64_C(2131790848),	// SQRSHRUNh
    UINT64_C(2132839424),	// SQRSHRUNs
    UINT64_C(1862831104),	// SQRSHRUNv16i8_shift
    UINT64_C(790662144),	// SQRSHRUNv2i32_shift
    UINT64_C(789613568),	// SQRSHRUNv4i16_shift
    UINT64_C(1864403968),	// SQRSHRUNv4i32_shift
    UINT64_C(1863355392),	// SQRSHRUNv8i16_shift
    UINT64_C(789089280),	// SQRSHRUNv8i8_shift
    UINT64_C(2131256320),	// SQSHLUb
    UINT64_C(2134926336),	// SQSHLUd
    UINT64_C(2131780608),	// SQSHLUh
    UINT64_C(2132829184),	// SQSHLUs
    UINT64_C(1862820864),	// SQSHLUv16i8_shift
    UINT64_C(790651904),	// SQSHLUv2i32_shift
    UINT64_C(1866490880),	// SQSHLUv2i64_shift
    UINT64_C(789603328),	// SQSHLUv4i16_shift
    UINT64_C(1864393728),	// SQSHLUv4i32_shift
    UINT64_C(1863345152),	// SQSHLUv8i16_shift
    UINT64_C(789079040),	// SQSHLUv8i8_shift
    UINT64_C(1594389504),	// SQSHLb
    UINT64_C(1598059520),	// SQSHLd
    UINT64_C(1594913792),	// SQSHLh
    UINT64_C(1595962368),	// SQSHLs
    UINT64_C(1310739456),	// SQSHLv16i8
    UINT64_C(1325954048),	// SQSHLv16i8_shift
    UINT64_C(1583369216),	// SQSHLv1i16
    UINT64_C(1587563520),	// SQSHLv1i32
    UINT64_C(1591757824),	// SQSHLv1i64
    UINT64_C(1579174912),	// SQSHLv1i8
    UINT64_C(245386240),	// SQSHLv2i32
    UINT64_C(253785088),	// SQSHLv2i32_shift
    UINT64_C(1323322368),	// SQSHLv2i64
    UINT64_C(1329624064),	// SQSHLv2i64_shift
    UINT64_C(241191936),	// SQSHLv4i16
    UINT64_C(252736512),	// SQSHLv4i16_shift
    UINT64_C(1319128064),	// SQSHLv4i32
    UINT64_C(1327526912),	// SQSHLv4i32_shift
    UINT64_C(1314933760),	// SQSHLv8i16
    UINT64_C(1326478336),	// SQSHLv8i16_shift
    UINT64_C(236997632),	// SQSHLv8i8
    UINT64_C(252212224),	// SQSHLv8i8_shift
    UINT64_C(1594397696),	// SQSHRNb
    UINT64_C(1594921984),	// SQSHRNh
    UINT64_C(1595970560),	// SQSHRNs
    UINT64_C(1325962240),	// SQSHRNv16i8_shift
    UINT64_C(253793280),	// SQSHRNv2i32_shift
    UINT64_C(252744704),	// SQSHRNv4i16_shift
    UINT64_C(1327535104),	// SQSHRNv4i32_shift
    UINT64_C(1326486528),	// SQSHRNv8i16_shift
    UINT64_C(252220416),	// SQSHRNv8i8_shift
    UINT64_C(2131264512),	// SQSHRUNb
    UINT64_C(2131788800),	// SQSHRUNh
    UINT64_C(2132837376),	// SQSHRUNs
    UINT64_C(1862829056),	// SQSHRUNv16i8_shift
    UINT64_C(790660096),	// SQSHRUNv2i32_shift
    UINT64_C(789611520),	// SQSHRUNv4i16_shift
    UINT64_C(1864401920),	// SQSHRUNv4i32_shift
    UINT64_C(1863353344),	// SQSHRUNv8i16_shift
    UINT64_C(789087232),	// SQSHRUNv8i8_shift
    UINT64_C(1310731264),	// SQSUBv16i8
    UINT64_C(1583361024),	// SQSUBv1i16
    UINT64_C(1587555328),	// SQSUBv1i32
    UINT64_C(1591749632),	// SQSUBv1i64
    UINT64_C(1579166720),	// SQSUBv1i8
    UINT64_C(245378048),	// SQSUBv2i32
    UINT64_C(1323314176),	// SQSUBv2i64
    UINT64_C(241183744),	// SQSUBv4i16
    UINT64_C(1319119872),	// SQSUBv4i32
    UINT64_C(1314925568),	// SQSUBv8i16
    UINT64_C(236989440),	// SQSUBv8i8
    UINT64_C(1310803968),	// SQXTNv16i8
    UINT64_C(1583433728),	// SQXTNv1i16
    UINT64_C(1587628032),	// SQXTNv1i32
    UINT64_C(1579239424),	// SQXTNv1i8
    UINT64_C(245450752),	// SQXTNv2i32
    UINT64_C(241256448),	// SQXTNv4i16
    UINT64_C(1319192576),	// SQXTNv4i32
    UINT64_C(1314998272),	// SQXTNv8i16
    UINT64_C(237062144),	// SQXTNv8i8
    UINT64_C(1847666688),	// SQXTUNv16i8
    UINT64_C(2120296448),	// SQXTUNv1i16
    UINT64_C(2124490752),	// SQXTUNv1i32
    UINT64_C(2116102144),	// SQXTUNv1i8
    UINT64_C(782313472),	// SQXTUNv2i32
    UINT64_C(778119168),	// SQXTUNv4i16
    UINT64_C(1856055296),	// SQXTUNv4i32
    UINT64_C(1851860992),	// SQXTUNv8i16
    UINT64_C(773924864),	// SQXTUNv8i8
    UINT64_C(1310725120),	// SRHADDv16i8
    UINT64_C(245371904),	// SRHADDv2i32
    UINT64_C(241177600),	// SRHADDv4i16
    UINT64_C(1319113728),	// SRHADDv4i32
    UINT64_C(1314919424),	// SRHADDv8i16
    UINT64_C(236983296),	// SRHADDv8i8
    UINT64_C(2134918144),	// SRId
    UINT64_C(1862812672),	// SRIv16i8_shift
    UINT64_C(790643712),	// SRIv2i32_shift
    UINT64_C(1866482688),	// SRIv2i64_shift
    UINT64_C(789595136),	// SRIv4i16_shift
    UINT64_C(1864385536),	// SRIv4i32_shift
    UINT64_C(1863336960),	// SRIv8i16_shift
    UINT64_C(789070848),	// SRIv8i8_shift
    UINT64_C(1310741504),	// SRSHLv16i8
    UINT64_C(1591759872),	// SRSHLv1i64
    UINT64_C(245388288),	// SRSHLv2i32
    UINT64_C(1323324416),	// SRSHLv2i64
    UINT64_C(241193984),	// SRSHLv4i16
    UINT64_C(1319130112),	// SRSHLv4i32
    UINT64_C(1314935808),	// SRSHLv8i16
    UINT64_C(236999680),	// SRSHLv8i8
    UINT64_C(1598039040),	// SRSHRd
    UINT64_C(1325933568),	// SRSHRv16i8_shift
    UINT64_C(253764608),	// SRSHRv2i32_shift
    UINT64_C(1329603584),	// SRSHRv2i64_shift
    UINT64_C(252716032),	// SRSHRv4i16_shift
    UINT64_C(1327506432),	// SRSHRv4i32_shift
    UINT64_C(1326457856),	// SRSHRv8i16_shift
    UINT64_C(252191744),	// SRSHRv8i8_shift
    UINT64_C(1598043136),	// SRSRAd
    UINT64_C(1325937664),	// SRSRAv16i8_shift
    UINT64_C(253768704),	// SRSRAv2i32_shift
    UINT64_C(1329607680),	// SRSRAv2i64_shift
    UINT64_C(252720128),	// SRSRAv4i16_shift
    UINT64_C(1327510528),	// SRSRAv4i32_shift
    UINT64_C(1326461952),	// SRSRAv8i16_shift
    UINT64_C(252195840),	// SRSRAv8i8_shift
    UINT64_C(1325966336),	// SSHLLv16i8_shift
    UINT64_C(253797376),	// SSHLLv2i32_shift
    UINT64_C(252748800),	// SSHLLv4i16_shift
    UINT64_C(1327539200),	// SSHLLv4i32_shift
    UINT64_C(1326490624),	// SSHLLv8i16_shift
    UINT64_C(252224512),	// SSHLLv8i8_shift
    UINT64_C(1310737408),	// SSHLv16i8
    UINT64_C(1591755776),	// SSHLv1i64
    UINT64_C(245384192),	// SSHLv2i32
    UINT64_C(1323320320),	// SSHLv2i64
    UINT64_C(241189888),	// SSHLv4i16
    UINT64_C(1319126016),	// SSHLv4i32
    UINT64_C(1314931712),	// SSHLv8i16
    UINT64_C(236995584),	// SSHLv8i8
    UINT64_C(1598030848),	// SSHRd
    UINT64_C(1325925376),	// SSHRv16i8_shift
    UINT64_C(253756416),	// SSHRv2i32_shift
    UINT64_C(1329595392),	// SSHRv2i64_shift
    UINT64_C(252707840),	// SSHRv4i16_shift
    UINT64_C(1327498240),	// SSHRv4i32_shift
    UINT64_C(1326449664),	// SSHRv8i16_shift
    UINT64_C(252183552),	// SSHRv8i8_shift
    UINT64_C(1598034944),	// SSRAd
    UINT64_C(1325929472),	// SSRAv16i8_shift
    UINT64_C(253760512),	// SSRAv2i32_shift
    UINT64_C(1329599488),	// SSRAv2i64_shift
    UINT64_C(252711936),	// SSRAv4i16_shift
    UINT64_C(1327502336),	// SSRAv4i32_shift
    UINT64_C(1326453760),	// SSRAv8i16_shift
    UINT64_C(252187648),	// SSRAv8i8_shift
    UINT64_C(1310728192),	// SSUBLv16i8_v8i16
    UINT64_C(245374976),	// SSUBLv2i32_v2i64
    UINT64_C(241180672),	// SSUBLv4i16_v4i32
    UINT64_C(1319116800),	// SSUBLv4i32_v2i64
    UINT64_C(1314922496),	// SSUBLv8i16_v4i32
    UINT64_C(236986368),	// SSUBLv8i8_v8i16
    UINT64_C(1310732288),	// SSUBWv16i8_v8i16
    UINT64_C(245379072),	// SSUBWv2i32_v2i64
    UINT64_C(241184768),	// SSUBWv4i16_v4i32
    UINT64_C(1319120896),	// SSUBWv4i32_v2i64
    UINT64_C(1314926592),	// SSUBWv8i16_v4i32
    UINT64_C(236990464),	// SSUBWv8i8_v8i16
    UINT64_C(1275076608),	// ST1Fourv16b
    UINT64_C(1283465216),	// ST1Fourv16b_POST
    UINT64_C(201337856),	// ST1Fourv1d
    UINT64_C(209726464),	// ST1Fourv1d_POST
    UINT64_C(1275079680),	// ST1Fourv2d
    UINT64_C(1283468288),	// ST1Fourv2d_POST
    UINT64_C(201336832),	// ST1Fourv2s
    UINT64_C(209725440),	// ST1Fourv2s_POST
    UINT64_C(201335808),	// ST1Fourv4h
    UINT64_C(209724416),	// ST1Fourv4h_POST
    UINT64_C(1275078656),	// ST1Fourv4s
    UINT64_C(1283467264),	// ST1Fourv4s_POST
    UINT64_C(201334784),	// ST1Fourv8b
    UINT64_C(209723392),	// ST1Fourv8b_POST
    UINT64_C(1275077632),	// ST1Fourv8h
    UINT64_C(1283466240),	// ST1Fourv8h_POST
    UINT64_C(1275097088),	// ST1Onev16b
    UINT64_C(1283485696),	// ST1Onev16b_POST
    UINT64_C(201358336),	// ST1Onev1d
    UINT64_C(209746944),	// ST1Onev1d_POST
    UINT64_C(1275100160),	// ST1Onev2d
    UINT64_C(1283488768),	// ST1Onev2d_POST
    UINT64_C(201357312),	// ST1Onev2s
    UINT64_C(209745920),	// ST1Onev2s_POST
    UINT64_C(201356288),	// ST1Onev4h
    UINT64_C(209744896),	// ST1Onev4h_POST
    UINT64_C(1275099136),	// ST1Onev4s
    UINT64_C(1283487744),	// ST1Onev4s_POST
    UINT64_C(201355264),	// ST1Onev8b
    UINT64_C(209743872),	// ST1Onev8b_POST
    UINT64_C(1275098112),	// ST1Onev8h
    UINT64_C(1283486720),	// ST1Onev8h_POST
    UINT64_C(1275092992),	// ST1Threev16b
    UINT64_C(1283481600),	// ST1Threev16b_POST
    UINT64_C(201354240),	// ST1Threev1d
    UINT64_C(209742848),	// ST1Threev1d_POST
    UINT64_C(1275096064),	// ST1Threev2d
    UINT64_C(1283484672),	// ST1Threev2d_POST
    UINT64_C(201353216),	// ST1Threev2s
    UINT64_C(209741824),	// ST1Threev2s_POST
    UINT64_C(201352192),	// ST1Threev4h
    UINT64_C(209740800),	// ST1Threev4h_POST
    UINT64_C(1275095040),	// ST1Threev4s
    UINT64_C(1283483648),	// ST1Threev4s_POST
    UINT64_C(201351168),	// ST1Threev8b
    UINT64_C(209739776),	// ST1Threev8b_POST
    UINT64_C(1275094016),	// ST1Threev8h
    UINT64_C(1283482624),	// ST1Threev8h_POST
    UINT64_C(1275109376),	// ST1Twov16b
    UINT64_C(1283497984),	// ST1Twov16b_POST
    UINT64_C(201370624),	// ST1Twov1d
    UINT64_C(209759232),	// ST1Twov1d_POST
    UINT64_C(1275112448),	// ST1Twov2d
    UINT64_C(1283501056),	// ST1Twov2d_POST
    UINT64_C(201369600),	// ST1Twov2s
    UINT64_C(209758208),	// ST1Twov2s_POST
    UINT64_C(201368576),	// ST1Twov4h
    UINT64_C(209757184),	// ST1Twov4h_POST
    UINT64_C(1275111424),	// ST1Twov4s
    UINT64_C(1283500032),	// ST1Twov4s_POST
    UINT64_C(201367552),	// ST1Twov8b
    UINT64_C(209756160),	// ST1Twov8b_POST
    UINT64_C(1275110400),	// ST1Twov8h
    UINT64_C(1283499008),	// ST1Twov8h_POST
    UINT64_C(218120192),	// ST1i16
    UINT64_C(226508800),	// ST1i16_POST
    UINT64_C(218136576),	// ST1i32
    UINT64_C(226525184),	// ST1i32_POST
    UINT64_C(218137600),	// ST1i64
    UINT64_C(226526208),	// ST1i64_POST
    UINT64_C(218103808),	// ST1i8
    UINT64_C(226492416),	// ST1i8_POST
    UINT64_C(1275101184),	// ST2Twov16b
    UINT64_C(1283489792),	// ST2Twov16b_POST
    UINT64_C(1275104256),	// ST2Twov2d
    UINT64_C(1283492864),	// ST2Twov2d_POST
    UINT64_C(201361408),	// ST2Twov2s
    UINT64_C(209750016),	// ST2Twov2s_POST
    UINT64_C(201360384),	// ST2Twov4h
    UINT64_C(209748992),	// ST2Twov4h_POST
    UINT64_C(1275103232),	// ST2Twov4s
    UINT64_C(1283491840),	// ST2Twov4s_POST
    UINT64_C(201359360),	// ST2Twov8b
    UINT64_C(209747968),	// ST2Twov8b_POST
    UINT64_C(1275102208),	// ST2Twov8h
    UINT64_C(1283490816),	// ST2Twov8h_POST
    UINT64_C(220217344),	// ST2i16
    UINT64_C(228605952),	// ST2i16_POST
    UINT64_C(220233728),	// ST2i32
    UINT64_C(228622336),	// ST2i32_POST
    UINT64_C(220234752),	// ST2i64
    UINT64_C(228623360),	// ST2i64_POST
    UINT64_C(220200960),	// ST2i8
    UINT64_C(228589568),	// ST2i8_POST
    UINT64_C(1275084800),	// ST3Threev16b
    UINT64_C(1283473408),	// ST3Threev16b_POST
    UINT64_C(1275087872),	// ST3Threev2d
    UINT64_C(1283476480),	// ST3Threev2d_POST
    UINT64_C(201345024),	// ST3Threev2s
    UINT64_C(209733632),	// ST3Threev2s_POST
    UINT64_C(201344000),	// ST3Threev4h
    UINT64_C(209732608),	// ST3Threev4h_POST
    UINT64_C(1275086848),	// ST3Threev4s
    UINT64_C(1283475456),	// ST3Threev4s_POST
    UINT64_C(201342976),	// ST3Threev8b
    UINT64_C(209731584),	// ST3Threev8b_POST
    UINT64_C(1275085824),	// ST3Threev8h
    UINT64_C(1283474432),	// ST3Threev8h_POST
    UINT64_C(218128384),	// ST3i16
    UINT64_C(226516992),	// ST3i16_POST
    UINT64_C(218144768),	// ST3i32
    UINT64_C(226533376),	// ST3i32_POST
    UINT64_C(218145792),	// ST3i64
    UINT64_C(226534400),	// ST3i64_POST
    UINT64_C(218112000),	// ST3i8
    UINT64_C(226500608),	// ST3i8_POST
    UINT64_C(1275068416),	// ST4Fourv16b
    UINT64_C(1283457024),	// ST4Fourv16b_POST
    UINT64_C(1275071488),	// ST4Fourv2d
    UINT64_C(1283460096),	// ST4Fourv2d_POST
    UINT64_C(201328640),	// ST4Fourv2s
    UINT64_C(209717248),	// ST4Fourv2s_POST
    UINT64_C(201327616),	// ST4Fourv4h
    UINT64_C(209716224),	// ST4Fourv4h_POST
    UINT64_C(1275070464),	// ST4Fourv4s
    UINT64_C(1283459072),	// ST4Fourv4s_POST
    UINT64_C(201326592),	// ST4Fourv8b
    UINT64_C(209715200),	// ST4Fourv8b_POST
    UINT64_C(1275069440),	// ST4Fourv8h
    UINT64_C(1283458048),	// ST4Fourv8h_POST
    UINT64_C(220225536),	// ST4i16
    UINT64_C(228614144),	// ST4i16_POST
    UINT64_C(220241920),	// ST4i32
    UINT64_C(228630528),	// ST4i32_POST
    UINT64_C(220242944),	// ST4i64
    UINT64_C(228631552),	// ST4i64_POST
    UINT64_C(220209152),	// ST4i8
    UINT64_C(228597760),	// ST4i8_POST
    UINT64_C(144702464),	// STLRB
    UINT64_C(1218444288),	// STLRH
    UINT64_C(2292186112),	// STLRW
    UINT64_C(3365927936),	// STLRX
    UINT64_C(2283831296),	// STLXPW
    UINT64_C(3357573120),	// STLXPX
    UINT64_C(134282240),	// STLXRB
    UINT64_C(1208024064),	// STLXRH
    UINT64_C(2281765888),	// STLXRW
    UINT64_C(3355507712),	// STLXRX
    UINT64_C(1811939328),	// STNPDi
    UINT64_C(2885681152),	// STNPQi
    UINT64_C(738197504),	// STNPSi
    UINT64_C(671088640),	// STNPWi
    UINT64_C(2818572288),	// STNPXi
    UINT64_C(1828716544),	// STPDi
    UINT64_C(1820327936),	// STPDpost
    UINT64_C(1837105152),	// STPDpre
    UINT64_C(2902458368),	// STPQi
    UINT64_C(2894069760),	// STPQpost
    UINT64_C(2910846976),	// STPQpre
    UINT64_C(754974720),	// STPSi
    UINT64_C(746586112),	// STPSpost
    UINT64_C(763363328),	// STPSpre
    UINT64_C(687865856),	// STPWi
    UINT64_C(679477248),	// STPWpost
    UINT64_C(696254464),	// STPWpre
    UINT64_C(2835349504),	// STPXi
    UINT64_C(2826960896),	// STPXpost
    UINT64_C(2843738112),	// STPXpre
    UINT64_C(939525120),	// STRBBpost
    UINT64_C(0),
    UINT64_C(939527168),	// STRBBpre
    UINT64_C(0),	// STRBBpre_isel
    UINT64_C(941623296),	// STRBBro
    UINT64_C(956301312),	// STRBBui
    UINT64_C(1006633984),	// STRBpost
    UINT64_C(1006636032),	// STRBpre
    UINT64_C(1008732160),	// STRBro
    UINT64_C(1023410176),	// STRBui
    UINT64_C(4227859456),	// STRDpost
    UINT64_C(0),
    UINT64_C(4227861504),	// STRDpre
    UINT64_C(0),	// STRDpre_isel
    UINT64_C(4229957632),	// STRDro
    UINT64_C(4244635648),	// STRDui
    UINT64_C(2013266944),	// STRHHpost
    UINT64_C(0),
    UINT64_C(2013268992),	// STRHHpre
    UINT64_C(0),	// STRHHpre_isel
    UINT64_C(2015365120),	// STRHHro
    UINT64_C(2030043136),	// STRHHui
    UINT64_C(2080375808),	// STRHpost
    UINT64_C(2080377856),	// STRHpre
    UINT64_C(2082473984),	// STRHro
    UINT64_C(2097152000),	// STRHui
    UINT64_C(1015022592),	// STRQpost
    UINT64_C(1015024640),	// STRQpre
    UINT64_C(1017120768),	// STRQro
    UINT64_C(1031798784),	// STRQui
    UINT64_C(3154117632),	// STRSpost
    UINT64_C(0),
    UINT64_C(3154119680),	// STRSpre
    UINT64_C(0),	// STRSpre_isel
    UINT64_C(3156215808),	// STRSro
    UINT64_C(3170893824),	// STRSui
    UINT64_C(3087008768),	// STRWpost
    UINT64_C(0),
    UINT64_C(3087010816),	// STRWpre
    UINT64_C(0),	// STRWpre_isel
    UINT64_C(3089106944),	// STRWro
    UINT64_C(3103784960),	// STRWui
    UINT64_C(4160750592),	// STRXpost
    UINT64_C(0),
    UINT64_C(4160752640),	// STRXpre
    UINT64_C(0),	// STRXpre_isel
    UINT64_C(4162848768),	// STRXro
    UINT64_C(4177526784),	// STRXui
    UINT64_C(939526144),	// STTRBi
    UINT64_C(2013267968),	// STTRHi
    UINT64_C(3087009792),	// STTRWi
    UINT64_C(4160751616),	// STTRXi
    UINT64_C(939524096),	// STURBBi
    UINT64_C(1006632960),	// STURBi
    UINT64_C(4227858432),	// STURDi
    UINT64_C(2013265920),	// STURHHi
    UINT64_C(2080374784),	// STURHi
    UINT64_C(1015021568),	// STURQi
    UINT64_C(3154116608),	// STURSi
    UINT64_C(3087007744),	// STURWi
    UINT64_C(4160749568),	// STURXi
    UINT64_C(2283798528),	// STXPW
    UINT64_C(3357540352),	// STXPX
    UINT64_C(134249472),	// STXRB
    UINT64_C(1207991296),	// STXRH
    UINT64_C(2281733120),	// STXRW
    UINT64_C(3355474944),	// STXRX
    UINT64_C(245391360),	// SUBHNv2i64_v2i32
    UINT64_C(1319133184),	// SUBHNv2i64_v4i32
    UINT64_C(241197056),	// SUBHNv4i32_v4i16
    UINT64_C(1314938880),	// SUBHNv4i32_v8i16
    UINT64_C(1310744576),	// SUBHNv8i16_v16i8
    UINT64_C(237002752),	// SUBHNv8i16_v8i8
    UINT64_C(1895825408),	// SUBSWri
    UINT64_C(0),	// SUBSWrr
    UINT64_C(1795162112),	// SUBSWrs
    UINT64_C(1797259264),	// SUBSWrx
    UINT64_C(4043309056),	// SUBSXri
    UINT64_C(0),	// SUBSXrr
    UINT64_C(3942645760),	// SUBSXrs
    UINT64_C(3944742912),	// SUBSXrx
    UINT64_C(3944767488),	// SUBSXrx64
    UINT64_C(1358954496),	// SUBWri
    UINT64_C(0),	// SUBWrr
    UINT64_C(1258291200),	// SUBWrs
    UINT64_C(1260388352),	// SUBWrx
    UINT64_C(3506438144),	// SUBXri
    UINT64_C(0),	// SUBXrr
    UINT64_C(3405774848),	// SUBXrs
    UINT64_C(3407872000),	// SUBXrx
    UINT64_C(3407896576),	// SUBXrx64
    UINT64_C(1847624704),	// SUBv16i8
    UINT64_C(2128643072),	// SUBv1i64
    UINT64_C(782271488),	// SUBv2i32
    UINT64_C(1860207616),	// SUBv2i64
    UINT64_C(778077184),	// SUBv4i16
    UINT64_C(1856013312),	// SUBv4i32
    UINT64_C(1851819008),	// SUBv8i16
    UINT64_C(773882880),	// SUBv8i8
    UINT64_C(1310734336),	// SUQADDv16i8
    UINT64_C(1583364096),	// SUQADDv1i16
    UINT64_C(1587558400),	// SUQADDv1i32
    UINT64_C(1591752704),	// SUQADDv1i64
    UINT64_C(1579169792),	// SUQADDv1i8
    UINT64_C(245381120),	// SUQADDv2i32
    UINT64_C(1323317248),	// SUQADDv2i64
    UINT64_C(241186816),	// SUQADDv4i16
    UINT64_C(1319122944),	// SUQADDv4i32
    UINT64_C(1314928640),	// SUQADDv8i16
    UINT64_C(236992512),	// SUQADDv8i8
    UINT64_C(3556769793),	// SVC
    UINT64_C(3574071327),	// SYS
    UINT64_C(3576168448),	// SYSLxt
    UINT64_C(3574071296),	// SYSxt
    UINT64_C(1308647424),	// TBLv16i8Four
    UINT64_C(1308622848),	// TBLv16i8One
    UINT64_C(1308639232),	// TBLv16i8Three
    UINT64_C(1308631040),	// TBLv16i8Two
    UINT64_C(234905600),	// TBLv8i8Four
    UINT64_C(234881024),	// TBLv8i8One
    UINT64_C(234897408),	// TBLv8i8Three
    UINT64_C(234889216),	// TBLv8i8Two
    UINT64_C(922746880),	// TBNZ
    UINT64_C(1308651520),	// TBXv16i8Four
    UINT64_C(1308626944),	// TBXv16i8One
    UINT64_C(1308643328),	// TBXv16i8Three
    UINT64_C(1308635136),	// TBXv16i8Two
    UINT64_C(234909696),	// TBXv8i8Four
    UINT64_C(234885120),	// TBXv8i8One
    UINT64_C(234901504),	// TBXv8i8Three
    UINT64_C(234893312),	// TBXv8i8Two
    UINT64_C(905969664),	// TBZ
    UINT64_C(0),	// TCRETURNdi
    UINT64_C(0),	// TCRETURNri
    UINT64_C(0),	// TLSDESCCALL
    UINT64_C(0),	// TLSDESC_BLR
    UINT64_C(1308633088),	// TRN1v16i8
    UINT64_C(243279872),	// TRN1v2i32
    UINT64_C(1321216000),	// TRN1v2i64
    UINT64_C(239085568),	// TRN1v4i16
    UINT64_C(1317021696),	// TRN1v4i32
    UINT64_C(1312827392),	// TRN1v8i16
    UINT64_C(234891264),	// TRN1v8i8
    UINT64_C(1308649472),	// TRN2v16i8
    UINT64_C(243296256),	// TRN2v2i32
    UINT64_C(1321232384),	// TRN2v2i64
    UINT64_C(239101952),	// TRN2v4i16
    UINT64_C(1317038080),	// TRN2v4i32
    UINT64_C(1312843776),	// TRN2v8i16
    UINT64_C(234907648),	// TRN2v8i8
    UINT64_C(1847611392),	// UABALv16i8_v8i16
    UINT64_C(782258176),	// UABALv2i32_v2i64
    UINT64_C(778063872),	// UABALv4i16_v4i32
    UINT64_C(1856000000),	// UABALv4i32_v2i64
    UINT64_C(1851805696),	// UABALv8i16_v4i32
    UINT64_C(773869568),	// UABALv8i8_v8i16
    UINT64_C(1847622656),	// UABAv16i8
    UINT64_C(782269440),	// UABAv2i32
    UINT64_C(778075136),	// UABAv4i16
    UINT64_C(1856011264),	// UABAv4i32
    UINT64_C(1851816960),	// UABAv8i16
    UINT64_C(773880832),	// UABAv8i8
    UINT64_C(1847619584),	// UABDLv16i8_v8i16
    UINT64_C(782266368),	// UABDLv2i32_v2i64
    UINT64_C(778072064),	// UABDLv4i16_v4i32
    UINT64_C(1856008192),	// UABDLv4i32_v2i64
    UINT64_C(1851813888),	// UABDLv8i16_v4i32
    UINT64_C(773877760),	// UABDLv8i8_v8i16
    UINT64_C(1847620608),	// UABDv16i8
    UINT64_C(782267392),	// UABDv2i32
    UINT64_C(778073088),	// UABDv4i16
    UINT64_C(1856009216),	// UABDv4i32
    UINT64_C(1851814912),	// UABDv8i16
    UINT64_C(773878784),	// UABDv8i8
    UINT64_C(1847617536),	// UADALPv16i8_v8i16
    UINT64_C(782264320),	// UADALPv2i32_v1i64
    UINT64_C(778070016),	// UADALPv4i16_v2i32
    UINT64_C(1856006144),	// UADALPv4i32_v2i64
    UINT64_C(1851811840),	// UADALPv8i16_v4i32
    UINT64_C(773875712),	// UADALPv8i8_v4i16
    UINT64_C(1847601152),	// UADDLPv16i8_v8i16
    UINT64_C(782247936),	// UADDLPv2i32_v1i64
    UINT64_C(778053632),	// UADDLPv4i16_v2i32
    UINT64_C(1855989760),	// UADDLPv4i32_v2i64
    UINT64_C(1851795456),	// UADDLPv8i16_v4i32
    UINT64_C(773859328),	// UADDLPv8i8_v4i16
    UINT64_C(1848653824),	// UADDLVv16i8v
    UINT64_C(779106304),	// UADDLVv4i16v
    UINT64_C(1857042432),	// UADDLVv4i32v
    UINT64_C(1852848128),	// UADDLVv8i16v
    UINT64_C(774912000),	// UADDLVv8i8v
    UINT64_C(1847590912),	// UADDLv16i8_v8i16
    UINT64_C(782237696),	// UADDLv2i32_v2i64
    UINT64_C(778043392),	// UADDLv4i16_v4i32
    UINT64_C(1855979520),	// UADDLv4i32_v2i64
    UINT64_C(1851785216),	// UADDLv8i16_v4i32
    UINT64_C(773849088),	// UADDLv8i8_v8i16
    UINT64_C(1847595008),	// UADDWv16i8_v8i16
    UINT64_C(782241792),	// UADDWv2i32_v2i64
    UINT64_C(778047488),	// UADDWv4i16_v4i32
    UINT64_C(1855983616),	// UADDWv4i32_v2i64
    UINT64_C(1851789312),	// UADDWv8i16_v4i32
    UINT64_C(773853184),	// UADDWv8i8_v8i16
    UINT64_C(1392508928),	// UBFMWri
    UINT64_C(3544186880),	// UBFMXri
    UINT64_C(507707392),	// UCVTFSWDri
    UINT64_C(503513088),	// UCVTFSWSri
    UINT64_C(2655191040),	// UCVTFSXDri
    UINT64_C(2650996736),	// UCVTFSXSri
    UINT64_C(509804544),	// UCVTFUWDri
    UINT64_C(505610240),	// UCVTFUWSri
    UINT64_C(2657288192),	// UCVTFUXDri
    UINT64_C(2653093888),	// UCVTFUXSri
    UINT64_C(2134959104),	// UCVTFd
    UINT64_C(2132861952),	// UCVTFs
    UINT64_C(2116147200),	// UCVTFv1i32
    UINT64_C(2120341504),	// UCVTFv1i64
    UINT64_C(773969920),	// UCVTFv2f32
    UINT64_C(1851906048),	// UCVTFv2f64
    UINT64_C(790684672),	// UCVTFv2i32_shift
    UINT64_C(1866523648),	// UCVTFv2i64_shift
    UINT64_C(1847711744),	// UCVTFv4f32
    UINT64_C(1864426496),	// UCVTFv4i32_shift
    UINT64_C(448792576),	// UDIVWr
    UINT64_C(2596276224),	// UDIVXr
    UINT64_C(1847591936),	// UHADDv16i8
    UINT64_C(782238720),	// UHADDv2i32
    UINT64_C(778044416),	// UHADDv4i16
    UINT64_C(1855980544),	// UHADDv4i32
    UINT64_C(1851786240),	// UHADDv8i16
    UINT64_C(773850112),	// UHADDv8i8
    UINT64_C(1847600128),	// UHSUBv16i8
    UINT64_C(782246912),	// UHSUBv2i32
    UINT64_C(778052608),	// UHSUBv4i16
    UINT64_C(1855988736),	// UHSUBv4i32
    UINT64_C(1851794432),	// UHSUBv8i16
    UINT64_C(773858304),	// UHSUBv8i8
    UINT64_C(2610954240),	// UMADDLrrr
    UINT64_C(1847632896),	// UMAXPv16i8
    UINT64_C(782279680),	// UMAXPv2i32
    UINT64_C(778085376),	// UMAXPv4i16
    UINT64_C(1856021504),	// UMAXPv4i32
    UINT64_C(1851827200),	// UMAXPv8i16
    UINT64_C(773891072),	// UMAXPv8i8
    UINT64_C(1848682496),	// UMAXVv16i8v
    UINT64_C(779134976),	// UMAXVv4i16v
    UINT64_C(1857071104),	// UMAXVv4i32v
    UINT64_C(1852876800),	// UMAXVv8i16v
    UINT64_C(774940672),	// UMAXVv8i8v
    UINT64_C(1847616512),	// UMAXv16i8
    UINT64_C(782263296),	// UMAXv2i32
    UINT64_C(778068992),	// UMAXv4i16
    UINT64_C(1856005120),	// UMAXv4i32
    UINT64_C(1851810816),	// UMAXv8i16
    UINT64_C(773874688),	// UMAXv8i8
    UINT64_C(1847634944),	// UMINPv16i8
    UINT64_C(782281728),	// UMINPv2i32
    UINT64_C(778087424),	// UMINPv4i16
    UINT64_C(1856023552),	// UMINPv4i32
    UINT64_C(1851829248),	// UMINPv8i16
    UINT64_C(773893120),	// UMINPv8i8
    UINT64_C(1848748032),	// UMINVv16i8v
    UINT64_C(779200512),	// UMINVv4i16v
    UINT64_C(1857136640),	// UMINVv4i32v
    UINT64_C(1852942336),	// UMINVv8i16v
    UINT64_C(775006208),	// UMINVv8i8v
    UINT64_C(1847618560),	// UMINv16i8
    UINT64_C(782265344),	// UMINv2i32
    UINT64_C(778071040),	// UMINv4i16
    UINT64_C(1856007168),	// UMINv4i32
    UINT64_C(1851812864),	// UMINv8i16
    UINT64_C(773876736),	// UMINv8i8
    UINT64_C(1847623680),	// UMLALv16i8_v8i16
    UINT64_C(796925952),	// UMLALv2i32_indexed
    UINT64_C(782270464),	// UMLALv2i32_v2i64
    UINT64_C(792731648),	// UMLALv4i16_indexed
    UINT64_C(778076160),	// UMLALv4i16_v4i32
    UINT64_C(1870667776),	// UMLALv4i32_indexed
    UINT64_C(1856012288),	// UMLALv4i32_v2i64
    UINT64_C(1866473472),	// UMLALv8i16_indexed
    UINT64_C(1851817984),	// UMLALv8i16_v4i32
    UINT64_C(773881856),	// UMLALv8i8_v8i16
    UINT64_C(1847631872),	// UMLSLv16i8_v8i16
    UINT64_C(796942336),	// UMLSLv2i32_indexed
    UINT64_C(782278656),	// UMLSLv2i32_v2i64
    UINT64_C(792748032),	// UMLSLv4i16_indexed
    UINT64_C(778084352),	// UMLSLv4i16_v4i32
    UINT64_C(1870684160),	// UMLSLv4i32_indexed
    UINT64_C(1856020480),	// UMLSLv4i32_v2i64
    UINT64_C(1866489856),	// UMLSLv8i16_indexed
    UINT64_C(1851826176),	// UMLSLv8i16_v4i32
    UINT64_C(773890048),	// UMLSLv8i8_v8i16
    UINT64_C(235027456),	// UMOVvi16
    UINT64_C(235158528),	// UMOVvi32
    UINT64_C(1309162496),	// UMOVvi64
    UINT64_C(234961920),	// UMOVvi8
    UINT64_C(2610987008),	// UMSUBLrrr
    UINT64_C(2613083136),	// UMULHrr
    UINT64_C(1847640064),	// UMULLv16i8_v8i16
    UINT64_C(796958720),	// UMULLv2i32_indexed
    UINT64_C(782286848),	// UMULLv2i32_v2i64
    UINT64_C(792764416),	// UMULLv4i16_indexed
    UINT64_C(778092544),	// UMULLv4i16_v4i32
    UINT64_C(1870700544),	// UMULLv4i32_indexed
    UINT64_C(1856028672),	// UMULLv4i32_v2i64
    UINT64_C(1866506240),	// UMULLv8i16_indexed
    UINT64_C(1851834368),	// UMULLv8i16_v4i32
    UINT64_C(773898240),	// UMULLv8i8_v8i16
    UINT64_C(1847593984),	// UQADDv16i8
    UINT64_C(2120223744),	// UQADDv1i16
    UINT64_C(2124418048),	// UQADDv1i32
    UINT64_C(2128612352),	// UQADDv1i64
    UINT64_C(2116029440),	// UQADDv1i8
    UINT64_C(782240768),	// UQADDv2i32
    UINT64_C(1860176896),	// UQADDv2i64
    UINT64_C(778046464),	// UQADDv4i16
    UINT64_C(1855982592),	// UQADDv4i32
    UINT64_C(1851788288),	// UQADDv8i16
    UINT64_C(773852160),	// UQADDv8i8
    UINT64_C(1847614464),	// UQRSHLv16i8
    UINT64_C(2120244224),	// UQRSHLv1i16
    UINT64_C(2124438528),	// UQRSHLv1i32
    UINT64_C(2128632832),	// UQRSHLv1i64
    UINT64_C(2116049920),	// UQRSHLv1i8
    UINT64_C(782261248),	// UQRSHLv2i32
    UINT64_C(1860197376),	// UQRSHLv2i64
    UINT64_C(778066944),	// UQRSHLv4i16
    UINT64_C(1856003072),	// UQRSHLv4i32
    UINT64_C(1851808768),	// UQRSHLv8i16
    UINT64_C(773872640),	// UQRSHLv8i8
    UINT64_C(2131270656),	// UQRSHRNb
    UINT64_C(2131794944),	// UQRSHRNh
    UINT64_C(2132843520),	// UQRSHRNs
    UINT64_C(1862835200),	// UQRSHRNv16i8_shift
    UINT64_C(790666240),	// UQRSHRNv2i32_shift
    UINT64_C(789617664),	// UQRSHRNv4i16_shift
    UINT64_C(1864408064),	// UQRSHRNv4i32_shift
    UINT64_C(1863359488),	// UQRSHRNv8i16_shift
    UINT64_C(789093376),	// UQRSHRNv8i8_shift
    UINT64_C(2131260416),	// UQSHLb
    UINT64_C(2134930432),	// UQSHLd
    UINT64_C(2131784704),	// UQSHLh
    UINT64_C(2132833280),	// UQSHLs
    UINT64_C(1847610368),	// UQSHLv16i8
    UINT64_C(1862824960),	// UQSHLv16i8_shift
    UINT64_C(2120240128),	// UQSHLv1i16
    UINT64_C(2124434432),	// UQSHLv1i32
    UINT64_C(2128628736),	// UQSHLv1i64
    UINT64_C(2116045824),	// UQSHLv1i8
    UINT64_C(782257152),	// UQSHLv2i32
    UINT64_C(790656000),	// UQSHLv2i32_shift
    UINT64_C(1860193280),	// UQSHLv2i64
    UINT64_C(1866494976),	// UQSHLv2i64_shift
    UINT64_C(778062848),	// UQSHLv4i16
    UINT64_C(789607424),	// UQSHLv4i16_shift
    UINT64_C(1855998976),	// UQSHLv4i32
    UINT64_C(1864397824),	// UQSHLv4i32_shift
    UINT64_C(1851804672),	// UQSHLv8i16
    UINT64_C(1863349248),	// UQSHLv8i16_shift
    UINT64_C(773868544),	// UQSHLv8i8
    UINT64_C(789083136),	// UQSHLv8i8_shift
    UINT64_C(2131268608),	// UQSHRNb
    UINT64_C(2131792896),	// UQSHRNh
    UINT64_C(2132841472),	// UQSHRNs
    UINT64_C(1862833152),	// UQSHRNv16i8_shift
    UINT64_C(790664192),	// UQSHRNv2i32_shift
    UINT64_C(789615616),	// UQSHRNv4i16_shift
    UINT64_C(1864406016),	// UQSHRNv4i32_shift
    UINT64_C(1863357440),	// UQSHRNv8i16_shift
    UINT64_C(789091328),	// UQSHRNv8i8_shift
    UINT64_C(1847602176),	// UQSUBv16i8
    UINT64_C(2120231936),	// UQSUBv1i16
    UINT64_C(2124426240),	// UQSUBv1i32
    UINT64_C(2128620544),	// UQSUBv1i64
    UINT64_C(2116037632),	// UQSUBv1i8
    UINT64_C(782248960),	// UQSUBv2i32
    UINT64_C(1860185088),	// UQSUBv2i64
    UINT64_C(778054656),	// UQSUBv4i16
    UINT64_C(1855990784),	// UQSUBv4i32
    UINT64_C(1851796480),	// UQSUBv8i16
    UINT64_C(773860352),	// UQSUBv8i8
    UINT64_C(1847674880),	// UQXTNv16i8
    UINT64_C(2120304640),	// UQXTNv1i16
    UINT64_C(2124498944),	// UQXTNv1i32
    UINT64_C(2116110336),	// UQXTNv1i8
    UINT64_C(782321664),	// UQXTNv2i32
    UINT64_C(778127360),	// UQXTNv4i16
    UINT64_C(1856063488),	// UQXTNv4i32
    UINT64_C(1851869184),	// UQXTNv8i16
    UINT64_C(773933056),	// UQXTNv8i8
    UINT64_C(245483520),	// URECPEv2i32
    UINT64_C(1319225344),	// URECPEv4i32
    UINT64_C(1847596032),	// URHADDv16i8
    UINT64_C(782242816),	// URHADDv2i32
    UINT64_C(778048512),	// URHADDv4i16
    UINT64_C(1855984640),	// URHADDv4i32
    UINT64_C(1851790336),	// URHADDv8i16
    UINT64_C(773854208),	// URHADDv8i8
    UINT64_C(1847612416),	// URSHLv16i8
    UINT64_C(2128630784),	// URSHLv1i64
    UINT64_C(782259200),	// URSHLv2i32
    UINT64_C(1860195328),	// URSHLv2i64
    UINT64_C(778064896),	// URSHLv4i16
    UINT64_C(1856001024),	// URSHLv4i32
    UINT64_C(1851806720),	// URSHLv8i16
    UINT64_C(773870592),	// URSHLv8i8
    UINT64_C(2134909952),	// URSHRd
    UINT64_C(1862804480),	// URSHRv16i8_shift
    UINT64_C(790635520),	// URSHRv2i32_shift
    UINT64_C(1866474496),	// URSHRv2i64_shift
    UINT64_C(789586944),	// URSHRv4i16_shift
    UINT64_C(1864377344),	// URSHRv4i32_shift
    UINT64_C(1863328768),	// URSHRv8i16_shift
    UINT64_C(789062656),	// URSHRv8i8_shift
    UINT64_C(782354432),	// URSQRTEv2i32
    UINT64_C(1856096256),	// URSQRTEv4i32
    UINT64_C(2134914048),	// URSRAd
    UINT64_C(1862808576),	// URSRAv16i8_shift
    UINT64_C(790639616),	// URSRAv2i32_shift
    UINT64_C(1866478592),	// URSRAv2i64_shift
    UINT64_C(789591040),	// URSRAv4i16_shift
    UINT64_C(1864381440),	// URSRAv4i32_shift
    UINT64_C(1863332864),	// URSRAv8i16_shift
    UINT64_C(789066752),	// URSRAv8i8_shift
    UINT64_C(1862837248),	// USHLLv16i8_shift
    UINT64_C(790668288),	// USHLLv2i32_shift
    UINT64_C(789619712),	// USHLLv4i16_shift
    UINT64_C(1864410112),	// USHLLv4i32_shift
    UINT64_C(1863361536),	// USHLLv8i16_shift
    UINT64_C(789095424),	// USHLLv8i8_shift
    UINT64_C(1847608320),	// USHLv16i8
    UINT64_C(2128626688),	// USHLv1i64
    UINT64_C(782255104),	// USHLv2i32
    UINT64_C(1860191232),	// USHLv2i64
    UINT64_C(778060800),	// USHLv4i16
    UINT64_C(1855996928),	// USHLv4i32
    UINT64_C(1851802624),	// USHLv8i16
    UINT64_C(773866496),	// USHLv8i8
    UINT64_C(2134901760),	// USHRd
    UINT64_C(1862796288),	// USHRv16i8_shift
    UINT64_C(790627328),	// USHRv2i32_shift
    UINT64_C(1866466304),	// USHRv2i64_shift
    UINT64_C(789578752),	// USHRv4i16_shift
    UINT64_C(1864369152),	// USHRv4i32_shift
    UINT64_C(1863320576),	// USHRv8i16_shift
    UINT64_C(789054464),	// USHRv8i8_shift
    UINT64_C(1847605248),	// USQADDv16i8
    UINT64_C(2120235008),	// USQADDv1i16
    UINT64_C(2124429312),	// USQADDv1i32
    UINT64_C(2128623616),	// USQADDv1i64
    UINT64_C(2116040704),	// USQADDv1i8
    UINT64_C(782252032),	// USQADDv2i32
    UINT64_C(1860188160),	// USQADDv2i64
    UINT64_C(778057728),	// USQADDv4i16
    UINT64_C(1855993856),	// USQADDv4i32
    UINT64_C(1851799552),	// USQADDv8i16
    UINT64_C(773863424),	// USQADDv8i8
    UINT64_C(2134905856),	// USRAd
    UINT64_C(1862800384),	// USRAv16i8_shift
    UINT64_C(790631424),	// USRAv2i32_shift
    UINT64_C(1866470400),	// USRAv2i64_shift
    UINT64_C(789582848),	// USRAv4i16_shift
    UINT64_C(1864373248),	// USRAv4i32_shift
    UINT64_C(1863324672),	// USRAv8i16_shift
    UINT64_C(789058560),	// USRAv8i8_shift
    UINT64_C(1847599104),	// USUBLv16i8_v8i16
    UINT64_C(782245888),	// USUBLv2i32_v2i64
    UINT64_C(778051584),	// USUBLv4i16_v4i32
    UINT64_C(1855987712),	// USUBLv4i32_v2i64
    UINT64_C(1851793408),	// USUBLv8i16_v4i32
    UINT64_C(773857280),	// USUBLv8i8_v8i16
    UINT64_C(1847603200),	// USUBWv16i8_v8i16
    UINT64_C(782249984),	// USUBWv2i32_v2i64
    UINT64_C(778055680),	// USUBWv4i16_v4i32
    UINT64_C(1855991808),	// USUBWv4i32_v2i64
    UINT64_C(1851797504),	// USUBWv8i16_v4i32
    UINT64_C(773861376),	// USUBWv8i8_v8i16
    UINT64_C(1308628992),	// UZP1v16i8
    UINT64_C(243275776),	// UZP1v2i32
    UINT64_C(1321211904),	// UZP1v2i64
    UINT64_C(239081472),	// UZP1v4i16
    UINT64_C(1317017600),	// UZP1v4i32
    UINT64_C(1312823296),	// UZP1v8i16
    UINT64_C(234887168),	// UZP1v8i8
    UINT64_C(1308645376),	// UZP2v16i8
    UINT64_C(243292160),	// UZP2v2i32
    UINT64_C(1321228288),	// UZP2v2i64
    UINT64_C(239097856),	// UZP2v4i16
    UINT64_C(1317033984),	// UZP2v4i32
    UINT64_C(1312839680),	// UZP2v8i16
    UINT64_C(234903552),	// UZP2v8i8
    UINT64_C(1310795776),	// XTNv16i8
    UINT64_C(245442560),	// XTNv2i32
    UINT64_C(241248256),	// XTNv4i16
    UINT64_C(1319184384),	// XTNv4i32
    UINT64_C(1314990080),	// XTNv8i16
    UINT64_C(237053952),	// XTNv8i8
    UINT64_C(1308637184),	// ZIP1v16i8
    UINT64_C(243283968),	// ZIP1v2i32
    UINT64_C(1321220096),	// ZIP1v2i64
    UINT64_C(239089664),	// ZIP1v4i16
    UINT64_C(1317025792),	// ZIP1v4i32
    UINT64_C(1312831488),	// ZIP1v8i16
    UINT64_C(234895360),	// ZIP1v8i8
    UINT64_C(1308653568),	// ZIP2v16i8
    UINT64_C(243300352),	// ZIP2v2i32
    UINT64_C(1321236480),	// ZIP2v2i64
    UINT64_C(239106048),	// ZIP2v4i16
    UINT64_C(1317042176),	// ZIP2v4i32
    UINT64_C(1312847872),	// ZIP2v8i16
    UINT64_C(234911744),	// ZIP2v8i8
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case ARM64::ADDSWrr:
    case ARM64::ADDSXrr:
    case ARM64::ADDWrr:
    case ARM64::ADDXrr:
    case ARM64::ADJCALLSTACKDOWN:
    case ARM64::ADJCALLSTACKUP:
    case ARM64::ANDWrr:
    case ARM64::ANDXrr:
    case ARM64::ATOMIC_CMP_SWAP_I128:
    case ARM64::ATOMIC_CMP_SWAP_I16:
    case ARM64::ATOMIC_CMP_SWAP_I32:
    case ARM64::ATOMIC_CMP_SWAP_I64:
    case ARM64::ATOMIC_CMP_SWAP_I8:
    case ARM64::ATOMIC_LOAD_ADD_I128:
    case ARM64::ATOMIC_LOAD_ADD_I16:
    case ARM64::ATOMIC_LOAD_ADD_I32:
    case ARM64::ATOMIC_LOAD_ADD_I64:
    case ARM64::ATOMIC_LOAD_ADD_I8:
    case ARM64::ATOMIC_LOAD_AND_I128:
    case ARM64::ATOMIC_LOAD_AND_I16:
    case ARM64::ATOMIC_LOAD_AND_I32:
    case ARM64::ATOMIC_LOAD_AND_I64:
    case ARM64::ATOMIC_LOAD_AND_I8:
    case ARM64::ATOMIC_LOAD_MAX_I128:
    case ARM64::ATOMIC_LOAD_MAX_I16:
    case ARM64::ATOMIC_LOAD_MAX_I32:
    case ARM64::ATOMIC_LOAD_MAX_I64:
    case ARM64::ATOMIC_LOAD_MAX_I8:
    case ARM64::ATOMIC_LOAD_MIN_I128:
    case ARM64::ATOMIC_LOAD_MIN_I16:
    case ARM64::ATOMIC_LOAD_MIN_I32:
    case ARM64::ATOMIC_LOAD_MIN_I64:
    case ARM64::ATOMIC_LOAD_MIN_I8:
    case ARM64::ATOMIC_LOAD_NAND_I128:
    case ARM64::ATOMIC_LOAD_NAND_I16:
    case ARM64::ATOMIC_LOAD_NAND_I32:
    case ARM64::ATOMIC_LOAD_NAND_I64:
    case ARM64::ATOMIC_LOAD_NAND_I8:
    case ARM64::ATOMIC_LOAD_OR_I128:
    case ARM64::ATOMIC_LOAD_OR_I16:
    case ARM64::ATOMIC_LOAD_OR_I32:
    case ARM64::ATOMIC_LOAD_OR_I64:
    case ARM64::ATOMIC_LOAD_OR_I8:
    case ARM64::ATOMIC_LOAD_SUB_I128:
    case ARM64::ATOMIC_LOAD_SUB_I16:
    case ARM64::ATOMIC_LOAD_SUB_I32:
    case ARM64::ATOMIC_LOAD_SUB_I64:
    case ARM64::ATOMIC_LOAD_SUB_I8:
    case ARM64::ATOMIC_LOAD_UMAX_I128:
    case ARM64::ATOMIC_LOAD_UMAX_I16:
    case ARM64::ATOMIC_LOAD_UMAX_I32:
    case ARM64::ATOMIC_LOAD_UMAX_I64:
    case ARM64::ATOMIC_LOAD_UMAX_I8:
    case ARM64::ATOMIC_LOAD_UMIN_I128:
    case ARM64::ATOMIC_LOAD_UMIN_I16:
    case ARM64::ATOMIC_LOAD_UMIN_I32:
    case ARM64::ATOMIC_LOAD_UMIN_I64:
    case ARM64::ATOMIC_LOAD_UMIN_I8:
    case ARM64::ATOMIC_LOAD_XOR_I128:
    case ARM64::ATOMIC_LOAD_XOR_I16:
    case ARM64::ATOMIC_LOAD_XOR_I32:
    case ARM64::ATOMIC_LOAD_XOR_I64:
    case ARM64::ATOMIC_LOAD_XOR_I8:
    case ARM64::ATOMIC_SWAP_I128:
    case ARM64::ATOMIC_SWAP_I16:
    case ARM64::ATOMIC_SWAP_I32:
    case ARM64::ATOMIC_SWAP_I64:
    case ARM64::ATOMIC_SWAP_I8:
    case ARM64::BICWrr:
    case ARM64::BICXrr:
    case ARM64::DRPS:
    case ARM64::EONWrr:
    case ARM64::EONXrr:
    case ARM64::EORWrr:
    case ARM64::EORXrr:
    case ARM64::ERET:
    case ARM64::F128CSEL:
    case ARM64::LDRBBpost_isel:
    case ARM64::LDRBBpre_isel:
    case ARM64::LDRDpost_isel:
    case ARM64::LDRDpre_isel:
    case ARM64::LDRHHpost_isel:
    case ARM64::LDRHHpre_isel:
    case ARM64::LDRSBWpost_isel:
    case ARM64::LDRSBWpre_isel:
    case ARM64::LDRSBXpost_isel:
    case ARM64::LDRSBXpre_isel:
    case ARM64::LDRSHWpost_isel:
    case ARM64::LDRSHWpre_isel:
    case ARM64::LDRSHXpost_isel:
    case ARM64::LDRSHXpre_isel:
    case ARM64::LDRSWpost_isel:
    case ARM64::LDRSWpre_isel:
    case ARM64::LDRSpost_isel:
    case ARM64::LDRSpre_isel:
    case ARM64::LDRWpost_isel:
    case ARM64::LDRWpre_isel:
    case ARM64::LDRXpost_isel:
    case ARM64::LDRXpre_isel:
    case ARM64::LOADgot:
    case ARM64::MOVaddr:
    case ARM64::MOVaddrBA:
    case ARM64::MOVaddrCP:
    case ARM64::MOVaddrEXT:
    case ARM64::MOVaddrJT:
    case ARM64::MOVaddrTLS:
    case ARM64::MOVi32imm:
    case ARM64::MOVi64imm:
    case ARM64::ORNWrr:
    case ARM64::ORNXrr:
    case ARM64::ORRWrr:
    case ARM64::ORRXrr:
    case ARM64::RET_ReallyLR:
    case ARM64::STRBBpre_isel:
    case ARM64::STRDpre_isel:
    case ARM64::STRHHpre_isel:
    case ARM64::STRSpre_isel:
    case ARM64::STRWpre_isel:
    case ARM64::STRXpre_isel:
    case ARM64::SUBSWrr:
    case ARM64::SUBSXrr:
    case ARM64::SUBWrr:
    case ARM64::SUBXrr:
    case ARM64::TCRETURNdi:
    case ARM64::TCRETURNri:
    case ARM64::TLSDESCCALL:
    case ARM64::TLSDESC_BLR: {
      break;
    }
    case ARM64::CLREX:
    case ARM64::DMB:
    case ARM64::DSB:
    case ARM64::ISB: {
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
    case ARM64::ABSv16i8:
    case ARM64::ABSv1i64:
    case ARM64::ABSv2i32:
    case ARM64::ABSv2i64:
    case ARM64::ABSv4i16:
    case ARM64::ABSv4i32:
    case ARM64::ABSv8i16:
    case ARM64::ABSv8i8:
    case ARM64::ADDPv2i64p:
    case ARM64::ADDVv16i8v:
    case ARM64::ADDVv4i16v:
    case ARM64::ADDVv4i32v:
    case ARM64::ADDVv8i16v:
    case ARM64::ADDVv8i8v:
    case ARM64::AESIMCrr:
    case ARM64::AESMCrr:
    case ARM64::CLSWr:
    case ARM64::CLSXr:
    case ARM64::CLSv16i8:
    case ARM64::CLSv2i32:
    case ARM64::CLSv4i16:
    case ARM64::CLSv4i32:
    case ARM64::CLSv8i16:
    case ARM64::CLSv8i8:
    case ARM64::CLZWr:
    case ARM64::CLZXr:
    case ARM64::CLZv16i8:
    case ARM64::CLZv2i32:
    case ARM64::CLZv4i16:
    case ARM64::CLZv4i32:
    case ARM64::CLZv8i16:
    case ARM64::CLZv8i8:
    case ARM64::CMEQv16i8rz:
    case ARM64::CMEQv1i64rz:
    case ARM64::CMEQv2i32rz:
    case ARM64::CMEQv2i64rz:
    case ARM64::CMEQv4i16rz:
    case ARM64::CMEQv4i32rz:
    case ARM64::CMEQv8i16rz:
    case ARM64::CMEQv8i8rz:
    case ARM64::CMGEv16i8rz:
    case ARM64::CMGEv1i64rz:
    case ARM64::CMGEv2i32rz:
    case ARM64::CMGEv2i64rz:
    case ARM64::CMGEv4i16rz:
    case ARM64::CMGEv4i32rz:
    case ARM64::CMGEv8i16rz:
    case ARM64::CMGEv8i8rz:
    case ARM64::CMGTv16i8rz:
    case ARM64::CMGTv1i64rz:
    case ARM64::CMGTv2i32rz:
    case ARM64::CMGTv2i64rz:
    case ARM64::CMGTv4i16rz:
    case ARM64::CMGTv4i32rz:
    case ARM64::CMGTv8i16rz:
    case ARM64::CMGTv8i8rz:
    case ARM64::CMLEv16i8rz:
    case ARM64::CMLEv1i64rz:
    case ARM64::CMLEv2i32rz:
    case ARM64::CMLEv2i64rz:
    case ARM64::CMLEv4i16rz:
    case ARM64::CMLEv4i32rz:
    case ARM64::CMLEv8i16rz:
    case ARM64::CMLEv8i8rz:
    case ARM64::CMLTv16i8rz:
    case ARM64::CMLTv1i64rz:
    case ARM64::CMLTv2i32rz:
    case ARM64::CMLTv2i64rz:
    case ARM64::CMLTv4i16rz:
    case ARM64::CMLTv4i32rz:
    case ARM64::CMLTv8i16rz:
    case ARM64::CMLTv8i8rz:
    case ARM64::CNTv16i8:
    case ARM64::CNTv8i8:
    case ARM64::DUPv16i8gpr:
    case ARM64::DUPv2i32gpr:
    case ARM64::DUPv2i64gpr:
    case ARM64::DUPv4i16gpr:
    case ARM64::DUPv4i32gpr:
    case ARM64::DUPv8i16gpr:
    case ARM64::DUPv8i8gpr:
    case ARM64::FABSDr:
    case ARM64::FABSSr:
    case ARM64::FABSv2f32:
    case ARM64::FABSv2f64:
    case ARM64::FABSv4f32:
    case ARM64::FADDPv2i32p:
    case ARM64::FADDPv2i64p:
    case ARM64::FCMEQv1i32rz:
    case ARM64::FCMEQv1i64rz:
    case ARM64::FCMEQv2i32rz:
    case ARM64::FCMEQv2i64rz:
    case ARM64::FCMEQv4i32rz:
    case ARM64::FCMGEv1i32rz:
    case ARM64::FCMGEv1i64rz:
    case ARM64::FCMGEv2i32rz:
    case ARM64::FCMGEv2i64rz:
    case ARM64::FCMGEv4i32rz:
    case ARM64::FCMGTv1i32rz:
    case ARM64::FCMGTv1i64rz:
    case ARM64::FCMGTv2i32rz:
    case ARM64::FCMGTv2i64rz:
    case ARM64::FCMGTv4i32rz:
    case ARM64::FCMLEv1i32rz:
    case ARM64::FCMLEv1i64rz:
    case ARM64::FCMLEv2i32rz:
    case ARM64::FCMLEv2i64rz:
    case ARM64::FCMLEv4i32rz:
    case ARM64::FCMLTv1i32rz:
    case ARM64::FCMLTv1i64rz:
    case ARM64::FCMLTv2i32rz:
    case ARM64::FCMLTv2i64rz:
    case ARM64::FCMLTv4i32rz:
    case ARM64::FCVTASUWDr:
    case ARM64::FCVTASUWSr:
    case ARM64::FCVTASUXDr:
    case ARM64::FCVTASUXSr:
    case ARM64::FCVTASv1i32:
    case ARM64::FCVTASv1i64:
    case ARM64::FCVTASv2f32:
    case ARM64::FCVTASv2f64:
    case ARM64::FCVTASv4f32:
    case ARM64::FCVTAUUWDr:
    case ARM64::FCVTAUUWSr:
    case ARM64::FCVTAUUXDr:
    case ARM64::FCVTAUUXSr:
    case ARM64::FCVTAUv1i32:
    case ARM64::FCVTAUv1i64:
    case ARM64::FCVTAUv2f32:
    case ARM64::FCVTAUv2f64:
    case ARM64::FCVTAUv4f32:
    case ARM64::FCVTDHr:
    case ARM64::FCVTDSr:
    case ARM64::FCVTHDr:
    case ARM64::FCVTHSr:
    case ARM64::FCVTLv2i32:
    case ARM64::FCVTLv4i16:
    case ARM64::FCVTLv4i32:
    case ARM64::FCVTLv8i16:
    case ARM64::FCVTMSUWDr:
    case ARM64::FCVTMSUWSr:
    case ARM64::FCVTMSUXDr:
    case ARM64::FCVTMSUXSr:
    case ARM64::FCVTMSv1i32:
    case ARM64::FCVTMSv1i64:
    case ARM64::FCVTMSv2f32:
    case ARM64::FCVTMSv2f64:
    case ARM64::FCVTMSv4f32:
    case ARM64::FCVTMUUWDr:
    case ARM64::FCVTMUUWSr:
    case ARM64::FCVTMUUXDr:
    case ARM64::FCVTMUUXSr:
    case ARM64::FCVTMUv1i32:
    case ARM64::FCVTMUv1i64:
    case ARM64::FCVTMUv2f32:
    case ARM64::FCVTMUv2f64:
    case ARM64::FCVTMUv4f32:
    case ARM64::FCVTNSUWDr:
    case ARM64::FCVTNSUWSr:
    case ARM64::FCVTNSUXDr:
    case ARM64::FCVTNSUXSr:
    case ARM64::FCVTNSv1i32:
    case ARM64::FCVTNSv1i64:
    case ARM64::FCVTNSv2f32:
    case ARM64::FCVTNSv2f64:
    case ARM64::FCVTNSv4f32:
    case ARM64::FCVTNUUWDr:
    case ARM64::FCVTNUUWSr:
    case ARM64::FCVTNUUXDr:
    case ARM64::FCVTNUUXSr:
    case ARM64::FCVTNUv1i32:
    case ARM64::FCVTNUv1i64:
    case ARM64::FCVTNUv2f32:
    case ARM64::FCVTNUv2f64:
    case ARM64::FCVTNUv4f32:
    case ARM64::FCVTNv2i32:
    case ARM64::FCVTNv4i16:
    case ARM64::FCVTPSUWDr:
    case ARM64::FCVTPSUWSr:
    case ARM64::FCVTPSUXDr:
    case ARM64::FCVTPSUXSr:
    case ARM64::FCVTPSv1i32:
    case ARM64::FCVTPSv1i64:
    case ARM64::FCVTPSv2f32:
    case ARM64::FCVTPSv2f64:
    case ARM64::FCVTPSv4f32:
    case ARM64::FCVTPUUWDr:
    case ARM64::FCVTPUUWSr:
    case ARM64::FCVTPUUXDr:
    case ARM64::FCVTPUUXSr:
    case ARM64::FCVTPUv1i32:
    case ARM64::FCVTPUv1i64:
    case ARM64::FCVTPUv2f32:
    case ARM64::FCVTPUv2f64:
    case ARM64::FCVTPUv4f32:
    case ARM64::FCVTSDr:
    case ARM64::FCVTSHr:
    case ARM64::FCVTXNv1i64:
    case ARM64::FCVTXNv2f32:
    case ARM64::FCVTZSUWDr:
    case ARM64::FCVTZSUWSr:
    case ARM64::FCVTZSUXDr:
    case ARM64::FCVTZSUXSr:
    case ARM64::FCVTZSv1i32:
    case ARM64::FCVTZSv1i64:
    case ARM64::FCVTZSv2f32:
    case ARM64::FCVTZSv2f64:
    case ARM64::FCVTZSv4f32:
    case ARM64::FCVTZUUWDr:
    case ARM64::FCVTZUUWSr:
    case ARM64::FCVTZUUXDr:
    case ARM64::FCVTZUUXSr:
    case ARM64::FCVTZUv1i32:
    case ARM64::FCVTZUv1i64:
    case ARM64::FCVTZUv2f32:
    case ARM64::FCVTZUv2f64:
    case ARM64::FCVTZUv4f32:
    case ARM64::FMAXNMPv2i32p:
    case ARM64::FMAXNMPv2i64p:
    case ARM64::FMAXNMVv4i32v:
    case ARM64::FMAXPv2i32p:
    case ARM64::FMAXPv2i64p:
    case ARM64::FMAXVv4i32v:
    case ARM64::FMINNMPv2i32p:
    case ARM64::FMINNMPv2i64p:
    case ARM64::FMINNMVv4i32v:
    case ARM64::FMINPv2i32p:
    case ARM64::FMINPv2i64p:
    case ARM64::FMINVv4i32v:
    case ARM64::FMOVDXHighr:
    case ARM64::FMOVDXr:
    case ARM64::FMOVDr:
    case ARM64::FMOVSWr:
    case ARM64::FMOVSr:
    case ARM64::FMOVWSr:
    case ARM64::FMOVXDHighr:
    case ARM64::FMOVXDr:
    case ARM64::FNEGDr:
    case ARM64::FNEGSr:
    case ARM64::FNEGv2f32:
    case ARM64::FNEGv2f64:
    case ARM64::FNEGv4f32:
    case ARM64::FRECPEv1i32:
    case ARM64::FRECPEv1i64:
    case ARM64::FRECPEv2f32:
    case ARM64::FRECPEv2f64:
    case ARM64::FRECPEv4f32:
    case ARM64::FRECPXv1i32:
    case ARM64::FRECPXv1i64:
    case ARM64::FRINTADr:
    case ARM64::FRINTASr:
    case ARM64::FRINTAv2f32:
    case ARM64::FRINTAv2f64:
    case ARM64::FRINTAv4f32:
    case ARM64::FRINTIDr:
    case ARM64::FRINTISr:
    case ARM64::FRINTIv2f32:
    case ARM64::FRINTIv2f64:
    case ARM64::FRINTIv4f32:
    case ARM64::FRINTMDr:
    case ARM64::FRINTMSr:
    case ARM64::FRINTMv2f32:
    case ARM64::FRINTMv2f64:
    case ARM64::FRINTMv4f32:
    case ARM64::FRINTNDr:
    case ARM64::FRINTNSr:
    case ARM64::FRINTNv2f32:
    case ARM64::FRINTNv2f64:
    case ARM64::FRINTNv4f32:
    case ARM64::FRINTPDr:
    case ARM64::FRINTPSr:
    case ARM64::FRINTPv2f32:
    case ARM64::FRINTPv2f64:
    case ARM64::FRINTPv4f32:
    case ARM64::FRINTXDr:
    case ARM64::FRINTXSr:
    case ARM64::FRINTXv2f32:
    case ARM64::FRINTXv2f64:
    case ARM64::FRINTXv4f32:
    case ARM64::FRINTZDr:
    case ARM64::FRINTZSr:
    case ARM64::FRINTZv2f32:
    case ARM64::FRINTZv2f64:
    case ARM64::FRINTZv4f32:
    case ARM64::FRSQRTEv1i32:
    case ARM64::FRSQRTEv1i64:
    case ARM64::FRSQRTEv2f32:
    case ARM64::FRSQRTEv2f64:
    case ARM64::FRSQRTEv4f32:
    case ARM64::FSQRTDr:
    case ARM64::FSQRTSr:
    case ARM64::FSQRTv2f32:
    case ARM64::FSQRTv2f64:
    case ARM64::FSQRTv4f32:
    case ARM64::NEGv16i8:
    case ARM64::NEGv1i64:
    case ARM64::NEGv2i32:
    case ARM64::NEGv2i64:
    case ARM64::NEGv4i16:
    case ARM64::NEGv4i32:
    case ARM64::NEGv8i16:
    case ARM64::NEGv8i8:
    case ARM64::NOTv16i8:
    case ARM64::NOTv8i8:
    case ARM64::RBITWr:
    case ARM64::RBITXr:
    case ARM64::RBITv16i8:
    case ARM64::RBITv8i8:
    case ARM64::REV16Wr:
    case ARM64::REV16Xr:
    case ARM64::REV16v16i8:
    case ARM64::REV16v8i8:
    case ARM64::REV32Xr:
    case ARM64::REV32v16i8:
    case ARM64::REV32v4i16:
    case ARM64::REV32v8i16:
    case ARM64::REV32v8i8:
    case ARM64::REV64v16i8:
    case ARM64::REV64v2i32:
    case ARM64::REV64v4i16:
    case ARM64::REV64v4i32:
    case ARM64::REV64v8i16:
    case ARM64::REV64v8i8:
    case ARM64::REVWr:
    case ARM64::REVXr:
    case ARM64::SADDLPv16i8_v8i16:
    case ARM64::SADDLPv2i32_v1i64:
    case ARM64::SADDLPv4i16_v2i32:
    case ARM64::SADDLPv4i32_v2i64:
    case ARM64::SADDLPv8i16_v4i32:
    case ARM64::SADDLPv8i8_v4i16:
    case ARM64::SADDLVv16i8v:
    case ARM64::SADDLVv4i16v:
    case ARM64::SADDLVv4i32v:
    case ARM64::SADDLVv8i16v:
    case ARM64::SADDLVv8i8v:
    case ARM64::SCVTFUWDri:
    case ARM64::SCVTFUWSri:
    case ARM64::SCVTFUXDri:
    case ARM64::SCVTFUXSri:
    case ARM64::SCVTFv1i32:
    case ARM64::SCVTFv1i64:
    case ARM64::SCVTFv2f32:
    case ARM64::SCVTFv2f64:
    case ARM64::SCVTFv4f32:
    case ARM64::SHA1Hrr:
    case ARM64::SHLLv16i8:
    case ARM64::SHLLv2i32:
    case ARM64::SHLLv4i16:
    case ARM64::SHLLv4i32:
    case ARM64::SHLLv8i16:
    case ARM64::SHLLv8i8:
    case ARM64::SMAXVv16i8v:
    case ARM64::SMAXVv4i16v:
    case ARM64::SMAXVv4i32v:
    case ARM64::SMAXVv8i16v:
    case ARM64::SMAXVv8i8v:
    case ARM64::SMINVv16i8v:
    case ARM64::SMINVv4i16v:
    case ARM64::SMINVv4i32v:
    case ARM64::SMINVv8i16v:
    case ARM64::SMINVv8i8v:
    case ARM64::SQABSv16i8:
    case ARM64::SQABSv1i16:
    case ARM64::SQABSv1i32:
    case ARM64::SQABSv1i64:
    case ARM64::SQABSv1i8:
    case ARM64::SQABSv2i32:
    case ARM64::SQABSv2i64:
    case ARM64::SQABSv4i16:
    case ARM64::SQABSv4i32:
    case ARM64::SQABSv8i16:
    case ARM64::SQABSv8i8:
    case ARM64::SQNEGv16i8:
    case ARM64::SQNEGv1i16:
    case ARM64::SQNEGv1i32:
    case ARM64::SQNEGv1i64:
    case ARM64::SQNEGv1i8:
    case ARM64::SQNEGv2i32:
    case ARM64::SQNEGv2i64:
    case ARM64::SQNEGv4i16:
    case ARM64::SQNEGv4i32:
    case ARM64::SQNEGv8i16:
    case ARM64::SQNEGv8i8:
    case ARM64::SQXTNv1i16:
    case ARM64::SQXTNv1i32:
    case ARM64::SQXTNv1i8:
    case ARM64::SQXTNv2i32:
    case ARM64::SQXTNv4i16:
    case ARM64::SQXTNv8i8:
    case ARM64::SQXTUNv1i16:
    case ARM64::SQXTUNv1i32:
    case ARM64::SQXTUNv1i8:
    case ARM64::SQXTUNv2i32:
    case ARM64::SQXTUNv4i16:
    case ARM64::SQXTUNv8i8:
    case ARM64::SUQADDv16i8:
    case ARM64::SUQADDv1i16:
    case ARM64::SUQADDv1i32:
    case ARM64::SUQADDv1i64:
    case ARM64::SUQADDv1i8:
    case ARM64::SUQADDv2i32:
    case ARM64::SUQADDv2i64:
    case ARM64::SUQADDv4i16:
    case ARM64::SUQADDv4i32:
    case ARM64::SUQADDv8i16:
    case ARM64::SUQADDv8i8:
    case ARM64::UADDLPv16i8_v8i16:
    case ARM64::UADDLPv2i32_v1i64:
    case ARM64::UADDLPv4i16_v2i32:
    case ARM64::UADDLPv4i32_v2i64:
    case ARM64::UADDLPv8i16_v4i32:
    case ARM64::UADDLPv8i8_v4i16:
    case ARM64::UADDLVv16i8v:
    case ARM64::UADDLVv4i16v:
    case ARM64::UADDLVv4i32v:
    case ARM64::UADDLVv8i16v:
    case ARM64::UADDLVv8i8v:
    case ARM64::UCVTFUWDri:
    case ARM64::UCVTFUWSri:
    case ARM64::UCVTFUXDri:
    case ARM64::UCVTFUXSri:
    case ARM64::UCVTFv1i32:
    case ARM64::UCVTFv1i64:
    case ARM64::UCVTFv2f32:
    case ARM64::UCVTFv2f64:
    case ARM64::UCVTFv4f32:
    case ARM64::UMAXVv16i8v:
    case ARM64::UMAXVv4i16v:
    case ARM64::UMAXVv4i32v:
    case ARM64::UMAXVv8i16v:
    case ARM64::UMAXVv8i8v:
    case ARM64::UMINVv16i8v:
    case ARM64::UMINVv4i16v:
    case ARM64::UMINVv4i32v:
    case ARM64::UMINVv8i16v:
    case ARM64::UMINVv8i8v:
    case ARM64::UQXTNv1i16:
    case ARM64::UQXTNv1i32:
    case ARM64::UQXTNv1i8:
    case ARM64::UQXTNv2i32:
    case ARM64::UQXTNv4i16:
    case ARM64::UQXTNv8i8:
    case ARM64::URECPEv2i32:
    case ARM64::URECPEv4i32:
    case ARM64::URSQRTEv2i32:
    case ARM64::URSQRTEv4i32:
    case ARM64::USQADDv1i16:
    case ARM64::USQADDv1i32:
    case ARM64::USQADDv1i8:
    case ARM64::XTNv2i32:
    case ARM64::XTNv4i16:
    case ARM64::XTNv8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::MULv4i16_indexed:
    case ARM64::MULv8i16_indexed:
    case ARM64::SMULLv4i16_indexed:
    case ARM64::SMULLv8i16_indexed:
    case ARM64::SQDMULHv1i16_indexed:
    case ARM64::SQDMULHv4i16_indexed:
    case ARM64::SQDMULHv8i16_indexed:
    case ARM64::SQDMULLv1i32_indexed:
    case ARM64::SQDMULLv4i16_indexed:
    case ARM64::SQDMULLv8i16_indexed:
    case ARM64::SQRDMULHv1i16_indexed:
    case ARM64::SQRDMULHv4i16_indexed:
    case ARM64::SQRDMULHv8i16_indexed:
    case ARM64::UMULLv4i16_indexed:
    case ARM64::UMULLv8i16_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      break;
    }
    case ARM64::ADCSWr:
    case ARM64::ADCSXr:
    case ARM64::ADCWr:
    case ARM64::ADCXr:
    case ARM64::ADDHNv2i64_v2i32:
    case ARM64::ADDHNv4i32_v4i16:
    case ARM64::ADDHNv8i16_v8i8:
    case ARM64::ADDPv16i8:
    case ARM64::ADDPv2i32:
    case ARM64::ADDPv2i64:
    case ARM64::ADDPv4i16:
    case ARM64::ADDPv4i32:
    case ARM64::ADDPv8i16:
    case ARM64::ADDPv8i8:
    case ARM64::ADDv16i8:
    case ARM64::ADDv1i64:
    case ARM64::ADDv2i32:
    case ARM64::ADDv2i64:
    case ARM64::ADDv4i16:
    case ARM64::ADDv4i32:
    case ARM64::ADDv8i16:
    case ARM64::ADDv8i8:
    case ARM64::ANDv16i8:
    case ARM64::ANDv8i8:
    case ARM64::ASRVWr:
    case ARM64::ASRVXr:
    case ARM64::BICv16i8:
    case ARM64::BICv8i8:
    case ARM64::BIFv16i8:
    case ARM64::BIFv8i8:
    case ARM64::CMEQv16i8:
    case ARM64::CMEQv1i64:
    case ARM64::CMEQv2i32:
    case ARM64::CMEQv2i64:
    case ARM64::CMEQv4i16:
    case ARM64::CMEQv4i32:
    case ARM64::CMEQv8i16:
    case ARM64::CMEQv8i8:
    case ARM64::CMGEv16i8:
    case ARM64::CMGEv1i64:
    case ARM64::CMGEv2i32:
    case ARM64::CMGEv2i64:
    case ARM64::CMGEv4i16:
    case ARM64::CMGEv4i32:
    case ARM64::CMGEv8i16:
    case ARM64::CMGEv8i8:
    case ARM64::CMGTv16i8:
    case ARM64::CMGTv1i64:
    case ARM64::CMGTv2i32:
    case ARM64::CMGTv2i64:
    case ARM64::CMGTv4i16:
    case ARM64::CMGTv4i32:
    case ARM64::CMGTv8i16:
    case ARM64::CMGTv8i8:
    case ARM64::CMHIv16i8:
    case ARM64::CMHIv1i64:
    case ARM64::CMHIv2i32:
    case ARM64::CMHIv2i64:
    case ARM64::CMHIv4i16:
    case ARM64::CMHIv4i32:
    case ARM64::CMHIv8i16:
    case ARM64::CMHIv8i8:
    case ARM64::CMHSv16i8:
    case ARM64::CMHSv1i64:
    case ARM64::CMHSv2i32:
    case ARM64::CMHSv2i64:
    case ARM64::CMHSv4i16:
    case ARM64::CMHSv4i32:
    case ARM64::CMHSv8i16:
    case ARM64::CMHSv8i8:
    case ARM64::CMTSTv16i8:
    case ARM64::CMTSTv1i64:
    case ARM64::CMTSTv2i32:
    case ARM64::CMTSTv2i64:
    case ARM64::CMTSTv4i16:
    case ARM64::CMTSTv4i32:
    case ARM64::CMTSTv8i16:
    case ARM64::CMTSTv8i8:
    case ARM64::EORv16i8:
    case ARM64::EORv8i8:
    case ARM64::FABD32:
    case ARM64::FABD64:
    case ARM64::FABDv2f32:
    case ARM64::FABDv2f64:
    case ARM64::FABDv4f32:
    case ARM64::FACGE32:
    case ARM64::FACGE64:
    case ARM64::FACGEv2f32:
    case ARM64::FACGEv2f64:
    case ARM64::FACGEv4f32:
    case ARM64::FACGT32:
    case ARM64::FACGT64:
    case ARM64::FACGTv2f32:
    case ARM64::FACGTv2f64:
    case ARM64::FACGTv4f32:
    case ARM64::FADDDrr:
    case ARM64::FADDPv2f32:
    case ARM64::FADDPv2f64:
    case ARM64::FADDPv4f32:
    case ARM64::FADDSrr:
    case ARM64::FADDv2f32:
    case ARM64::FADDv2f64:
    case ARM64::FADDv4f32:
    case ARM64::FCMEQ32:
    case ARM64::FCMEQ64:
    case ARM64::FCMEQv2f32:
    case ARM64::FCMEQv2f64:
    case ARM64::FCMEQv4f32:
    case ARM64::FCMGE32:
    case ARM64::FCMGE64:
    case ARM64::FCMGEv2f32:
    case ARM64::FCMGEv2f64:
    case ARM64::FCMGEv4f32:
    case ARM64::FCMGT32:
    case ARM64::FCMGT64:
    case ARM64::FCMGTv2f32:
    case ARM64::FCMGTv2f64:
    case ARM64::FCMGTv4f32:
    case ARM64::FDIVDrr:
    case ARM64::FDIVSrr:
    case ARM64::FDIVv2f32:
    case ARM64::FDIVv2f64:
    case ARM64::FDIVv4f32:
    case ARM64::FMAXDrr:
    case ARM64::FMAXNMDrr:
    case ARM64::FMAXNMPv2f32:
    case ARM64::FMAXNMPv2f64:
    case ARM64::FMAXNMPv4f32:
    case ARM64::FMAXNMSrr:
    case ARM64::FMAXNMv2f32:
    case ARM64::FMAXNMv2f64:
    case ARM64::FMAXNMv4f32:
    case ARM64::FMAXPv2f32:
    case ARM64::FMAXPv2f64:
    case ARM64::FMAXPv4f32:
    case ARM64::FMAXSrr:
    case ARM64::FMAXv2f32:
    case ARM64::FMAXv2f64:
    case ARM64::FMAXv4f32:
    case ARM64::FMINDrr:
    case ARM64::FMINNMDrr:
    case ARM64::FMINNMPv2f32:
    case ARM64::FMINNMPv2f64:
    case ARM64::FMINNMPv4f32:
    case ARM64::FMINNMSrr:
    case ARM64::FMINNMv2f32:
    case ARM64::FMINNMv2f64:
    case ARM64::FMINNMv4f32:
    case ARM64::FMINPv2f32:
    case ARM64::FMINPv2f64:
    case ARM64::FMINPv4f32:
    case ARM64::FMINSrr:
    case ARM64::FMINv2f32:
    case ARM64::FMINv2f64:
    case ARM64::FMINv4f32:
    case ARM64::FMULDrr:
    case ARM64::FMULSrr:
    case ARM64::FMULX32:
    case ARM64::FMULX64:
    case ARM64::FMULXv2f32:
    case ARM64::FMULXv2f64:
    case ARM64::FMULXv4f32:
    case ARM64::FMULv2f32:
    case ARM64::FMULv2f64:
    case ARM64::FMULv4f32:
    case ARM64::FNMULDrr:
    case ARM64::FNMULSrr:
    case ARM64::FRECPS32:
    case ARM64::FRECPS64:
    case ARM64::FRECPSv2f32:
    case ARM64::FRECPSv2f64:
    case ARM64::FRECPSv4f32:
    case ARM64::FRSQRTS32:
    case ARM64::FRSQRTS64:
    case ARM64::FRSQRTSv2f32:
    case ARM64::FRSQRTSv2f64:
    case ARM64::FRSQRTSv4f32:
    case ARM64::FSUBDrr:
    case ARM64::FSUBSrr:
    case ARM64::FSUBv2f32:
    case ARM64::FSUBv2f64:
    case ARM64::FSUBv4f32:
    case ARM64::LSLVWr:
    case ARM64::LSLVXr:
    case ARM64::LSRVWr:
    case ARM64::LSRVXr:
    case ARM64::MULv16i8:
    case ARM64::MULv2i32:
    case ARM64::MULv4i16:
    case ARM64::MULv4i32:
    case ARM64::MULv8i16:
    case ARM64::MULv8i8:
    case ARM64::ORNv16i8:
    case ARM64::ORNv8i8:
    case ARM64::ORRv16i8:
    case ARM64::ORRv8i8:
    case ARM64::PMULLv16i8:
    case ARM64::PMULLv1i64:
    case ARM64::PMULLv2i64:
    case ARM64::PMULLv8i8:
    case ARM64::PMULv16i8:
    case ARM64::PMULv8i8:
    case ARM64::RADDHNv2i64_v2i32:
    case ARM64::RADDHNv4i32_v4i16:
    case ARM64::RADDHNv8i16_v8i8:
    case ARM64::RORVWr:
    case ARM64::RORVXr:
    case ARM64::RSUBHNv2i64_v2i32:
    case ARM64::RSUBHNv4i32_v4i16:
    case ARM64::RSUBHNv8i16_v8i8:
    case ARM64::SABDLv16i8_v8i16:
    case ARM64::SABDLv2i32_v2i64:
    case ARM64::SABDLv4i16_v4i32:
    case ARM64::SABDLv4i32_v2i64:
    case ARM64::SABDLv8i16_v4i32:
    case ARM64::SABDLv8i8_v8i16:
    case ARM64::SABDv16i8:
    case ARM64::SABDv2i32:
    case ARM64::SABDv4i16:
    case ARM64::SABDv4i32:
    case ARM64::SABDv8i16:
    case ARM64::SABDv8i8:
    case ARM64::SADDLv16i8_v8i16:
    case ARM64::SADDLv2i32_v2i64:
    case ARM64::SADDLv4i16_v4i32:
    case ARM64::SADDLv4i32_v2i64:
    case ARM64::SADDLv8i16_v4i32:
    case ARM64::SADDLv8i8_v8i16:
    case ARM64::SADDWv16i8_v8i16:
    case ARM64::SADDWv2i32_v2i64:
    case ARM64::SADDWv4i16_v4i32:
    case ARM64::SADDWv4i32_v2i64:
    case ARM64::SADDWv8i16_v4i32:
    case ARM64::SADDWv8i8_v8i16:
    case ARM64::SBCSWr:
    case ARM64::SBCSXr:
    case ARM64::SBCWr:
    case ARM64::SBCXr:
    case ARM64::SDIVWr:
    case ARM64::SDIVXr:
    case ARM64::SHADDv16i8:
    case ARM64::SHADDv2i32:
    case ARM64::SHADDv4i16:
    case ARM64::SHADDv4i32:
    case ARM64::SHADDv8i16:
    case ARM64::SHADDv8i8:
    case ARM64::SHSUBv16i8:
    case ARM64::SHSUBv2i32:
    case ARM64::SHSUBv4i16:
    case ARM64::SHSUBv4i32:
    case ARM64::SHSUBv8i16:
    case ARM64::SHSUBv8i8:
    case ARM64::SMAXPv16i8:
    case ARM64::SMAXPv2i32:
    case ARM64::SMAXPv4i16:
    case ARM64::SMAXPv4i32:
    case ARM64::SMAXPv8i16:
    case ARM64::SMAXPv8i8:
    case ARM64::SMAXv16i8:
    case ARM64::SMAXv2i32:
    case ARM64::SMAXv4i16:
    case ARM64::SMAXv4i32:
    case ARM64::SMAXv8i16:
    case ARM64::SMAXv8i8:
    case ARM64::SMINPv16i8:
    case ARM64::SMINPv2i32:
    case ARM64::SMINPv4i16:
    case ARM64::SMINPv4i32:
    case ARM64::SMINPv8i16:
    case ARM64::SMINPv8i8:
    case ARM64::SMINv16i8:
    case ARM64::SMINv2i32:
    case ARM64::SMINv4i16:
    case ARM64::SMINv4i32:
    case ARM64::SMINv8i16:
    case ARM64::SMINv8i8:
    case ARM64::SMULHrr:
    case ARM64::SMULLv16i8_v8i16:
    case ARM64::SMULLv2i32_v2i64:
    case ARM64::SMULLv4i16_v4i32:
    case ARM64::SMULLv4i32_v2i64:
    case ARM64::SMULLv8i16_v4i32:
    case ARM64::SMULLv8i8_v8i16:
    case ARM64::SQADDv16i8:
    case ARM64::SQADDv1i16:
    case ARM64::SQADDv1i32:
    case ARM64::SQADDv1i64:
    case ARM64::SQADDv1i8:
    case ARM64::SQADDv2i32:
    case ARM64::SQADDv2i64:
    case ARM64::SQADDv4i16:
    case ARM64::SQADDv4i32:
    case ARM64::SQADDv8i16:
    case ARM64::SQADDv8i8:
    case ARM64::SQDMULHv1i16:
    case ARM64::SQDMULHv1i32:
    case ARM64::SQDMULHv2i32:
    case ARM64::SQDMULHv4i16:
    case ARM64::SQDMULHv4i32:
    case ARM64::SQDMULHv8i16:
    case ARM64::SQDMULLi16:
    case ARM64::SQDMULLi32:
    case ARM64::SQDMULLv2i32_v2i64:
    case ARM64::SQDMULLv4i16_v4i32:
    case ARM64::SQDMULLv4i32_v2i64:
    case ARM64::SQDMULLv8i16_v4i32:
    case ARM64::SQRDMULHv1i16:
    case ARM64::SQRDMULHv1i32:
    case ARM64::SQRDMULHv2i32:
    case ARM64::SQRDMULHv4i16:
    case ARM64::SQRDMULHv4i32:
    case ARM64::SQRDMULHv8i16:
    case ARM64::SQRSHLv16i8:
    case ARM64::SQRSHLv1i16:
    case ARM64::SQRSHLv1i32:
    case ARM64::SQRSHLv1i64:
    case ARM64::SQRSHLv1i8:
    case ARM64::SQRSHLv2i32:
    case ARM64::SQRSHLv2i64:
    case ARM64::SQRSHLv4i16:
    case ARM64::SQRSHLv4i32:
    case ARM64::SQRSHLv8i16:
    case ARM64::SQRSHLv8i8:
    case ARM64::SQSHLv16i8:
    case ARM64::SQSHLv1i16:
    case ARM64::SQSHLv1i32:
    case ARM64::SQSHLv1i64:
    case ARM64::SQSHLv1i8:
    case ARM64::SQSHLv2i32:
    case ARM64::SQSHLv2i64:
    case ARM64::SQSHLv4i16:
    case ARM64::SQSHLv4i32:
    case ARM64::SQSHLv8i16:
    case ARM64::SQSHLv8i8:
    case ARM64::SQSUBv16i8:
    case ARM64::SQSUBv1i16:
    case ARM64::SQSUBv1i32:
    case ARM64::SQSUBv1i64:
    case ARM64::SQSUBv1i8:
    case ARM64::SQSUBv2i32:
    case ARM64::SQSUBv2i64:
    case ARM64::SQSUBv4i16:
    case ARM64::SQSUBv4i32:
    case ARM64::SQSUBv8i16:
    case ARM64::SQSUBv8i8:
    case ARM64::SRHADDv16i8:
    case ARM64::SRHADDv2i32:
    case ARM64::SRHADDv4i16:
    case ARM64::SRHADDv4i32:
    case ARM64::SRHADDv8i16:
    case ARM64::SRHADDv8i8:
    case ARM64::SRSHLv16i8:
    case ARM64::SRSHLv1i64:
    case ARM64::SRSHLv2i32:
    case ARM64::SRSHLv2i64:
    case ARM64::SRSHLv4i16:
    case ARM64::SRSHLv4i32:
    case ARM64::SRSHLv8i16:
    case ARM64::SRSHLv8i8:
    case ARM64::SSHLv16i8:
    case ARM64::SSHLv1i64:
    case ARM64::SSHLv2i32:
    case ARM64::SSHLv2i64:
    case ARM64::SSHLv4i16:
    case ARM64::SSHLv4i32:
    case ARM64::SSHLv8i16:
    case ARM64::SSHLv8i8:
    case ARM64::SSUBLv16i8_v8i16:
    case ARM64::SSUBLv2i32_v2i64:
    case ARM64::SSUBLv4i16_v4i32:
    case ARM64::SSUBLv4i32_v2i64:
    case ARM64::SSUBLv8i16_v4i32:
    case ARM64::SSUBLv8i8_v8i16:
    case ARM64::SSUBWv16i8_v8i16:
    case ARM64::SSUBWv2i32_v2i64:
    case ARM64::SSUBWv4i16_v4i32:
    case ARM64::SSUBWv4i32_v2i64:
    case ARM64::SSUBWv8i16_v4i32:
    case ARM64::SSUBWv8i8_v8i16:
    case ARM64::SUBHNv2i64_v2i32:
    case ARM64::SUBHNv4i32_v4i16:
    case ARM64::SUBHNv8i16_v8i8:
    case ARM64::SUBv16i8:
    case ARM64::SUBv1i64:
    case ARM64::SUBv2i32:
    case ARM64::SUBv2i64:
    case ARM64::SUBv4i16:
    case ARM64::SUBv4i32:
    case ARM64::SUBv8i16:
    case ARM64::SUBv8i8:
    case ARM64::TRN1v16i8:
    case ARM64::TRN1v2i32:
    case ARM64::TRN1v2i64:
    case ARM64::TRN1v4i16:
    case ARM64::TRN1v4i32:
    case ARM64::TRN1v8i16:
    case ARM64::TRN1v8i8:
    case ARM64::TRN2v16i8:
    case ARM64::TRN2v2i32:
    case ARM64::TRN2v2i64:
    case ARM64::TRN2v4i16:
    case ARM64::TRN2v4i32:
    case ARM64::TRN2v8i16:
    case ARM64::TRN2v8i8:
    case ARM64::UABDLv16i8_v8i16:
    case ARM64::UABDLv2i32_v2i64:
    case ARM64::UABDLv4i16_v4i32:
    case ARM64::UABDLv4i32_v2i64:
    case ARM64::UABDLv8i16_v4i32:
    case ARM64::UABDLv8i8_v8i16:
    case ARM64::UABDv16i8:
    case ARM64::UABDv2i32:
    case ARM64::UABDv4i16:
    case ARM64::UABDv4i32:
    case ARM64::UABDv8i16:
    case ARM64::UABDv8i8:
    case ARM64::UADDLv16i8_v8i16:
    case ARM64::UADDLv2i32_v2i64:
    case ARM64::UADDLv4i16_v4i32:
    case ARM64::UADDLv4i32_v2i64:
    case ARM64::UADDLv8i16_v4i32:
    case ARM64::UADDLv8i8_v8i16:
    case ARM64::UADDWv16i8_v8i16:
    case ARM64::UADDWv2i32_v2i64:
    case ARM64::UADDWv4i16_v4i32:
    case ARM64::UADDWv4i32_v2i64:
    case ARM64::UADDWv8i16_v4i32:
    case ARM64::UADDWv8i8_v8i16:
    case ARM64::UDIVWr:
    case ARM64::UDIVXr:
    case ARM64::UHADDv16i8:
    case ARM64::UHADDv2i32:
    case ARM64::UHADDv4i16:
    case ARM64::UHADDv4i32:
    case ARM64::UHADDv8i16:
    case ARM64::UHADDv8i8:
    case ARM64::UHSUBv16i8:
    case ARM64::UHSUBv2i32:
    case ARM64::UHSUBv4i16:
    case ARM64::UHSUBv4i32:
    case ARM64::UHSUBv8i16:
    case ARM64::UHSUBv8i8:
    case ARM64::UMAXPv16i8:
    case ARM64::UMAXPv2i32:
    case ARM64::UMAXPv4i16:
    case ARM64::UMAXPv4i32:
    case ARM64::UMAXPv8i16:
    case ARM64::UMAXPv8i8:
    case ARM64::UMAXv16i8:
    case ARM64::UMAXv2i32:
    case ARM64::UMAXv4i16:
    case ARM64::UMAXv4i32:
    case ARM64::UMAXv8i16:
    case ARM64::UMAXv8i8:
    case ARM64::UMINPv16i8:
    case ARM64::UMINPv2i32:
    case ARM64::UMINPv4i16:
    case ARM64::UMINPv4i32:
    case ARM64::UMINPv8i16:
    case ARM64::UMINPv8i8:
    case ARM64::UMINv16i8:
    case ARM64::UMINv2i32:
    case ARM64::UMINv4i16:
    case ARM64::UMINv4i32:
    case ARM64::UMINv8i16:
    case ARM64::UMINv8i8:
    case ARM64::UMULHrr:
    case ARM64::UMULLv16i8_v8i16:
    case ARM64::UMULLv2i32_v2i64:
    case ARM64::UMULLv4i16_v4i32:
    case ARM64::UMULLv4i32_v2i64:
    case ARM64::UMULLv8i16_v4i32:
    case ARM64::UMULLv8i8_v8i16:
    case ARM64::UQADDv16i8:
    case ARM64::UQADDv1i16:
    case ARM64::UQADDv1i32:
    case ARM64::UQADDv1i64:
    case ARM64::UQADDv1i8:
    case ARM64::UQADDv2i32:
    case ARM64::UQADDv2i64:
    case ARM64::UQADDv4i16:
    case ARM64::UQADDv4i32:
    case ARM64::UQADDv8i16:
    case ARM64::UQADDv8i8:
    case ARM64::UQRSHLv16i8:
    case ARM64::UQRSHLv1i16:
    case ARM64::UQRSHLv1i32:
    case ARM64::UQRSHLv1i64:
    case ARM64::UQRSHLv1i8:
    case ARM64::UQRSHLv2i32:
    case ARM64::UQRSHLv2i64:
    case ARM64::UQRSHLv4i16:
    case ARM64::UQRSHLv4i32:
    case ARM64::UQRSHLv8i16:
    case ARM64::UQRSHLv8i8:
    case ARM64::UQSHLv16i8:
    case ARM64::UQSHLv1i16:
    case ARM64::UQSHLv1i32:
    case ARM64::UQSHLv1i64:
    case ARM64::UQSHLv1i8:
    case ARM64::UQSHLv2i32:
    case ARM64::UQSHLv2i64:
    case ARM64::UQSHLv4i16:
    case ARM64::UQSHLv4i32:
    case ARM64::UQSHLv8i16:
    case ARM64::UQSHLv8i8:
    case ARM64::UQSUBv16i8:
    case ARM64::UQSUBv1i16:
    case ARM64::UQSUBv1i32:
    case ARM64::UQSUBv1i64:
    case ARM64::UQSUBv1i8:
    case ARM64::UQSUBv2i32:
    case ARM64::UQSUBv2i64:
    case ARM64::UQSUBv4i16:
    case ARM64::UQSUBv4i32:
    case ARM64::UQSUBv8i16:
    case ARM64::UQSUBv8i8:
    case ARM64::URHADDv16i8:
    case ARM64::URHADDv2i32:
    case ARM64::URHADDv4i16:
    case ARM64::URHADDv4i32:
    case ARM64::URHADDv8i16:
    case ARM64::URHADDv8i8:
    case ARM64::URSHLv16i8:
    case ARM64::URSHLv1i64:
    case ARM64::URSHLv2i32:
    case ARM64::URSHLv2i64:
    case ARM64::URSHLv4i16:
    case ARM64::URSHLv4i32:
    case ARM64::URSHLv8i16:
    case ARM64::URSHLv8i8:
    case ARM64::USHLv16i8:
    case ARM64::USHLv1i64:
    case ARM64::USHLv2i32:
    case ARM64::USHLv2i64:
    case ARM64::USHLv4i16:
    case ARM64::USHLv4i32:
    case ARM64::USHLv8i16:
    case ARM64::USHLv8i8:
    case ARM64::USUBLv16i8_v8i16:
    case ARM64::USUBLv2i32_v2i64:
    case ARM64::USUBLv4i16_v4i32:
    case ARM64::USUBLv4i32_v2i64:
    case ARM64::USUBLv8i16_v4i32:
    case ARM64::USUBLv8i8_v8i16:
    case ARM64::USUBWv16i8_v8i16:
    case ARM64::USUBWv2i32_v2i64:
    case ARM64::USUBWv4i16_v4i32:
    case ARM64::USUBWv4i32_v2i64:
    case ARM64::USUBWv8i16_v4i32:
    case ARM64::USUBWv8i8_v8i16:
    case ARM64::UZP1v16i8:
    case ARM64::UZP1v2i32:
    case ARM64::UZP1v2i64:
    case ARM64::UZP1v4i16:
    case ARM64::UZP1v4i32:
    case ARM64::UZP1v8i16:
    case ARM64::UZP1v8i8:
    case ARM64::UZP2v16i8:
    case ARM64::UZP2v2i32:
    case ARM64::UZP2v2i64:
    case ARM64::UZP2v4i16:
    case ARM64::UZP2v4i32:
    case ARM64::UZP2v8i16:
    case ARM64::UZP2v8i8:
    case ARM64::ZIP1v16i8:
    case ARM64::ZIP1v2i32:
    case ARM64::ZIP1v2i64:
    case ARM64::ZIP1v4i16:
    case ARM64::ZIP1v4i32:
    case ARM64::ZIP1v8i16:
    case ARM64::ZIP1v8i8:
    case ARM64::ZIP2v16i8:
    case ARM64::ZIP2v2i32:
    case ARM64::ZIP2v2i64:
    case ARM64::ZIP2v4i16:
    case ARM64::ZIP2v4i32:
    case ARM64::ZIP2v8i16:
    case ARM64::ZIP2v8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::FMADDDrrr:
    case ARM64::FMADDSrrr:
    case ARM64::FMSUBDrrr:
    case ARM64::FMSUBSrrr:
    case ARM64::FNMADDDrrr:
    case ARM64::FNMADDSrrr:
    case ARM64::FNMSUBDrrr:
    case ARM64::FNMSUBSrrr:
    case ARM64::MADDWrrr:
    case ARM64::MADDXrrr:
    case ARM64::MSUBWrrr:
    case ARM64::MSUBXrrr:
    case ARM64::SMADDLrrr:
    case ARM64::SMSUBLrrr:
    case ARM64::UMADDLrrr:
    case ARM64::UMSUBLrrr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case ARM64::CSELWr:
    case ARM64::CSELXr:
    case ARM64::CSINCWr:
    case ARM64::CSINCXr:
    case ARM64::CSINVWr:
    case ARM64::CSINVXr:
    case ARM64::CSNEGWr:
    case ARM64::CSNEGXr:
    case ARM64::FCSELDrrr:
    case ARM64::FCSELSrrr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case ARM64::ADDSXrx64:
    case ARM64::ADDXrx64:
    case ARM64::SUBSXrx64:
    case ARM64::SUBXrx64: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: ext
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(32)) << 10;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case ARM64::ADDSWrx:
    case ARM64::ADDSXrx:
    case ARM64::ADDWrx:
    case ARM64::ADDXrx:
    case ARM64::SUBSWrx:
    case ARM64::SUBSXrx:
    case ARM64::SUBWrx:
    case ARM64::SUBXrx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: ext
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::FMULXv1i64_indexed:
    case ARM64::FMULXv2i64_indexed:
    case ARM64::FMULv1i64_indexed:
    case ARM64::FMULv2i64_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      break;
    }
    case ARM64::FMULXv1i32_indexed:
    case ARM64::FMULXv2i32_indexed:
    case ARM64::FMULXv4i32_indexed:
    case ARM64::FMULv1i32_indexed:
    case ARM64::FMULv2i32_indexed:
    case ARM64::FMULv4i32_indexed:
    case ARM64::MULv2i32_indexed:
    case ARM64::MULv4i32_indexed:
    case ARM64::SMULLv2i32_indexed:
    case ARM64::SMULLv4i32_indexed:
    case ARM64::SQDMULHv1i32_indexed:
    case ARM64::SQDMULHv2i32_indexed:
    case ARM64::SQDMULHv4i32_indexed:
    case ARM64::SQDMULLv1i64_indexed:
    case ARM64::SQDMULLv2i32_indexed:
    case ARM64::SQDMULLv4i32_indexed:
    case ARM64::SQRDMULHv1i32_indexed:
    case ARM64::SQRDMULHv2i32_indexed:
    case ARM64::SQRDMULHv4i32_indexed:
    case ARM64::UMULLv2i32_indexed:
    case ARM64::UMULLv4i32_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      break;
    }
    case ARM64::EXTv16i8:
    case ARM64::EXTv8i8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case ARM64::EXTRWrri:
    case ARM64::EXTRXrri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::DUPv2i64lane:
    case ARM64::UMOVvi64: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case ARM64::DUPv16i8lane:
    case ARM64::DUPv8i8lane:
    case ARM64::SMOVvi8to32:
    case ARM64::SMOVvi8to64:
    case ARM64::UMOVvi8: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case ARM64::DUPv2i32lane:
    case ARM64::DUPv4i32lane:
    case ARM64::SMOVvi32to64:
    case ARM64::UMOVvi32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case ARM64::DUPv4i16lane:
    case ARM64::DUPv8i16lane:
    case ARM64::SMOVvi16to32:
    case ARM64::SMOVvi16to64:
    case ARM64::UMOVvi16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case ARM64::ADDSWri:
    case ARM64::ADDSXri:
    case ARM64::ADDWri:
    case ARM64::ADDXri:
    case ARM64::SUBSWri:
    case ARM64::SUBSXri:
    case ARM64::SUBWri:
    case ARM64::SUBXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getAddSubImmOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(16383)) << 10;
      break;
    }
    case ARM64::ANDSWri:
    case ARM64::ANDWri:
    case ARM64::EORWri:
    case ARM64::ORRWri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case ARM64::ANDSXri:
    case ARM64::ANDXri:
    case ARM64::EORXri:
    case ARM64::ORRXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(8191)) << 10;
      break;
    }
    case ARM64::SHLv4i16_shift:
    case ARM64::SHLv8i16_shift:
    case ARM64::SQSHLUh:
    case ARM64::SQSHLUv4i16_shift:
    case ARM64::SQSHLUv8i16_shift:
    case ARM64::SQSHLh:
    case ARM64::SQSHLv4i16_shift:
    case ARM64::SQSHLv8i16_shift:
    case ARM64::SSHLLv4i16_shift:
    case ARM64::SSHLLv8i16_shift:
    case ARM64::UQSHLh:
    case ARM64::UQSHLv4i16_shift:
    case ARM64::UQSHLv8i16_shift:
    case ARM64::USHLLv4i16_shift:
    case ARM64::USHLLv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL16OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::SHLv2i32_shift:
    case ARM64::SHLv4i32_shift:
    case ARM64::SQSHLUs:
    case ARM64::SQSHLUv2i32_shift:
    case ARM64::SQSHLUv4i32_shift:
    case ARM64::SQSHLs:
    case ARM64::SQSHLv2i32_shift:
    case ARM64::SQSHLv4i32_shift:
    case ARM64::SSHLLv2i32_shift:
    case ARM64::SSHLLv4i32_shift:
    case ARM64::UQSHLs:
    case ARM64::UQSHLv2i32_shift:
    case ARM64::UQSHLv4i32_shift:
    case ARM64::USHLLv2i32_shift:
    case ARM64::USHLLv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL32OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::SHLd:
    case ARM64::SHLv2i64_shift:
    case ARM64::SQSHLUd:
    case ARM64::SQSHLUv2i64_shift:
    case ARM64::SQSHLd:
    case ARM64::SQSHLv2i64_shift:
    case ARM64::UQSHLd:
    case ARM64::UQSHLv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL64OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case ARM64::SHLv16i8_shift:
    case ARM64::SHLv8i8_shift:
    case ARM64::SQSHLUb:
    case ARM64::SQSHLUv16i8_shift:
    case ARM64::SQSHLUv8i8_shift:
    case ARM64::SQSHLb:
    case ARM64::SQSHLv16i8_shift:
    case ARM64::SQSHLv8i8_shift:
    case ARM64::SSHLLv16i8_shift:
    case ARM64::SSHLLv8i8_shift:
    case ARM64::UQSHLb:
    case ARM64::UQSHLv16i8_shift:
    case ARM64::UQSHLv8i8_shift:
    case ARM64::USHLLv16i8_shift:
    case ARM64::USHLLv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL8OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::SQRSHRNh:
    case ARM64::SQRSHRUNh:
    case ARM64::SQSHRNh:
    case ARM64::SQSHRUNh:
    case ARM64::SRSHRv4i16_shift:
    case ARM64::SRSHRv8i16_shift:
    case ARM64::SSHRv4i16_shift:
    case ARM64::SSHRv8i16_shift:
    case ARM64::UQRSHRNh:
    case ARM64::UQSHRNh:
    case ARM64::URSHRv4i16_shift:
    case ARM64::URSHRv8i16_shift:
    case ARM64::USHRv4i16_shift:
    case ARM64::USHRv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::RSHRNv8i8_shift:
    case ARM64::SHRNv8i8_shift:
    case ARM64::SQRSHRNv8i8_shift:
    case ARM64::SQRSHRUNv8i8_shift:
    case ARM64::SQSHRNv8i8_shift:
    case ARM64::SQSHRUNv8i8_shift:
    case ARM64::UQRSHRNv8i8_shift:
    case ARM64::UQSHRNv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::RSHRNv4i16_shift:
    case ARM64::SHRNv4i16_shift:
    case ARM64::SQRSHRNv4i16_shift:
    case ARM64::SQRSHRUNv4i16_shift:
    case ARM64::SQSHRNv4i16_shift:
    case ARM64::SQSHRUNv4i16_shift:
    case ARM64::UQRSHRNv4i16_shift:
    case ARM64::UQSHRNv4i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::FCVTZSs:
    case ARM64::FCVTZSv2i32_shift:
    case ARM64::FCVTZSv4i32_shift:
    case ARM64::FCVTZUs:
    case ARM64::FCVTZUv2i32_shift:
    case ARM64::FCVTZUv4i32_shift:
    case ARM64::SCVTFs:
    case ARM64::SCVTFv2i32_shift:
    case ARM64::SCVTFv4i32_shift:
    case ARM64::SQRSHRNs:
    case ARM64::SQRSHRUNs:
    case ARM64::SQSHRNs:
    case ARM64::SQSHRUNs:
    case ARM64::SRSHRv2i32_shift:
    case ARM64::SRSHRv4i32_shift:
    case ARM64::SSHRv2i32_shift:
    case ARM64::SSHRv4i32_shift:
    case ARM64::UCVTFs:
    case ARM64::UCVTFv2i32_shift:
    case ARM64::UCVTFv4i32_shift:
    case ARM64::UQRSHRNs:
    case ARM64::UQSHRNs:
    case ARM64::URSHRv2i32_shift:
    case ARM64::URSHRv4i32_shift:
    case ARM64::USHRv2i32_shift:
    case ARM64::USHRv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::RSHRNv2i32_shift:
    case ARM64::SHRNv2i32_shift:
    case ARM64::SQRSHRNv2i32_shift:
    case ARM64::SQRSHRUNv2i32_shift:
    case ARM64::SQSHRNv2i32_shift:
    case ARM64::SQSHRUNv2i32_shift:
    case ARM64::UQRSHRNv2i32_shift:
    case ARM64::UQSHRNv2i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::FCVTZSd:
    case ARM64::FCVTZSv2i64_shift:
    case ARM64::FCVTZUd:
    case ARM64::FCVTZUv2i64_shift:
    case ARM64::SCVTFd:
    case ARM64::SCVTFv2i64_shift:
    case ARM64::SRSHRd:
    case ARM64::SRSHRv2i64_shift:
    case ARM64::SSHRd:
    case ARM64::SSHRv2i64_shift:
    case ARM64::UCVTFd:
    case ARM64::UCVTFv2i64_shift:
    case ARM64::URSHRd:
    case ARM64::URSHRv2i64_shift:
    case ARM64::USHRd:
    case ARM64::USHRv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case ARM64::SQRSHRNb:
    case ARM64::SQRSHRUNb:
    case ARM64::SQSHRNb:
    case ARM64::SQSHRUNb:
    case ARM64::SRSHRv16i8_shift:
    case ARM64::SRSHRv8i8_shift:
    case ARM64::SSHRv16i8_shift:
    case ARM64::SSHRv8i8_shift:
    case ARM64::UQRSHRNb:
    case ARM64::UQSHRNb:
    case ARM64::URSHRv16i8_shift:
    case ARM64::URSHRv8i8_shift:
    case ARM64::USHRv16i8_shift:
    case ARM64::USHRv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR8OpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::SBFMWri:
    case ARM64::SBFMXri:
    case ARM64::UBFMWri:
    case ARM64::UBFMXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::FCVTASSWDri:
    case ARM64::FCVTASSWSri:
    case ARM64::FCVTASSXDri:
    case ARM64::FCVTASSXSri:
    case ARM64::FCVTAUSWDri:
    case ARM64::FCVTAUSWSri:
    case ARM64::FCVTAUSXDri:
    case ARM64::FCVTAUSXSri:
    case ARM64::FCVTMSSWDri:
    case ARM64::FCVTMSSWSri:
    case ARM64::FCVTMSSXDri:
    case ARM64::FCVTMSSXSri:
    case ARM64::FCVTMUSWDri:
    case ARM64::FCVTMUSWSri:
    case ARM64::FCVTMUSXDri:
    case ARM64::FCVTMUSXSri:
    case ARM64::FCVTNSSWDri:
    case ARM64::FCVTNSSWSri:
    case ARM64::FCVTNSSXDri:
    case ARM64::FCVTNSSXSri:
    case ARM64::FCVTNUSWDri:
    case ARM64::FCVTNUSWSri:
    case ARM64::FCVTNUSXDri:
    case ARM64::FCVTNUSXSri:
    case ARM64::FCVTPSSWDri:
    case ARM64::FCVTPSSWSri:
    case ARM64::FCVTPSSXDri:
    case ARM64::FCVTPSSXSri:
    case ARM64::FCVTPUSWDri:
    case ARM64::FCVTPUSWSri:
    case ARM64::FCVTPUSXDri:
    case ARM64::FCVTPUSXSri:
    case ARM64::FCVTZSSWDri:
    case ARM64::FCVTZSSWSri:
    case ARM64::FCVTZSSXDri:
    case ARM64::FCVTZSSXSri:
    case ARM64::FCVTZUSWDri:
    case ARM64::FCVTZUSWSri:
    case ARM64::FCVTZUSXDri:
    case ARM64::FCVTZUSXSri:
    case ARM64::SCVTFSWDri:
    case ARM64::SCVTFSWSri:
    case ARM64::SCVTFSXDri:
    case ARM64::SCVTFSXSri:
    case ARM64::UCVTFSWDri:
    case ARM64::UCVTFSWSri:
    case ARM64::UCVTFSXDri:
    case ARM64::UCVTFSXSri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: scale
      op = getFixedPointScaleOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::BFMWri:
    case ARM64::BFMXri: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: immr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      // op: imms
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::FMOVDi:
    case ARM64::FMOVSi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(255)) << 13;
      break;
    }
    case ARM64::MOVNWi:
    case ARM64::MOVNXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(48)) << 17;
      break;
    }
    case ARM64::MOVZWi:
    case ARM64::MOVZXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(48)) << 17;
      Value = fixMOVZ(MI, Value);
      break;
    }
    case ARM64::MOVKWi:
    case ARM64::MOVKXi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm
      op = getMoveWideImmOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(48)) << 17;
      break;
    }
    case ARM64::FMOVv2f32ns:
    case ARM64::FMOVv2f64ns:
    case ARM64::FMOVv4f32ns:
    case ARM64::MOVID:
    case ARM64::MOVIv16bns:
    case ARM64::MOVIv2dns:
    case ARM64::MOVIv8bns: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::MOVIv2smsl:
    case ARM64::MOVIv4smsl:
    case ARM64::MVNIv2smsl:
    case ARM64::MVNIv4smsl: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getMoveVecShifterOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case ARM64::MOVIv4i16:
    case ARM64::MOVIv8i16:
    case ARM64::MVNIv4i16:
    case ARM64::MVNIv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case ARM64::MOVIv2i32:
    case ARM64::MOVIv4i32:
    case ARM64::MVNIv2i32:
    case ARM64::MVNIv4i32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case ARM64::AESDrr:
    case ARM64::AESErr:
    case ARM64::FCVTNv4i32:
    case ARM64::FCVTNv8i16:
    case ARM64::FCVTXNv4f32:
    case ARM64::SADALPv16i8_v8i16:
    case ARM64::SADALPv2i32_v1i64:
    case ARM64::SADALPv4i16_v2i32:
    case ARM64::SADALPv4i32_v2i64:
    case ARM64::SADALPv8i16_v4i32:
    case ARM64::SADALPv8i8_v4i16:
    case ARM64::SHA1SU1rr:
    case ARM64::SHA256SU0rr:
    case ARM64::SQXTNv16i8:
    case ARM64::SQXTNv4i32:
    case ARM64::SQXTNv8i16:
    case ARM64::SQXTUNv16i8:
    case ARM64::SQXTUNv4i32:
    case ARM64::SQXTUNv8i16:
    case ARM64::UADALPv16i8_v8i16:
    case ARM64::UADALPv2i32_v1i64:
    case ARM64::UADALPv4i16_v2i32:
    case ARM64::UADALPv4i32_v2i64:
    case ARM64::UADALPv8i16_v4i32:
    case ARM64::UADALPv8i8_v4i16:
    case ARM64::UQXTNv16i8:
    case ARM64::UQXTNv4i32:
    case ARM64::UQXTNv8i16:
    case ARM64::USQADDv16i8:
    case ARM64::USQADDv1i64:
    case ARM64::USQADDv2i32:
    case ARM64::USQADDv2i64:
    case ARM64::USQADDv4i16:
    case ARM64::USQADDv4i32:
    case ARM64::USQADDv8i16:
    case ARM64::USQADDv8i8:
    case ARM64::XTNv16i8:
    case ARM64::XTNv4i32:
    case ARM64::XTNv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::MLAv4i16_indexed:
    case ARM64::MLAv8i16_indexed:
    case ARM64::MLSv4i16_indexed:
    case ARM64::MLSv8i16_indexed:
    case ARM64::SMLALv4i16_indexed:
    case ARM64::SMLALv8i16_indexed:
    case ARM64::SMLSLv4i16_indexed:
    case ARM64::SMLSLv8i16_indexed:
    case ARM64::SQDMLALv1i32_indexed:
    case ARM64::SQDMLALv4i16_indexed:
    case ARM64::SQDMLALv8i16_indexed:
    case ARM64::SQDMLSLv1i32_indexed:
    case ARM64::SQDMLSLv4i16_indexed:
    case ARM64::SQDMLSLv8i16_indexed:
    case ARM64::UMLALv4i16_indexed:
    case ARM64::UMLALv8i16_indexed:
    case ARM64::UMLSLv4i16_indexed:
    case ARM64::UMLSLv8i16_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      break;
    }
    case ARM64::ADDHNv2i64_v4i32:
    case ARM64::ADDHNv4i32_v8i16:
    case ARM64::ADDHNv8i16_v16i8:
    case ARM64::BITv16i8:
    case ARM64::BITv8i8:
    case ARM64::BSLv16i8:
    case ARM64::BSLv8i8:
    case ARM64::FMLAv2f32:
    case ARM64::FMLAv2f64:
    case ARM64::FMLAv4f32:
    case ARM64::FMLSv2f32:
    case ARM64::FMLSv2f64:
    case ARM64::FMLSv4f32:
    case ARM64::MLAv16i8:
    case ARM64::MLAv2i32:
    case ARM64::MLAv4i16:
    case ARM64::MLAv4i32:
    case ARM64::MLAv8i16:
    case ARM64::MLAv8i8:
    case ARM64::MLSv16i8:
    case ARM64::MLSv2i32:
    case ARM64::MLSv4i16:
    case ARM64::MLSv4i32:
    case ARM64::MLSv8i16:
    case ARM64::MLSv8i8:
    case ARM64::RADDHNv2i64_v4i32:
    case ARM64::RADDHNv4i32_v8i16:
    case ARM64::RADDHNv8i16_v16i8:
    case ARM64::RSUBHNv2i64_v4i32:
    case ARM64::RSUBHNv4i32_v8i16:
    case ARM64::RSUBHNv8i16_v16i8:
    case ARM64::SABALv16i8_v8i16:
    case ARM64::SABALv2i32_v2i64:
    case ARM64::SABALv4i16_v4i32:
    case ARM64::SABALv4i32_v2i64:
    case ARM64::SABALv8i16_v4i32:
    case ARM64::SABALv8i8_v8i16:
    case ARM64::SABAv16i8:
    case ARM64::SABAv2i32:
    case ARM64::SABAv4i16:
    case ARM64::SABAv4i32:
    case ARM64::SABAv8i16:
    case ARM64::SABAv8i8:
    case ARM64::SHA1Crrr:
    case ARM64::SHA1Mrrr:
    case ARM64::SHA1Prrr:
    case ARM64::SHA1SU0rrr:
    case ARM64::SHA256H2rrr:
    case ARM64::SHA256Hrrr:
    case ARM64::SHA256SU1rrr:
    case ARM64::SMLALv16i8_v8i16:
    case ARM64::SMLALv2i32_v2i64:
    case ARM64::SMLALv4i16_v4i32:
    case ARM64::SMLALv4i32_v2i64:
    case ARM64::SMLALv8i16_v4i32:
    case ARM64::SMLALv8i8_v8i16:
    case ARM64::SMLSLv16i8_v8i16:
    case ARM64::SMLSLv2i32_v2i64:
    case ARM64::SMLSLv4i16_v4i32:
    case ARM64::SMLSLv4i32_v2i64:
    case ARM64::SMLSLv8i16_v4i32:
    case ARM64::SMLSLv8i8_v8i16:
    case ARM64::SQDMLALi16:
    case ARM64::SQDMLALi32:
    case ARM64::SQDMLALv2i32_v2i64:
    case ARM64::SQDMLALv4i16_v4i32:
    case ARM64::SQDMLALv4i32_v2i64:
    case ARM64::SQDMLALv8i16_v4i32:
    case ARM64::SQDMLSLi16:
    case ARM64::SQDMLSLi32:
    case ARM64::SQDMLSLv2i32_v2i64:
    case ARM64::SQDMLSLv4i16_v4i32:
    case ARM64::SQDMLSLv4i32_v2i64:
    case ARM64::SQDMLSLv8i16_v4i32:
    case ARM64::SUBHNv2i64_v4i32:
    case ARM64::SUBHNv4i32_v8i16:
    case ARM64::SUBHNv8i16_v16i8:
    case ARM64::UABALv16i8_v8i16:
    case ARM64::UABALv2i32_v2i64:
    case ARM64::UABALv4i16_v4i32:
    case ARM64::UABALv4i32_v2i64:
    case ARM64::UABALv8i16_v4i32:
    case ARM64::UABALv8i8_v8i16:
    case ARM64::UABAv16i8:
    case ARM64::UABAv2i32:
    case ARM64::UABAv4i16:
    case ARM64::UABAv4i32:
    case ARM64::UABAv8i16:
    case ARM64::UABAv8i8:
    case ARM64::UMLALv16i8_v8i16:
    case ARM64::UMLALv2i32_v2i64:
    case ARM64::UMLALv4i16_v4i32:
    case ARM64::UMLALv4i32_v2i64:
    case ARM64::UMLALv8i16_v4i32:
    case ARM64::UMLALv8i8_v8i16:
    case ARM64::UMLSLv16i8_v8i16:
    case ARM64::UMLSLv2i32_v2i64:
    case ARM64::UMLSLv4i16_v4i32:
    case ARM64::UMLSLv4i32_v2i64:
    case ARM64::UMLSLv8i16_v4i32:
    case ARM64::UMLSLv8i8_v8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::FMLAv1i64_indexed:
    case ARM64::FMLAv2i64_indexed:
    case ARM64::FMLSv1i64_indexed:
    case ARM64::FMLSv2i64_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      break;
    }
    case ARM64::FMLAv1i32_indexed:
    case ARM64::FMLAv2i32_indexed:
    case ARM64::FMLAv4i32_indexed:
    case ARM64::FMLSv1i32_indexed:
    case ARM64::FMLSv2i32_indexed:
    case ARM64::FMLSv4i32_indexed:
    case ARM64::MLAv2i32_indexed:
    case ARM64::MLAv4i32_indexed:
    case ARM64::MLSv2i32_indexed:
    case ARM64::MLSv4i32_indexed:
    case ARM64::SMLALv2i32_indexed:
    case ARM64::SMLALv4i32_indexed:
    case ARM64::SMLSLv2i32_indexed:
    case ARM64::SMLSLv4i32_indexed:
    case ARM64::SQDMLALv1i64_indexed:
    case ARM64::SQDMLALv2i32_indexed:
    case ARM64::SQDMLALv4i32_indexed:
    case ARM64::SQDMLSLv1i64_indexed:
    case ARM64::SQDMLSLv2i32_indexed:
    case ARM64::SQDMLSLv4i32_indexed:
    case ARM64::UMLALv2i32_indexed:
    case ARM64::UMLALv4i32_indexed:
    case ARM64::UMLSLv2i32_indexed:
    case ARM64::UMLSLv4i32_indexed: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      break;
    }
    case ARM64::SLIv4i16_shift:
    case ARM64::SLIv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL16OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::SLIv2i32_shift:
    case ARM64::SLIv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL32OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::SLId:
    case ARM64::SLIv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL64OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case ARM64::SLIv16i8_shift:
    case ARM64::SLIv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftL8OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::SRIv4i16_shift:
    case ARM64::SRIv8i16_shift:
    case ARM64::SRSRAv4i16_shift:
    case ARM64::SRSRAv8i16_shift:
    case ARM64::SSRAv4i16_shift:
    case ARM64::SSRAv8i16_shift:
    case ARM64::URSRAv4i16_shift:
    case ARM64::URSRAv8i16_shift:
    case ARM64::USRAv4i16_shift:
    case ARM64::USRAv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::RSHRNv16i8_shift:
    case ARM64::SHRNv16i8_shift:
    case ARM64::SQRSHRNv16i8_shift:
    case ARM64::SQRSHRUNv16i8_shift:
    case ARM64::SQSHRNv16i8_shift:
    case ARM64::SQSHRUNv16i8_shift:
    case ARM64::UQRSHRNv16i8_shift:
    case ARM64::UQSHRNv16i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR16OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::RSHRNv8i16_shift:
    case ARM64::SHRNv8i16_shift:
    case ARM64::SQRSHRNv8i16_shift:
    case ARM64::SQRSHRUNv8i16_shift:
    case ARM64::SQSHRNv8i16_shift:
    case ARM64::SQSHRUNv8i16_shift:
    case ARM64::UQRSHRNv8i16_shift:
    case ARM64::UQSHRNv8i16_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case ARM64::SRIv2i32_shift:
    case ARM64::SRIv4i32_shift:
    case ARM64::SRSRAv2i32_shift:
    case ARM64::SRSRAv4i32_shift:
    case ARM64::SSRAv2i32_shift:
    case ARM64::SSRAv4i32_shift:
    case ARM64::URSRAv2i32_shift:
    case ARM64::URSRAv4i32_shift:
    case ARM64::USRAv2i32_shift:
    case ARM64::USRAv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR32OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::RSHRNv4i32_shift:
    case ARM64::SHRNv4i32_shift:
    case ARM64::SQRSHRNv4i32_shift:
    case ARM64::SQRSHRUNv4i32_shift:
    case ARM64::SQSHRNv4i32_shift:
    case ARM64::SQSHRUNv4i32_shift:
    case ARM64::UQRSHRNv4i32_shift:
    case ARM64::UQSHRNv4i32_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::SRId:
    case ARM64::SRIv2i64_shift:
    case ARM64::SRSRAd:
    case ARM64::SRSRAv2i64_shift:
    case ARM64::SSRAd:
    case ARM64::SSRAv2i64_shift:
    case ARM64::URSRAd:
    case ARM64::URSRAv2i64_shift:
    case ARM64::USRAd:
    case ARM64::USRAv2i64_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR64OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case ARM64::SRIv16i8_shift:
    case ARM64::SRIv8i8_shift:
    case ARM64::SRSRAv16i8_shift:
    case ARM64::SRSRAv8i8_shift:
    case ARM64::SSRAv16i8_shift:
    case ARM64::SSRAv8i8_shift:
    case ARM64::URSRAv16i8_shift:
    case ARM64::URSRAv8i8_shift:
    case ARM64::USRAv16i8_shift:
    case ARM64::USRAv8i8_shift: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getVecShiftR8OpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case ARM64::INSvi64gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case ARM64::INSvi64lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 14;
      break;
    }
    case ARM64::INSvi8gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case ARM64::INSvi8lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case ARM64::INSvi32gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case ARM64::INSvi32lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case ARM64::INSvi16gpr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case ARM64::INSvi16lane: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      // op: idx2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 12;
      break;
    }
    case ARM64::BICv4i16:
    case ARM64::BICv8i16:
    case ARM64::ORRv4i16:
    case ARM64::ORRv8i16: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case ARM64::BICv2i32:
    case ARM64::BICv4i32:
    case ARM64::ORRv2i32:
    case ARM64::ORRv4i32: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: shift
      op = getVecShifterOpValue(MI, 3, Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case ARM64::FCMPDrr:
    case ARM64::FCMPEDrr:
    case ARM64::FCMPESrr:
    case ARM64::FCMPSrr: {
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::BLR:
    case ARM64::BR:
    case ARM64::FCMPDri:
    case ARM64::FCMPEDri:
    case ARM64::FCMPESri:
    case ARM64::FCMPSri:
    case ARM64::RET: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::CCMNWr:
    case ARM64::CCMNXr:
    case ARM64::CCMPWr:
    case ARM64::CCMPXr:
    case ARM64::FCCMPDrr:
    case ARM64::FCCMPEDrr:
    case ARM64::FCCMPESrr:
    case ARM64::FCCMPSrr: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: nzcv
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(15);
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case ARM64::CCMNWi:
    case ARM64::CCMNXi:
    case ARM64::CCMPWi:
    case ARM64::CCMPXi: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: nzcv
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(15);
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case ARM64::TBNZ:
    case ARM64::TBZ: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: bit_off
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(32)) << 26;
      Value |= (op & UINT64_C(31)) << 19;
      // op: target
      op = getTestBranchTargetOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case ARM64::LDRDl:
    case ARM64::LDRQl:
    case ARM64::LDRSWl:
    case ARM64::LDRSl:
    case ARM64::LDRWl:
    case ARM64::LDRXl:
    case ARM64::PRFMl: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: label
      op = getCondBranchTargetOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case ARM64::SYSLxt: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: op1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      // op: Cn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      // op: Cm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: op2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case ARM64::MRS: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: systemreg
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(32767)) << 5;
      break;
    }
    case ARM64::CBNZW:
    case ARM64::CBNZX:
    case ARM64::CBZW:
    case ARM64::CBZX: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: target
      op = getCondBranchTargetOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case ARM64::MSR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: systemreg
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(32767)) << 5;
      break;
    }
    case ARM64::SYSxt: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= op & UINT64_C(31);
      // op: op1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      // op: Cn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      // op: Cm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: op2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case ARM64::TBLv16i8Four:
    case ARM64::TBLv16i8One:
    case ARM64::TBLv16i8Three:
    case ARM64::TBLv16i8Two:
    case ARM64::TBLv8i8Four:
    case ARM64::TBLv8i8One:
    case ARM64::TBLv8i8Three:
    case ARM64::TBLv8i8Two: {
      // op: Vd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Vn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Vm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::TBXv16i8Four:
    case ARM64::TBXv16i8One:
    case ARM64::TBXv16i8Three:
    case ARM64::TBXv16i8Two:
    case ARM64::TBXv8i8Four:
    case ARM64::TBXv8i8One:
    case ARM64::TBXv8i8Three:
    case ARM64::TBXv8i8Two: {
      // op: Vd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Vn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Vm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::LD1Fourv16b:
    case ARM64::LD1Fourv1d:
    case ARM64::LD1Fourv2d:
    case ARM64::LD1Fourv2s:
    case ARM64::LD1Fourv4h:
    case ARM64::LD1Fourv4s:
    case ARM64::LD1Fourv8b:
    case ARM64::LD1Fourv8h:
    case ARM64::LD1Onev16b:
    case ARM64::LD1Onev1d:
    case ARM64::LD1Onev2d:
    case ARM64::LD1Onev2s:
    case ARM64::LD1Onev4h:
    case ARM64::LD1Onev4s:
    case ARM64::LD1Onev8b:
    case ARM64::LD1Onev8h:
    case ARM64::LD1Rv16b:
    case ARM64::LD1Rv1d:
    case ARM64::LD1Rv2d:
    case ARM64::LD1Rv2s:
    case ARM64::LD1Rv4h:
    case ARM64::LD1Rv4s:
    case ARM64::LD1Rv8b:
    case ARM64::LD1Rv8h:
    case ARM64::LD1Threev16b:
    case ARM64::LD1Threev1d:
    case ARM64::LD1Threev2d:
    case ARM64::LD1Threev2s:
    case ARM64::LD1Threev4h:
    case ARM64::LD1Threev4s:
    case ARM64::LD1Threev8b:
    case ARM64::LD1Threev8h:
    case ARM64::LD1Twov16b:
    case ARM64::LD1Twov1d:
    case ARM64::LD1Twov2d:
    case ARM64::LD1Twov2s:
    case ARM64::LD1Twov4h:
    case ARM64::LD1Twov4s:
    case ARM64::LD1Twov8b:
    case ARM64::LD1Twov8h:
    case ARM64::LD2Rv16b:
    case ARM64::LD2Rv1d:
    case ARM64::LD2Rv2d:
    case ARM64::LD2Rv2s:
    case ARM64::LD2Rv4h:
    case ARM64::LD2Rv4s:
    case ARM64::LD2Rv8b:
    case ARM64::LD2Rv8h:
    case ARM64::LD2Twov16b:
    case ARM64::LD2Twov2d:
    case ARM64::LD2Twov2s:
    case ARM64::LD2Twov4h:
    case ARM64::LD2Twov4s:
    case ARM64::LD2Twov8b:
    case ARM64::LD2Twov8h:
    case ARM64::LD3Rv16b:
    case ARM64::LD3Rv1d:
    case ARM64::LD3Rv2d:
    case ARM64::LD3Rv2s:
    case ARM64::LD3Rv4h:
    case ARM64::LD3Rv4s:
    case ARM64::LD3Rv8b:
    case ARM64::LD3Rv8h:
    case ARM64::LD3Threev16b:
    case ARM64::LD3Threev2d:
    case ARM64::LD3Threev2s:
    case ARM64::LD3Threev4h:
    case ARM64::LD3Threev4s:
    case ARM64::LD3Threev8b:
    case ARM64::LD3Threev8h:
    case ARM64::LD4Fourv16b:
    case ARM64::LD4Fourv2d:
    case ARM64::LD4Fourv2s:
    case ARM64::LD4Fourv4h:
    case ARM64::LD4Fourv4s:
    case ARM64::LD4Fourv8b:
    case ARM64::LD4Fourv8h:
    case ARM64::LD4Rv16b:
    case ARM64::LD4Rv1d:
    case ARM64::LD4Rv2d:
    case ARM64::LD4Rv2s:
    case ARM64::LD4Rv4h:
    case ARM64::LD4Rv4s:
    case ARM64::LD4Rv8b:
    case ARM64::LD4Rv8h:
    case ARM64::ST1Fourv16b:
    case ARM64::ST1Fourv1d:
    case ARM64::ST1Fourv2d:
    case ARM64::ST1Fourv2s:
    case ARM64::ST1Fourv4h:
    case ARM64::ST1Fourv4s:
    case ARM64::ST1Fourv8b:
    case ARM64::ST1Fourv8h:
    case ARM64::ST1Onev16b:
    case ARM64::ST1Onev1d:
    case ARM64::ST1Onev2d:
    case ARM64::ST1Onev2s:
    case ARM64::ST1Onev4h:
    case ARM64::ST1Onev4s:
    case ARM64::ST1Onev8b:
    case ARM64::ST1Onev8h:
    case ARM64::ST1Threev16b:
    case ARM64::ST1Threev1d:
    case ARM64::ST1Threev2d:
    case ARM64::ST1Threev2s:
    case ARM64::ST1Threev4h:
    case ARM64::ST1Threev4s:
    case ARM64::ST1Threev8b:
    case ARM64::ST1Threev8h:
    case ARM64::ST1Twov16b:
    case ARM64::ST1Twov1d:
    case ARM64::ST1Twov2d:
    case ARM64::ST1Twov2s:
    case ARM64::ST1Twov4h:
    case ARM64::ST1Twov4s:
    case ARM64::ST1Twov8b:
    case ARM64::ST1Twov8h:
    case ARM64::ST2Twov16b:
    case ARM64::ST2Twov2d:
    case ARM64::ST2Twov2s:
    case ARM64::ST2Twov4h:
    case ARM64::ST2Twov4s:
    case ARM64::ST2Twov8b:
    case ARM64::ST2Twov8h:
    case ARM64::ST3Threev16b:
    case ARM64::ST3Threev2d:
    case ARM64::ST3Threev2s:
    case ARM64::ST3Threev4h:
    case ARM64::ST3Threev4s:
    case ARM64::ST3Threev8b:
    case ARM64::ST3Threev8h:
    case ARM64::ST4Fourv16b:
    case ARM64::ST4Fourv2d:
    case ARM64::ST4Fourv2s:
    case ARM64::ST4Fourv4h:
    case ARM64::ST4Fourv4s:
    case ARM64::ST4Fourv8b:
    case ARM64::ST4Fourv8h: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::LD1Fourv16b_POST:
    case ARM64::LD1Fourv1d_POST:
    case ARM64::LD1Fourv2d_POST:
    case ARM64::LD1Fourv2s_POST:
    case ARM64::LD1Fourv4h_POST:
    case ARM64::LD1Fourv4s_POST:
    case ARM64::LD1Fourv8b_POST:
    case ARM64::LD1Fourv8h_POST:
    case ARM64::LD1Onev16b_POST:
    case ARM64::LD1Onev1d_POST:
    case ARM64::LD1Onev2d_POST:
    case ARM64::LD1Onev2s_POST:
    case ARM64::LD1Onev4h_POST:
    case ARM64::LD1Onev4s_POST:
    case ARM64::LD1Onev8b_POST:
    case ARM64::LD1Onev8h_POST:
    case ARM64::LD1Rv16b_POST:
    case ARM64::LD1Rv1d_POST:
    case ARM64::LD1Rv2d_POST:
    case ARM64::LD1Rv2s_POST:
    case ARM64::LD1Rv4h_POST:
    case ARM64::LD1Rv4s_POST:
    case ARM64::LD1Rv8b_POST:
    case ARM64::LD1Rv8h_POST:
    case ARM64::LD1Threev16b_POST:
    case ARM64::LD1Threev1d_POST:
    case ARM64::LD1Threev2d_POST:
    case ARM64::LD1Threev2s_POST:
    case ARM64::LD1Threev4h_POST:
    case ARM64::LD1Threev4s_POST:
    case ARM64::LD1Threev8b_POST:
    case ARM64::LD1Threev8h_POST:
    case ARM64::LD1Twov16b_POST:
    case ARM64::LD1Twov1d_POST:
    case ARM64::LD1Twov2d_POST:
    case ARM64::LD1Twov2s_POST:
    case ARM64::LD1Twov4h_POST:
    case ARM64::LD1Twov4s_POST:
    case ARM64::LD1Twov8b_POST:
    case ARM64::LD1Twov8h_POST:
    case ARM64::LD2Rv16b_POST:
    case ARM64::LD2Rv1d_POST:
    case ARM64::LD2Rv2d_POST:
    case ARM64::LD2Rv2s_POST:
    case ARM64::LD2Rv4h_POST:
    case ARM64::LD2Rv4s_POST:
    case ARM64::LD2Rv8b_POST:
    case ARM64::LD2Rv8h_POST:
    case ARM64::LD2Twov16b_POST:
    case ARM64::LD2Twov2d_POST:
    case ARM64::LD2Twov2s_POST:
    case ARM64::LD2Twov4h_POST:
    case ARM64::LD2Twov4s_POST:
    case ARM64::LD2Twov8b_POST:
    case ARM64::LD2Twov8h_POST:
    case ARM64::LD3Rv16b_POST:
    case ARM64::LD3Rv1d_POST:
    case ARM64::LD3Rv2d_POST:
    case ARM64::LD3Rv2s_POST:
    case ARM64::LD3Rv4h_POST:
    case ARM64::LD3Rv4s_POST:
    case ARM64::LD3Rv8b_POST:
    case ARM64::LD3Rv8h_POST:
    case ARM64::LD3Threev16b_POST:
    case ARM64::LD3Threev2d_POST:
    case ARM64::LD3Threev2s_POST:
    case ARM64::LD3Threev4h_POST:
    case ARM64::LD3Threev4s_POST:
    case ARM64::LD3Threev8b_POST:
    case ARM64::LD3Threev8h_POST:
    case ARM64::LD4Fourv16b_POST:
    case ARM64::LD4Fourv2d_POST:
    case ARM64::LD4Fourv2s_POST:
    case ARM64::LD4Fourv4h_POST:
    case ARM64::LD4Fourv4s_POST:
    case ARM64::LD4Fourv8b_POST:
    case ARM64::LD4Fourv8h_POST:
    case ARM64::LD4Rv16b_POST:
    case ARM64::LD4Rv1d_POST:
    case ARM64::LD4Rv2d_POST:
    case ARM64::LD4Rv2s_POST:
    case ARM64::LD4Rv4h_POST:
    case ARM64::LD4Rv4s_POST:
    case ARM64::LD4Rv8b_POST:
    case ARM64::LD4Rv8h_POST:
    case ARM64::ST1Fourv16b_POST:
    case ARM64::ST1Fourv1d_POST:
    case ARM64::ST1Fourv2d_POST:
    case ARM64::ST1Fourv2s_POST:
    case ARM64::ST1Fourv4h_POST:
    case ARM64::ST1Fourv4s_POST:
    case ARM64::ST1Fourv8b_POST:
    case ARM64::ST1Fourv8h_POST:
    case ARM64::ST1Onev16b_POST:
    case ARM64::ST1Onev1d_POST:
    case ARM64::ST1Onev2d_POST:
    case ARM64::ST1Onev2s_POST:
    case ARM64::ST1Onev4h_POST:
    case ARM64::ST1Onev4s_POST:
    case ARM64::ST1Onev8b_POST:
    case ARM64::ST1Onev8h_POST:
    case ARM64::ST1Threev16b_POST:
    case ARM64::ST1Threev1d_POST:
    case ARM64::ST1Threev2d_POST:
    case ARM64::ST1Threev2s_POST:
    case ARM64::ST1Threev4h_POST:
    case ARM64::ST1Threev4s_POST:
    case ARM64::ST1Threev8b_POST:
    case ARM64::ST1Threev8h_POST:
    case ARM64::ST1Twov16b_POST:
    case ARM64::ST1Twov1d_POST:
    case ARM64::ST1Twov2d_POST:
    case ARM64::ST1Twov2s_POST:
    case ARM64::ST1Twov4h_POST:
    case ARM64::ST1Twov4s_POST:
    case ARM64::ST1Twov8b_POST:
    case ARM64::ST1Twov8h_POST:
    case ARM64::ST2Twov16b_POST:
    case ARM64::ST2Twov2d_POST:
    case ARM64::ST2Twov2s_POST:
    case ARM64::ST2Twov4h_POST:
    case ARM64::ST2Twov4s_POST:
    case ARM64::ST2Twov8b_POST:
    case ARM64::ST2Twov8h_POST:
    case ARM64::ST3Threev16b_POST:
    case ARM64::ST3Threev2d_POST:
    case ARM64::ST3Threev2s_POST:
    case ARM64::ST3Threev4h_POST:
    case ARM64::ST3Threev4s_POST:
    case ARM64::ST3Threev8b_POST:
    case ARM64::ST3Threev8h_POST:
    case ARM64::ST4Fourv16b_POST:
    case ARM64::ST4Fourv2d_POST:
    case ARM64::ST4Fourv2s_POST:
    case ARM64::ST4Fourv4h_POST:
    case ARM64::ST4Fourv4s_POST:
    case ARM64::ST4Fourv8b_POST:
    case ARM64::ST4Fourv8h_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::ST1i64:
    case ARM64::ST2i64:
    case ARM64::ST3i64:
    case ARM64::ST4i64: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case ARM64::ST1i64_POST:
    case ARM64::ST2i64_POST:
    case ARM64::ST3i64_POST:
    case ARM64::ST4i64_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::ST1i32:
    case ARM64::ST2i32:
    case ARM64::ST3i32:
    case ARM64::ST4i32: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case ARM64::ST1i32_POST:
    case ARM64::ST2i32_POST:
    case ARM64::ST3i32_POST:
    case ARM64::ST4i32_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::ST1i16:
    case ARM64::ST2i16:
    case ARM64::ST3i16:
    case ARM64::ST4i16: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case ARM64::ST1i16_POST:
    case ARM64::ST2i16_POST:
    case ARM64::ST3i16_POST:
    case ARM64::ST4i16_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::ST1i8:
    case ARM64::ST2i8:
    case ARM64::ST3i8:
    case ARM64::ST4i8: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case ARM64::ST1i8_POST:
    case ARM64::ST2i8_POST:
    case ARM64::ST3i8_POST:
    case ARM64::ST4i8_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::LD1i64:
    case ARM64::LD2i64:
    case ARM64::LD3i64:
    case ARM64::LD4i64: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case ARM64::LD1i64_POST:
    case ARM64::LD2i64_POST:
    case ARM64::LD3i64_POST:
    case ARM64::LD4i64_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::LD1i32:
    case ARM64::LD2i32:
    case ARM64::LD3i32:
    case ARM64::LD4i32: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case ARM64::LD1i32_POST:
    case ARM64::LD2i32_POST:
    case ARM64::LD3i32_POST:
    case ARM64::LD4i32_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::LD1i16:
    case ARM64::LD2i16:
    case ARM64::LD3i16:
    case ARM64::LD4i16: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case ARM64::LD1i16_POST:
    case ARM64::LD2i16_POST:
    case ARM64::LD3i16_POST:
    case ARM64::LD4i16_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::LD1i8:
    case ARM64::LD2i8:
    case ARM64::LD3i8:
    case ARM64::LD4i8: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case ARM64::LD1i8_POST:
    case ARM64::LD2i8_POST:
    case ARM64::LD3i8_POST:
    case ARM64::LD4i8_POST: {
      // op: Vt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      // op: Xm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case ARM64::ADR:
    case ARM64::ADRP: {
      // op: Xd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: label
      op = getAdrLabelOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      Value |= (op & UINT64_C(2097148)) << 3;
      break;
    }
    case ARM64::B:
    case ARM64::BL: {
      // op: addr
      op = getBranchTargetOpValue(MI, 0, Fixups);
      Value |= op & UINT64_C(67108863);
      break;
    }
    case ARM64::Bcc: {
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(15);
      // op: target
      op = getCondBranchTargetOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case ARM64::MSRcpsr: {
      // op: cpsrfield
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(56)) << 13;
      Value |= (op & UINT64_C(7)) << 5;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
    case ARM64::LDRQui:
    case ARM64::STRQui: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: addr
      op = getAMIndexed8OpValue<ARM64::fixup_arm64_ldst_imm12_scale16>(MI, 1, Fixups);
      Value |= (op & UINT64_C(131071)) << 5;
      break;
    }
    case ARM64::LDRBBui:
    case ARM64::LDRBui:
    case ARM64::LDRSBWui:
    case ARM64::LDRSBXui:
    case ARM64::STRBBui:
    case ARM64::STRBui: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: addr
      op = getAMIndexed8OpValue<ARM64::fixup_arm64_ldst_imm12_scale1>(MI, 1, Fixups);
      Value |= (op & UINT64_C(131071)) << 5;
      break;
    }
    case ARM64::LDRHHui:
    case ARM64::LDRHui:
    case ARM64::LDRSHWui:
    case ARM64::LDRSHXui:
    case ARM64::STRHHui:
    case ARM64::STRHui: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: addr
      op = getAMIndexed8OpValue<ARM64::fixup_arm64_ldst_imm12_scale2>(MI, 1, Fixups);
      Value |= (op & UINT64_C(131071)) << 5;
      break;
    }
    case ARM64::LDRSWui:
    case ARM64::LDRSui:
    case ARM64::LDRWui:
    case ARM64::STRSui:
    case ARM64::STRWui: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: addr
      op = getAMIndexed8OpValue<ARM64::fixup_arm64_ldst_imm12_scale4>(MI, 1, Fixups);
      Value |= (op & UINT64_C(131071)) << 5;
      break;
    }
    case ARM64::LDRDui:
    case ARM64::LDRXui:
    case ARM64::PRFMui:
    case ARM64::STRDui:
    case ARM64::STRXui: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: addr
      op = getAMIndexed8OpValue<ARM64::fixup_arm64_ldst_imm12_scale8>(MI, 1, Fixups);
      Value |= (op & UINT64_C(131071)) << 5;
      break;
    }
    case ARM64::LDRBBro:
    case ARM64::LDRBro:
    case ARM64::LDRDro:
    case ARM64::LDRHHro:
    case ARM64::LDRHro:
    case ARM64::LDRQro:
    case ARM64::LDRSBWro:
    case ARM64::LDRSBXro:
    case ARM64::LDRSHWro:
    case ARM64::LDRSHXro:
    case ARM64::LDRSWro:
    case ARM64::LDRSro:
    case ARM64::LDRWro:
    case ARM64::LDRXro:
    case ARM64::PRFMro:
    case ARM64::STRBBro:
    case ARM64::STRBro:
    case ARM64::STRDro:
    case ARM64::STRHHro:
    case ARM64::STRHro:
    case ARM64::STRQro:
    case ARM64::STRSro:
    case ARM64::STRWro:
    case ARM64::STRXro: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: extend
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case ARM64::LDRBBpost:
    case ARM64::LDRBBpre:
    case ARM64::LDRBpost:
    case ARM64::LDRBpre:
    case ARM64::LDRDpost:
    case ARM64::LDRDpre:
    case ARM64::LDRHHpost:
    case ARM64::LDRHHpre:
    case ARM64::LDRHpost:
    case ARM64::LDRHpre:
    case ARM64::LDRQpost:
    case ARM64::LDRQpre:
    case ARM64::LDRSBWpost:
    case ARM64::LDRSBWpre:
    case ARM64::LDRSBXpost:
    case ARM64::LDRSBXpre:
    case ARM64::LDRSHWpost:
    case ARM64::LDRSHWpre:
    case ARM64::LDRSHXpost:
    case ARM64::LDRSHXpre:
    case ARM64::LDRSWpost:
    case ARM64::LDRSWpre:
    case ARM64::LDRSpost:
    case ARM64::LDRSpre:
    case ARM64::LDRWpost:
    case ARM64::LDRWpre:
    case ARM64::LDRXpost:
    case ARM64::LDRXpre:
    case ARM64::LDTRBi:
    case ARM64::LDTRHi:
    case ARM64::LDTRSBWi:
    case ARM64::LDTRSBXi:
    case ARM64::LDTRSHWi:
    case ARM64::LDTRSHXi:
    case ARM64::LDTRSWi:
    case ARM64::LDTRWi:
    case ARM64::LDTRXi:
    case ARM64::LDURBBi:
    case ARM64::LDURBi:
    case ARM64::LDURDi:
    case ARM64::LDURHHi:
    case ARM64::LDURHi:
    case ARM64::LDURQi:
    case ARM64::LDURSBWi:
    case ARM64::LDURSBXi:
    case ARM64::LDURSHWi:
    case ARM64::LDURSHXi:
    case ARM64::LDURSWi:
    case ARM64::LDURSi:
    case ARM64::LDURWi:
    case ARM64::LDURXi:
    case ARM64::PRFUMi:
    case ARM64::STRBBpost:
    case ARM64::STRBBpre:
    case ARM64::STRBpost:
    case ARM64::STRBpre:
    case ARM64::STRDpost:
    case ARM64::STRDpre:
    case ARM64::STRHHpost:
    case ARM64::STRHHpre:
    case ARM64::STRHpost:
    case ARM64::STRHpre:
    case ARM64::STRQpost:
    case ARM64::STRQpre:
    case ARM64::STRSpost:
    case ARM64::STRSpre:
    case ARM64::STRWpost:
    case ARM64::STRWpre:
    case ARM64::STRXpost:
    case ARM64::STRXpre:
    case ARM64::STTRBi:
    case ARM64::STTRHi:
    case ARM64::STTRWi:
    case ARM64::STTRXi:
    case ARM64::STURBBi:
    case ARM64::STURBi:
    case ARM64::STURDi:
    case ARM64::STURHHi:
    case ARM64::STURHi:
    case ARM64::STURQi:
    case ARM64::STURSi:
    case ARM64::STURWi:
    case ARM64::STURXi: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case ARM64::LDNPDi:
    case ARM64::LDNPQi:
    case ARM64::LDNPSi:
    case ARM64::LDNPWi:
    case ARM64::LDNPXi:
    case ARM64::LDPDi:
    case ARM64::LDPDpost:
    case ARM64::LDPDpre:
    case ARM64::LDPQi:
    case ARM64::LDPQpost:
    case ARM64::LDPQpre:
    case ARM64::LDPSWi:
    case ARM64::LDPSWpost:
    case ARM64::LDPSWpre:
    case ARM64::LDPSi:
    case ARM64::LDPSpost:
    case ARM64::LDPSpre:
    case ARM64::LDPWi:
    case ARM64::LDPWpost:
    case ARM64::LDPWpre:
    case ARM64::LDPXi:
    case ARM64::LDPXpost:
    case ARM64::LDPXpre:
    case ARM64::STNPDi:
    case ARM64::STNPQi:
    case ARM64::STNPSi:
    case ARM64::STNPWi:
    case ARM64::STNPXi:
    case ARM64::STPDi:
    case ARM64::STPDpost:
    case ARM64::STPDpre:
    case ARM64::STPQi:
    case ARM64::STPQpost:
    case ARM64::STPQpre:
    case ARM64::STPSi:
    case ARM64::STPSpost:
    case ARM64::STPSpre:
    case ARM64::STPWi:
    case ARM64::STPWpost:
    case ARM64::STPWpre:
    case ARM64::STPXi:
    case ARM64::STPXpost:
    case ARM64::STPXpre: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: dst2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case ARM64::CPYi64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case ARM64::CPYi8: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case ARM64::CPYi32: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case ARM64::CPYi16: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: src
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: idx
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case ARM64::ADDSWrs:
    case ARM64::ADDSXrs:
    case ARM64::ADDWrs:
    case ARM64::ADDXrs:
    case ARM64::ANDSWrs:
    case ARM64::ANDSXrs:
    case ARM64::ANDWrs:
    case ARM64::ANDXrs:
    case ARM64::BICSWrs:
    case ARM64::BICSXrs:
    case ARM64::BICWrs:
    case ARM64::BICXrs:
    case ARM64::EONWrs:
    case ARM64::EONXrs:
    case ARM64::EORWrs:
    case ARM64::EORXrs:
    case ARM64::ORNWrs:
    case ARM64::ORNXrs:
    case ARM64::ORRWrs:
    case ARM64::ORRXrs:
    case ARM64::SUBSWrs:
    case ARM64::SUBSXrs:
    case ARM64::SUBWrs:
    case ARM64::SUBXrs: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(192)) << 16;
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case ARM64::LDAXPW:
    case ARM64::LDAXPX:
    case ARM64::LDXPW:
    case ARM64::LDXPX: {
      // op: dst1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: dst2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::HINT: {
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 5;
      break;
    }
    case ARM64::BRK:
    case ARM64::DCPS1:
    case ARM64::DCPS2:
    case ARM64::DCPS3:
    case ARM64::HLT:
    case ARM64::HVC:
    case ARM64::SMC:
    case ARM64::SVC: {
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case ARM64::SYS: {
      // op: op1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      // op: Cn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      // op: Cm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: op2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case ARM64::LDARB:
    case ARM64::LDARH:
    case ARM64::LDARW:
    case ARM64::LDARX:
    case ARM64::LDAXRB:
    case ARM64::LDAXRH:
    case ARM64::LDAXRW:
    case ARM64::LDAXRX:
    case ARM64::LDXRB:
    case ARM64::LDXRH:
    case ARM64::LDXRW:
    case ARM64::LDXRX:
    case ARM64::STLRB:
    case ARM64::STLRH:
    case ARM64::STLRW:
    case ARM64::STLRX: {
      // op: reg
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::STLXPW:
    case ARM64::STLXPX:
    case ARM64::STXPW:
    case ARM64::STXPX: {
      // op: status
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: dst1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: dst2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case ARM64::STLXRB:
    case ARM64::STLXRH:
    case ARM64::STLXRW:
    case ARM64::STLXRX:
    case ARM64::STXRB:
    case ARM64::STXRH:
    case ARM64::STXRW:
    case ARM64::STXRX: {
      // op: status
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: reg
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

